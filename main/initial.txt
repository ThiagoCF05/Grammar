[
    {
        "features": {
            "tense": "present continuous",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :ARG1/NP -)",
        "graph_rules": {
            "establish-01": [
                ":ARG1/NP"
            ]
        },
        "head": "establish-01",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (S (VP (VB XXX) (:ARG1/NP) (:mod/PP))))",
        "tree_rules": [
            ":ARG1/NP"
        ]
    },
    {
        "features": {
            "tense": "simple past",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :ARG0/NP - \n\t :ARG1/S - \n\t :time/PP -)",
        "graph_rules": {
            "start-01": [
                ":ARG0/NP",
                ":ARG1/S",
                ":time/PP"
            ]
        },
        "head": "start-01",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (S (:time/PP) (, ,) (:ARG0/NP) (VP (VB XXX) (:ARG1/S)) (. .)))",
        "tree_rules": [
            ":ARG1/S",
            ":time/PP",
            ":ARG0/NP"
        ]
    },
    {
        "features": {
            "tense": "simple future",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :ARG0/NP - \n\t :ARG1/NP - \n\t :time/NP-TMP -)",
        "graph_rules": {
            "join-01": [
                ":ARG0/NP",
                ":ARG1/NP",
                ":time/NP-TMP"
            ]
        },
        "head": "join-01",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (S (:ARG0/NP) (VP (VB XXX) (:ARG1/NP) (:ARG1-of/PP) (:time/NP-TMP)) (. .)))",
        "tree_rules": [
            ":ARG1/NP",
            ":time/NP-TMP",
            ":ARG0/NP"
        ]
    },
    {
        "features": {
            "tense": "simple present",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :polarity/RB - \n\t :ARG1/VP -)",
        "graph_rules": {
            "possible-01": [
                ":polarity/RB",
                ":ARG1/VP"
            ]
        },
        "head": "possible-01",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (S (:ARG0/NP) (VP (MD XXX) (:polarity/RB) (:ARG1/VP)) (. .)))",
        "tree_rules": [
            ":polarity/RB",
            ":ARG1/VP"
        ]
    },
    {
        "features": {
            "tense": "simple present",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :op1/VB - \n\t :op2/VB -)",
        "graph_rules": {
            "and": [
                ":op1/VB",
                ":op2/VB"
            ]
        },
        "head": "and",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (S (:ARG1/NP) (VP (:op1/VB) (CC XXX) (:op2/VB) (:ARG2/PP)) (. .)))",
        "tree_rules": [
            ":op1/VB",
            ":op2/VB"
        ]
    },
    {
        "features": {
            "tense": "simple present",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :op1/VP - \n\t :op2/VP - \n\t :op3/VP - \n\t :time/IN - \n\t :condition/SBAR -)",
        "graph_rules": {
            "and": [
                ":op1/VP",
                ":op2/VP",
                ":op3/VP",
                ":time/IN",
                ":condition/SBAR"
            ]
        },
        "head": "and",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (S (:condition/SBAR) (, ,) (:ARG0/NP) (VP (:op1/VP) (, ,) (CC XXX) (:op2/VP)) (. .)))",
        "tree_rules": [
            ":time/IN",
            ":op3/VP",
            ":op1/VP",
            ":op2/VP",
            ":condition/SBAR"
        ]
    },
    {
        "features": {
            "tense": "simple past",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :ARG0/E - \n\t :ARG1/SBAR -)",
        "graph_rules": {
            "say-01": [
                ":ARG0/E",
                ":ARG1/SBAR"
            ]
        },
        "head": "say-01",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (S (NP (NNP rockstr\u00f6m)) (VP (VB XXX) (:ARG1/SBAR)) (. .)))",
        "tree_rules": [
            ":ARG1/SBAR",
            ":ARG0/E"
        ]
    },
    {
        "features": {
            "tense": "simple present",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :year c \n\t :month c \n\t :day c)",
        "graph_rules": {},
        "head": "date-entity",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (FRAG (NP (CD XXX))))",
        "tree_rules": []
    },
    {
        "features": {
            "tense": "simple present",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :ARG0/NNP - \n\t :ARG1 - \n\t :time/NP -)",
        "graph_rules": {
            "announce-01": [
                ":ARG0/NNP",
                ":ARG1",
                ":time/NP"
            ]
        },
        "head": "announce-01",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (SINV))",
        "tree_rules": [
            ":ARG0/NNP",
            ":time/NP"
        ]
    },
    {
        "features": {
            "tense": "simple present",
            "type": "verb",
            "voice": "active"
        },
        "graph": "(XXX \n\t :ARG0/NP - \n\t :location/NP - \n\t :time -)",
        "graph_rules": {
            "byline-91": [
                ":ARG0/NP",
                ":location/NP",
                ":time"
            ]
        },
        "head": "byline-91",
        "name": ":root/ROOT",
        "parent_head": "",
        "parent_rule": "",
        "tree": "(ROOT (S))",
        "tree_rules": [
            ":ARG0/NP",
            ":location/NP"
        ]
    }
]