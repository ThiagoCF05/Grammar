# chapter_0 7_1 ._2
(c / chapter~e.0 :mod 7~e.1)

# on_0 the_1 fifth_2 day_3 --_4 again_5 ,_6 as_7 always_8 ,_9 it_10 was_11 thanks_12 to_13 the_14 sheep_15 --_16 the_17 secret_18 of_19 the_20 little_21 prince_22 's_23 life_24 was_25 revealed_26 to_27 me_28 ._29
(r / reveal-01~e.26 :arg0 (s / sheep~e.15 :arg1-of (t / thank-01~e.12)) :arg1 (s2 / secret~e.18 :poss~e.0 (l / life~e.24 :poss~e.23 (p / prince~e.22 :mod (l2 / little~e.21)))) :arg2 (i / i~e.28) :time~e.7 (d / day~e.3 :ord~e.2 (o / ordinal-entity~e.2 :value 5~e.2)) :mod (a / again~e.5) :time~e.7 (a2 / always~e.8))

# abruptly_0 ,_1 without_2 anything_3 to_4 lead_5 up_6 to_7 it_8 ,_9 and_10 as_11 if_12 the_13 question_14 had_15 been_16 born_17 of_18 long_19 and_20 silent_21 meditation_22 on_23 his_24 problem_25 ,_26 he_27 demanded_28 :_29 "_30 a_31 sheep_32 --_33 if_34 it_35 eats_36 little_37 bushes_38 ,_39 does_40 it_41 eat_42 flowers_43 ,_44 too_45 ?_46 "_47
(d / demand-01~e.28 :arg0 (h / he~e.27) :arg1 (e / eat-01~e.42 :mode interrogative~e.46 :arg0 (s / sheep~e.32) :arg1 (f / flower~e.43 :mod (t / too~e.45)) :condition~e.34 (e2 / eat-01~e.36 :arg0 s :arg1 (b / bush~e.38 :mod (l / little~e.37)))) :manner~e.2 (a / abrupt~e.0) :conj-as-if~e.12 (b2 / bear-02~e.17 :arg0 (m / meditate-01~e.22 :arg1 (p / problem~e.25 :poss~e.24 h) :arg1-of (l3 / long-03~e.19) :manner (s2 / silent~e.21)) :arg1 (t2 / thing~e.14 :arg1-of~e.15 (q / question-01~e.14))) :arg2-of~e.4 (l2 / lead-up-05~e.5 :polarity -~e.40 :arg1 (a2 / anything~e.3)))

# "_0 a_1 sheep_2 ,_3 "_4
(s / sheep~e.2)

# i_0 answered_1 ,_2 "_3 eats_4 anything_5 it_6 finds_7 in_8 its_9 reach_10 ._11 "_12
(a / answer-01~e.1 :arg0 (i / i~e.0) :arg1 (e / eat-01~e.4 :arg1 (a2 / anything~e.5 :arg1-of (f / find-01~e.7 :arg0 (i2 / it~e.9) :location~e.8 (r / reach-03~e.10 :arg0 i2)))))

# "_0 even_1 flowers_2 that_3 have_4 thorns_5 ?_6 "_7
(f / flower~e.2 :mode~e.3 interrogative~e.6 :mod (e / even~e.1) :arg0-of (h / have-03~e.4 :arg1 (t / thorn~e.5)))

# "_0 yes_1 ,_2 even_3 flowers_4 that_5 have_6 thorns_7 ._8 "_9
(f / flower~e.4 :mod (e / even~e.3) :arg0-of (h / have-03~e.6 :arg1 (t / thorn~e.7)))

# "_0 then_1 the_2 thorns_3 --_4 what_5 use_6 are_7 they_8 ?_9 "_10
(h / have-purpose-91~e.1 :arg1 (t / thorn~e.3) :arg2 (a / amr-unknown~e.5) :arg1-of (h2 / have-condition-91~e.6))

# i_0 did_1 not_2 know_3 ._4
(k / know-01~e.3 :arg0 (i / i~e.0) :polarity~e.2 -~e.1)

# at_0 that_1 moment_2 i_3 was_4 very_5 busy_6 trying_7 to_8 unscrew_9 a_10 bolt_11 that_12 had_13 got_14 stuck_15 in_16 my_17 engine_18 ._19
(t / try-01~e.7 :arg0 (i / i~e.3 :arg1-of (b2 / busy-01~e.6 :degree (v / very~e.5))) :arg1 (u / unscrew-01~e.9 :arg0 i :arg1 (b / bolt~e.11 :arg1-of~e.12 (s / stick-01~e.15 :arg2 (e / engine~e.18 :poss~e.17 i)))) :time~e.0 (m / moment~e.2 :mod (t2 / that~e.1)))

# i_0 was_1 very_2 much_3 worried_4 ,_5 for_6 it_7 was_8 becoming_9 clear_10 to_11 me_12 that_13 the_14 breakdown_15 of_16 my_17 plane_18 was_19 extremely_20 serious_21 ._22
(c2 / cause-01~e.13 :arg0 (c / clear-06~e.10 :arg1 (s / serious-02~e.21 :arg1 (b / break-down-12~e.15 :arg1 (p / plane~e.18 :poss~e.17 i)) :degree (e / extreme~e.20)) :arg2 (i / i~e.0)) :arg1 (w / worry-01~e.4 :arg1 i :quant (m / much~e.3 :degree (v / very~e.2))))

# and_0 i_1 had_2 so_3 little_4 drinking_5 -_6 water_7 left_8 that_9 i_10 had_11 to_12 fear_13 for_14 the_15 worst_16 ._17
(a / and~e.0 :op1 (h / have-03~e.2 :arg0 (i / i~e.1) :arg1 (w / water~e.7 :purpose~e.12 (d / drink-01~e.5) :mod (l / little~e.4 :degree (s / so~e.3)) :arg1-of~e.9 (l2 / leave-17~e.8)) :arg0-of (o / obligate-01~e.14 :arg1 i :arg2 (f / fear-01~e.13 :arg0 i :arg1 (b / bad-07~e.16 :degree (m / most~e.16))))))

# "_0 the_1 thorns_2 -_3 -_4 what_5 use_6 are_7 they_8 ?_9 "_10
(u / use-01~e.6 :arg1 (t / thorn~e.2) :arg2 (a / amr-unknown~e.5))

# the_0 little_1 prince_2 never_3 let_4 go_5 of_6 a_7 question_8 ,_9 once_10 he_11 had_12 asked_13 it_14 ._15
(l / let-01~e.4 :polarity~e.3 -~e.3 :arg0 (p / prince~e.2 :mod (l2 / little~e.1)) :arg1 (g / go-01~e.5 :arg1 (t / thing~e.8 :arg1-of~e.12 (q / question-01~e.8 :arg0 p))) :time (o / once~e.10 :op1 (a / ask-01~e.13 :arg0 p :arg1 q)))

# as_0 for_1 me_2 ,_3 i_4 was_5 upset_6 over_7 that_8 bolt_9 ._10
(u / upset-01~e.6 :arg0 (b / bolt~e.9 :mod (t / that~e.8)) :arg1 (i / i~e.4))

# and_0 i_1 answered_2 with_3 the_4 first_5 thing_6 that_7 came_8 into_9 my_10 head_11 :_12 "_13 the_14 thorns_15 are_16 of_17 no_18 use_19 at_20 all_21 ._22
(a / and~e.0 :op1 (a2 / answer-01~e.2 :arg0 (i / i~e.1) :arg2 (t / thing~e.6 :ord~e.3 (o / ordinal-entity~e.5 :value 1) :arg1-of (c / come-01~e.8 :arg4~e.9 (h / head~e.11 :part-of~e.10 i)) :domain~e.21 (u / use-01~e.19 :polarity~e.18 -~e.18 :arg1 (t2 / thorn~e.15) :arg2 (a3 / anything~e.17)))))

# flowers_0 have_1 thorns_2 just_3 for_4 spite_5 !_6 "_7
(h / have-03~e.1 :arg0 (f / flower~e.0) :arg1 (t / thorn~e.2) :purpose~e.4 (s / spite~e.5) :mod (j / just~e.3))

# "_0 oh_1 !_2 "_3
(o / oh~e.1 :mode~e.2 expressive~e.2)

# there_0 was_1 a_2 moment_3 of_4 complete_5 silence_6 ._7
(m / moment~e.3 :arg1-of (c / compose-01~e.5 :arg2 (s / silent~e.6 :arg1-of (c2 / complete-02~e.5))))

# then_0 the_1 little_2 prince_3 flashed_4 back_5 at_6 me_7 ,_8 with_9 a_10 kind_11 of_12 resentfulness_13 :_14 "_15 i_16 do_17 n't_18 believe_19 you_20 !_21
(f / flash-01~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2)) :arg1 (b / believe-01~e.19 :polarity~e.18 -~e.17 :arg0 p :arg1 i) :arg2 (i / i~e.16) :time (t / then~e.0) :manner~e.9 (r / resent-01~e.13 :arg0 p :mod (k / kind~e.11)) :direction~e.6 (b2 / back~e.5))

# flowers_0 are_1 weak_2 creatures_3 ._4
(c / creature~e.3 :arg1-of (w / weak-02~e.2) :domain (f / flower~e.0))

# they_0 are_1 na√Øve_2 ._3
(n / naive~e.2 :domain (t / they~e.0))

# they_0 reassure_1 themselves_2 as_3 best_4 they_5 can_6 ._7
(r / reassure-01~e.1 :arg0 (t / they~e.0) :arg1 t :arg2-of (g / good-03~e.2 :arg1 t :degree (m / most~e.4) :compared-to~e.3 (p2 / possible-01~e.6 :arg1 (r2 / reassure-01~e.1 :arg0 t :arg1 t))))

# they_0 believe_1 that_2 their_3 thorns_4 are_5 terrible_6 weapons_7 ..._8 "_9
(b2 / believe-01~e.1 :arg0 (t / they~e.0) :arg1 (w / weapon~e.7 :domain (t2 / thorn~e.4 :poss~e.3 t) :arg1-of (t3 / terrible-01~e.6)))

# i_0 did_1 not_2 answer_3 ._4
(a / answer-01~e.3 :arg0 (i / i~e.0) :polarity~e.2 -~e.1)

# at_0 that_1 instant_2 i_3 was_4 saying_5 to_6 myself_7 :_8 "_9 if_10 this_11 bolt_12 still_13 will_14 n't_15 turn_16 ,_17 i_18 am_19 going_20 to_21 knock_22 it_23 out_24 with_25 the_26 hammer_27 ._28 "_29
(s / say-01~e.5 :arg0 (i / i~e.3) :arg1 (k / knock-out-03~e.22 :arg0 i :arg1 b :arg2 (h / hammer~e.27) :condition~e.10 (t2 / turn-01~e.16 :polarity~e.15 - :arg1 (b / bolt~e.12 :mod (t3 / this~e.11)) :mod (s2 / still~e.13))) :arg2 i :time~e.0 (i2 / instant~e.2 :mod (t / that~e.1)))

# again_0 the_1 little_2 prince_3 disturbed_4 my_5 thoughts_6 ._7
(d / disturb-01~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2)) :arg1 (t / think-01~e.6 :arg0 (i / i~e.5)) :mod (a / again~e.0))

# "_0 and_1 you_2 actually_3 believe_4 that_5 the_6 flowers_7 -_8 -_9 "_10
(a / and~e.1 :op1 (b / believe-01~e.4 :arg0 (y / you~e.2) :arg1 (d / do-02~e.5 :arg0 (f / flower~e.7)) :arg1-of (a2 / actual-02~e.3)))

# "_0 oh_1 ,_2 no_3 !_4 "_5
(n / no~e.3 :mod (o / oh~e.1 :mode~e.4 expressive~e.4))

# i_0 cried_1 ._2
(c / cry-01~e.1 :arg0 (i / i~e.0))

# "_0 no_1 ,_2 no_3 no_4 !_5
(n / no~e.3 :quant 3~e.5)

# i_0 do_1 n't_2 believe_3 anything_4 ._5
(b2 / believe-01~e.3 :polarity~e.2 -~e.1 :arg0 (i / i~e.0) :arg1 (a2 / anything~e.4))

# i_0 answered_1 you_2 with_3 the_4 first_5 thing_6 that_7 came_8 into_9 my_10 head_11 ._12
(a / answer-01~e.1 :arg0 (i / i~e.0) :arg1 (y / you~e.2) :arg2 (t / thing~e.6 :ord~e.3 (o / ordinal-entity~e.5 :value 1) :arg1-of (c / come-01~e.8 :arg4~e.9 (h / head~e.11 :part-of~e.10 i))))

# do_0 n't_1 you_2 see_3 -_4 -_5 i_6 am_7 very_8 busy_9 with_10 matters_11 of_12 consequence_13 !_14 "_15
(s / see-01~e.3 :polarity~e.1 -~e.0 :mode~e.14 interrogative :arg0 (y / you~e.2) :arg1 (b / busy-01~e.9 :arg1 (i / i~e.6) :arg2 (m / matter~e.11 :arg0-of~e.12 (h / have-03~e.14 :arg1 (c3 / consequence~e.13))) :degree (v / very~e.8)))

# he_0 stared_1 at_2 me_3 ,_4 thunderstruck_5 ._6
(s / stare-01~e.1 :arg0 (h / he~e.0 :mod (t / thunderstruck~e.5)) :arg1 (i / i~e.3))

# "_0 matters_1 of_2 consequence_3 !_4 "_5
(m / matter~e.1 :arg0-of~e.2 (h / have-03~e.4 :arg1 (c / consequence~e.3)))

# he_0 looked_1 at_2 me_3 there_4 ,_5 with_6 my_7 hammer_8 in_9 my_10 hand_11 ,_12 my_13 fingers_14 black_15 with_16 engine_17 -_18 grease_19 ,_20 bending_21 down_22 over_23 an_24 object_25 which_26 seemed_27 to_28 him_29 extremely_30 ugly_31 ..._32
(l / look-01~e.1 :arg0 (h / he~e.0) :arg1 (i / i~e.3 :arg0-of~e.16 (b2 / bend-01~e.21 :destination~e.23 (d / down~e.22) :location (o / object~e.25 :mod (u / ugly~e.31 :mod (s / seem-01~e.27 :arg2 h) :degree (e2 / extreme~e.30)))) :arg0-of~e.16 (h4 / have-03~e.7 :arg1 (h2 / hammer~e.8 :poss~e.7 i) :location~e.9 (h3 / hand~e.11 :part-of~e.10 i)) :arg0-of~e.16 (h5 / have-03 :arg1 (f / finger~e.14 :part-of~e.13 i :arg1-of (b / black-04~e.15 :arg0 (g / grease~e.19 :mod (e / engine~e.17)))))) :location~e.4 (t / there~e.4))

# "_0 you_1 talk_2 just_3 like_4 the_5 grown_6 -_7 ups_8 !_9 "_10
(t2 / talk-01~e.2 :arg0 (y / you~e.1) :arg1-of (r / resemble-01~e.4 :arg2 (g2 / grown-up~e.6) :mod (j2 / just~e.3)))

# that_0 made_1 me_2 a_3 little_4 ashamed_5 ._6
(s / shame-01~e.5 :arg0 (t / that~e.0) :arg1 (i / i~e.2) :degree (l / little~e.4))

# but_0 he_1 went_2 on_3 ,_4 relentlessly_5 :_6 "_7 you_8 mix_9 everything_10 up_11 together_12 ..._13
(c / contrast-01~e.0 :arg2 (g / go-on-25~e.2 :arg0 (h / he~e.1) :arg1 (m / mix-up-02~e.9 :arg0 (y / you~e.8) :arg1 (e / everything~e.10) :arg3~e.11 (t / together~e.12)) :manner (r / relentless~e.5)))

# you_0 confuse_1 everything_2 ..._3 "_4
(c2 / confuse-01~e.1 :arg0 (y2 / you~e.0) :arg2 (e2 / everything~e.2))

# he_0 was_1 really_2 very_3 angry_4 ._5
(a / angry~e.4 :domain (h / he~e.0) :degree (v / very~e.3) :arg1-of (r / real-04~e.2))

# he_0 tossed_1 his_2 golden_3 curls_4 in_5 the_6 breeze_7 ._8
(t / toss-01~e.1 :arg0 (h / he~e.0) :arg1 (c / curl~e.4 :poss~e.2 h :mod (g / golden~e.3)) :location~e.5 (b / breeze~e.7))

# "_0 i_1 know_2 a_3 planet_4 where_5 there_6 is_7 a_8 certain_9 red_10 -_11 faced_12 gentleman_13 ._14
(k / know-02~e.2 :arg0 (i / i~e.1) :arg1 (p / planet~e.4 :location-of~e.5 (g2 / gentleman~e.13 :mod (c / certain~e.9) :part~e.8 (f / face~e.12 :arg1-of (r / red-02~e.10)))))

# he_0 has_1 never_2 smelled_3 a_4 flower_5 ._6
(s / smell-01~e.3 :polarity~e.2 -~e.2 :arg0 (h / he~e.0) :arg1 (f / flower~e.5) :time (e / ever~e.2))

# he_0 has_1 never_2 looked_3 at_4 a_5 star_6 ._7
(l / look-01~e.3 :polarity~e.2 -~e.2 :arg0 (h / he~e.0) :arg1 (s / star~e.6) :time (e / ever~e.2))

# he_0 has_1 never_2 loved_3 any_4 one_5 ._6
(l2 / love-01~e.3 :polarity~e.2 -~e.2 :arg0 (h3 / he~e.0) :arg1 (a2 / anyone~e.4) :time (e / ever~e.2))

# he_0 has_1 never_2 done_3 anything_4 in_5 his_6 life_7 but_8 add_9 up_10 figures_11 ._12
(d / do-02~e.3 :polarity~e.2 -~e.2 :arg0 (h / he~e.0) :arg1 (a2 / anything~e.4) :time~e.5 (l / live-01~e.7 :arg0 h) :time~e.5 (e / ever~e.2) :arg2-of~e.6 (e2 / except-01~e.10 :arg1 (a / add-up-04~e.9 :arg0 h :arg1 (f / figure~e.11))))

# and_0 all_1 day_2 he_3 says_4 over_5 and_6 over_7 ,_8 just_9 like_10 you_11 :_12 '_13 i_14 am_15 busy_16 with_17 matters_18 of_19 consequence_20 !_21 '_22 and_23 that_24 makes_25 him_26 swell_27 up_28 with_29 pride_30 ._31
(m2 / multi-sentence~e.0 :snt1 (a / and~e.6 :op1 (s / say-01~e.4 :arg0 (h / he~e.3) :arg1 (b / busy-01~e.16 :arg1 h :arg2 (m / matter~e.18 :arg0-of~e.19 (h3 / have-03~e.21 :arg1 (c2 / consequence~e.20)))) :time (d / day~e.2 :mod (a2 / all~e.1)) :frequency (o / over-and-over~e.7) :manner~e.17 (r / resemble-01~e.10 :arg2 (y / you~e.11) :mod (j / just~e.9)) :arg0-of (c3 / cause-01))) :snt2~e.28 (a3 / and~e.23 :op1 (m3 / make-02~e.25 :arg0 (t / that~e.24) :arg1 (s2 / swell-01~e.27 :arg0 t :arg1 h2 :manner~e.29 (p / pride-01~e.30 :arg0 (h2 / he~e.26) :arg2 t)))))

# but_0 he_1 is_2 not_3 a_4 man_5 -_6 -_7 he_8 is_9 a_10 mushroom_11 !_12 "_13
(c / contrast-01~e.0 :arg2 (a / and~e.12 :op1 (m / man~e.5 :polarity~e.3 -~e.3 :domain h) :op2 (m2 / mushroom~e.11 :domain~e.10 (h / he~e.8))))

# "_0 a_1 what_2 ?_3 "_4
(a / amr-unknown~e.3)

# "_0 a_1 mushroom_2 !_3 "_4
(m / mushroom~e.2)

# the_0 little_1 prince_2 was_3 now_4 white_5 with_6 rage_7 ._8
(w / white-03~e.5 :arg1 (p / prince~e.2 :mod (l / little~e.1)) :time (n / now~e.4) :arg1-of (c / cause-01 :arg0 (e / enrage-01~e.7 :arg1 p)))

# "_0 the_1 flowers_2 have_3 been_4 growing_5 thorns_6 for_7 millions_8 of_9 years_10 ._11
(g / grow-03~e.5 :arg0 (f / flower~e.2) :arg1 (t / thorn~e.6) :duration~e.7 (m / multiple~e.8 :op1 (t2 / temporal-quantity :quant 1000000~e.9 :unit (y / year~e.10))))

# for_0 millions_1 of_2 years_3 the_4 sheep_5 have_6 been_7 eating_8 them_9 just_10 the_11 same_12 ._13
(e / eat-01~e.8 :arg0 (s / sheep~e.5) :arg1 (t / they~e.9) :duration~e.0 (m / multiple~e.1 :op1 (t2 / temporal-quantity :quant 1000000~e.2 :unit (y / year~e.3))) :arg1-of~e.12 (h / have-concession-91~e.6))

# and_0 is_1 it_2 not_3 a_4 matter_5 of_6 consequence_7 to_8 try_9 to_10 understand_11 why_12 the_13 flowers_14 go_15 to_16 so_17 much_18 trouble_19 to_20 grow_21 thorns_22 which_23 are_24 never_25 of_26 any_27 use_28 to_29 them_30 ?_31
(a / and~e.0 :op1 (h / have-03~e.4 :polarity~e.3 -~e.3 :mode interrogative~e.31 :arg0 (t / try-01~e.9 :arg1 (u / understand-01~e.11 :arg1 (t4 / thing~e.8 :arg0-of~e.12 (c2 / cause-01~e.12 :arg1 (e / endure-01~e.15 :arg1 (f / flower~e.14) :arg2 (t2 / trouble~e.19 :purpose~e.20 (g2 / grow-01~e.21 :arg0 f :arg1 (t3 / thorn~e.22 :arg1-of (u2 / use-01~e.28 :polarity~e.27 -~e.25 :arg0 f :time (e2 / ever~e.25)))) :quant (m / much~e.18 :degree (s / so~e.17)))))))) :arg1 (c / consequence~e.7)))

# is_0 the_1 warfare_2 between_3 the_4 sheep_5 and_6 the_7 flowers_8 not_9 important_10 ?_11
(i2 / important~e.10 :polarity~e.9 -~e.9 :mode interrogative~e.11 :domain~e.3 (w / war-01~e.2 :arg0 (s / sheep~e.5) :arg1 (f / flower~e.8)))

# is_0 this_1 not_2 of_3 more_4 consequence_5 than_6 a_7 fat_8 red_9 -_10 faced_11 gentleman_12 's_13 sums_14 ?_15
(h / have-03~e.7 :mode interrogative~e.15 :polarity~e.2 -~e.2 :arg0 (t / this~e.1) :arg1 (c / consequence~e.5 :compared-to~e.6 (s / sum~e.14 :poss~e.13 (g / gentleman~e.12 :arg1-of (f / fat-03~e.8) :part~e.7 (f2 / face~e.11 :arg1-of (r / red-02~e.9)))) :degree (m2 / more~e.4)))

# and_0 if_1 i_2 know_3 -_4 -_5 i_6 ,_7 myself_8 -_9 -_10 one_11 flower_12 which_13 is_14 unique_15 in_16 the_17 world_18 ,_19 which_20 grows_21 nowhere_22 but_23 on_24 my_25 planet_26 ,_27 but_28 which_29 one_30 little_31 sheep_32 can_33 destroy_34 in_35 a_36 single_37 bite_38 some_39 morning_40 ,_41 without_42 even_43 noticing_44 what_45 he_46 is_47 doing_48 -_49 -_50 oh_51 !_52
(a / and~e.0 :op1 (o / oh~e.51 :mode~e.52 expressive~e.52 :condition~e.1 (k / know-02~e.3 :arg0 (i / i~e.8) :arg1 (f / flower~e.12 :quant 1~e.11 :mod (u / unique~e.15 :location~e.16 (w / world~e.18)) :arg1-of (g / grow-01~e.21 :location~e.16 (c / contrast-01~e.23 :arg0 (n / nowhere~e.22) :arg1 (p / planet~e.26 :poss~e.25 i))) :arg1-of (d / destroy-01~e.34 :arg0 (s / sheep~e.32 :quant 1 :mod (l / little~e.31) :arg0-of~e.42 (n2 / notice-01~e.44 :polarity - :arg1 d)) :arg2 (b / bite-01~e.38 :quant 1~e.36 :arg1-of (s3 / single-02~e.37)) :arg2-of~e.30 c2 :arg1-of (p2 / possible-01~e.33) :time (d2 / date-entity :dayperiod~e.43 (m / morning~e.40) :mod (s2 / some~e.39)))) :arg1-of (c2 / contrast-01~e.28))))

# you_0 think_1 that_2 is_3 not_4 important_5 !_6 "_7
(t / think-01~e.1 :arg0 (y / you~e.0) :arg1 (t2 / that~e.2 :mod (i / important~e.5 :polarity~e.4 -~e.4)))

# his_0 face_1 turned_2 from_3 white_4 to_5 red_6 as_7 he_8 continued_9 :_10 "_11 if_12 some_13 one_14 loves_15 a_16 flower_17 ,_18 of_19 which_20 just_21 one_22 single_23 blossom_24 grows_25 in_26 all_27 the_28 millions_29 and_30 millions_31 of_32 stars_33 ,_34 it_35 is_36 enough_37 to_38 make_39 him_40 happy_41 just_42 to_43 look_44 at_45 the_46 stars_47 ._48
(t / turn-02~e.2 :arg1 (f / face~e.1 :part-of~e.0 (h / he~e.8)) :arg2 (r / red-02~e.6 :arg1 f) :arg3~e.3 (w / white-03~e.4 :arg1 f) :time~e.7 (c / continue-02~e.9 :arg0 h :arg1 (s3 / suffice-01~e.37 :arg0 l :arg1 (m / make-02~e.39 :arg0 l :arg1 (h2 / happy-01~e.41 :arg1 s) :arg1-of (c2 / cause-01 :arg0 (l2 / look-01~e.44 :arg0 s :arg1 s2 :mod (j2 / just~e.42)))) :condition~e.12 (l / love-01~e.15 :arg0 (s / someone~e.13) :arg1 (f2 / flower~e.17 :part~e.16 (b / blossom~e.24 :quant 1~e.22 :mod (j / just~e.21) :arg1-of (g / grow-01~e.25 :location~e.26 (s2 / star~e.33 :mod (a2 / all~e.27) :quant (m2 / multiple~e.29 :op1 1000000~e.32))) :arg1-of (s4 / single-02~e.23)))))))

# he_0 can_1 say_2 to_3 himself_4 ,_5 '_6 somewhere_7 ,_8 my_9 flower_10 is_11 there_12 ..._13 '_14 but_15 if_16 the_17 sheep_18 eats_19 the_20 flower_21 ,_22 in_23 one_24 moment_25 all_26 his_27 stars_28 will_29 be_30 darkened_31 ..._32
(p2 / possible-01~e.1 :arg1 (s / say-01~e.2 :arg0 (h / he~e.0) :arg1 (c / contrast-01~e.15 :arg1 (b / be-located-at-91~e.4 :arg1 (f2 / flower~e.10 :poss~e.9 h) :arg2 (t2 / there~e.12)) :arg2 (d / darken-01~e.31 :arg1 (s4 / star~e.28 :mod (a / all~e.26) :poss~e.27 h) :condition~e.16 (e2 / eat-01~e.19 :arg0 (s3 / sheep~e.18) :arg1 f2) :time (m / moment~e.25 :quant 1~e.24))) :arg2 h))

# and_0 you_1 think_2 that_3 is_4 not_5 important_6 !_7 "_8
(a2 / and~e.0 :op1 (t / think-01~e.2 :arg0 (y / you~e.1) :arg1 (i / important~e.6 :polarity~e.5 -~e.5 :domain (t2 / that~e.3))))

# he_0 could_1 not_2 say_3 anything_4 more_5 ._6
(p / possible-01~e.1 :polarity~e.2 -~e.2 :arg1 (s / say-01~e.3 :arg0 (h / he~e.0) :arg1 (a / anything~e.4 :mod (m / more~e.5))))

# his_0 words_1 were_2 choked_3 by_4 sobbing_5 ._6
(c / choke-up-04~e.3 :arg0 (s / sob-01~e.5) :arg1 (w / word~e.1 :poss~e.0 (h / he~e.4)))

# the_0 night_1 had_2 fallen_3 ._4
(f / fall-04~e.3 :arg1 (n / night~e.1))

# i_0 had_1 let_2 my_3 tools_4 drop_5 from_6 my_7 hands_8 ._9
(l / let-01~e.2 :arg0 (i / i~e.0) :arg1 (d / drop-01~e.5 :arg1 (t / tool~e.4 :poss~e.3 i) :arg3~e.6 (h / hand~e.8 :part-of~e.7 i)))

# of_0 what_1 moment_2 now_3 was_4 my_5 hammer_6 ,_7 my_8 bolt_9 ,_10 or_11 thirst_12 ,_13 or_14 death_15 ?_16
(o / or~e.11 :op1 (h / hammer~e.6 :poss~e.5 (i / i~e.5)) :op2 (b / bolt~e.9 :poss~e.8 i) :op3 (t / thirst-01~e.12 :arg0 i) :op4 (d / die-01~e.15 :arg1 i) :time (m / moment~e.2 :mod (a / amr-unknown~e.1)))

# on_0 one_1 star_2 ,_3 one_4 planet_5 ,_6 my_7 planet_8 ,_9 the_10 earth_11 ,_12 there_13 was_14 a_15 little_16 prince_17 to_18 be_19 comforted_20 ._21
(b / be-located-at-91~e.0 :arg1 (p / prince~e.17 :mod (l / little~e.16) :arg1-of (c / comfort-01~e.20 :arg2-of~e.18 (o / obligate-01))) :arg2 (a / and :op1 (s / star~e.2 :quant 1~e.1) :op2 (p2 / planet~e.5 :quant 1~e.4) :op3 (p4 / planet :wiki~e.8 "earth"~e.11 :name (n / name :op1 "earth"~e.11) :poss~e.7 (i / i~e.7))))

# i_0 took_1 him_2 in_3 my_4 arms_5 ,_6 and_7 rocked_8 him_9 ._10
(a / and~e.7 :op1 (t / take-01~e.1 :arg0 (i / i~e.0) :arg1 (h / he~e.2) :arg3~e.9 (a2 / arm~e.5 :part-of~e.4 i)) :op2 (r / rock-01~e.8 :arg0 i :arg1 h))

# i_0 said_1 to_2 him_3 :_4 "_5 the_6 flower_7 that_8 you_9 love_10 is_11 not_12 in_13 danger_14 ._15
(s / say-01~e.1 :arg0 (i / i~e.0) :arg1 (e / endanger-01~e.14 :polarity~e.12 -~e.12 :arg1 (f / flower~e.7 :arg1-of (l / love-01~e.10 :arg0 h))) :arg2 (h / he~e.3))

# i_0 will_1 draw_2 you_3 a_4 muzzle_5 for_6 your_7 sheep_8 ._9
(d / draw-01~e.2 :arg0 (i / i~e.0) :arg1 (t / thing~e.5 :arg2-of~e.3 (m / muzzle-01~e.5 :arg1 (s / sheep~e.8 :poss~e.7 y))) :arg2 (y / you~e.7))

# i_0 will_1 draw_2 you_3 a_4 railing_5 to_6 put_7 around_8 your_9 flower_10 ._11
(d2 / draw-01~e.2 :arg0 (i / i~e.0) :arg1 (r / railing~e.5 :arg1-of (p / put-01~e.7 :arg2 (a / around~e.8 :op1 (f / flower~e.10 :poss~e.9 y)))) :arg2 (y / you~e.3))

# i_0 will_1 -_2 -_3 "_4
(d / do-02~e.1 :arg0 (i / i~e.0))

# i_0 did_1 not_2 know_3 what_4 to_5 say_6 to_7 him_8 ._9
(k / know-01~e.3 :polarity~e.2 -~e.1 :arg0 (i / i~e.0) :arg1 (t / thing~e.4 :arg1-of~e.6 (s / say-01~e.6 :arg0 i :arg2 (h / he~e.8))))

# i_0 felt_1 awkward_2 and_3 blundering_4 ._5
(f / feel-01~e.1 :arg0 (i / i~e.0) :arg1 (a / and~e.3 :op1 (a2 / awkward~e.2) :op2 (b / blunder-01~e.4 :arg0 i)))

# i_0 did_1 not_2 know_3 how_4 i_5 could_6 reach_7 him_8 ,_9 where_10 i_11 could_12 overtake_13 him_14 and_15 go_16 on_17 hand_18 in_19 hand_20 with_21 him_22 once_23 more_24 ._25
(k / know-01~e.3 :polarity~e.2 -~e.1 :arg0 (i / i~e.0) :arg1 (a2 / and~e.15 :op1 (m / manner~e.4 :manner-of~e.4 (r / reach-02~e.7 :arg0 i :arg1 (h / he~e.8) :arg1-of (p / possible-01~e.6))) :op2 (l / location~e.5 :location-of~e.10 (o / overtake-01~e.13 :arg0 i :arg1 h :arg1-of (p2 / possible-01~e.12)) :location-of~e.10 (g / go-on-15~e.17 :arg1 i :mod (a3 / again~e.24 :frequency~e.23 1) :manner~e.21 (a / accompany-01~e.17 :arg0 h :arg1 i :manner (h2 / hand-in-hand~e.20))))))

# it_0 is_1 such_2 a_3 secret_4 place_5 ,_6 the_7 land_8 of_9 tears_10 ._11
(p / place~e.5 :mod (s / secret~e.4 :degree (s2 / such~e.2)) :domain~e.0 (l / land~e.8 :location-of~e.9 (t / tear~e.10)))

# chapter_0 8_1 ._2
(c / chapter~e.0 :mod 8~e.1)

# i_0 soon_1 learned_2 to_3 know_4 this_5 flower_6 better_7 ._8
(l / learn-01~e.2 :arg0 (i / i~e.0) :arg1 (k / know-02~e.4 :arg0 i :arg1 (f / flower~e.6 :mod (t / this~e.5)) :arg2-of~e.3 (g / good-03~e.7 :arg1 i :degree (m / more~e.7))) :time (s / soon~e.1))

# on_0 the_1 little_2 prince_3 's_4 planet_5 the_6 flowers_7 had_8 always_9 been_10 very_11 simple_12 ._13
(s / simple-02~e.12 :arg1 (f / flower~e.7) :degree (v / very~e.11) :time (a / always~e.9) :location~e.0 (p / planet~e.5 :poss~e.4 (p2 / prince~e.3 :mod (l / little~e.2))))

# they_0 had_1 only_2 one_3 ring_4 of_5 petals_6 ;_7 they_8 took_9 up_10 no_11 room_12 at_13 all_14 ;_15 they_16 were_17 a_18 trouble_19 to_20 nobody_21 ._22
(m / multi-sentence~e.2 :snt1 (h / have-03~e.1 :arg0 (t / they~e.0) :arg1 (r / ring~e.4 :quant 1~e.3 :mod (o / only~e.2) :consist-of~e.5 (p / petal~e.6))) :snt2~e.10 (t2 / take-up-13~e.9 :polarity~e.11 -~e.11 :arg0 t :arg1 (r2 / room~e.12) :degree (a / at-all~e.14)) :snt3~e.21 (t3 / trouble-01~e.19 :polarity~e.11 -~e.11 :arg0 t :arg1 (a2 / anybody~e.16)))

# one_0 morning_1 they_2 would_3 appear_4 in_5 the_6 grass_7 ,_8 and_9 by_10 night_11 they_12 would_13 have_14 faded_15 peacefully_16 away_17 ._18
(a / and~e.9 :op1 (a2 / appear-01~e.4 :arg1 (t / they~e.2) :time~e.5 (d / date-entity :dayperiod~e.17 (m / morning~e.1) :mod (o / one~e.0)) :location~e.5 (g / grass~e.7)) :op2 (f / fade-01~e.15 :arg1 t :manner (p / peaceful~e.16) :time (b / by~e.10 :op1 (n / night~e.11))))

# but_0 one_1 day_2 ,_3 from_4 a_5 seed_6 blown_7 from_8 no_9 one_10 knew_11 where_12 ,_13 a_14 new_15 flower_16 had_17 come_18 up_19 ;_20 and_21 the_22 little_23 prince_24 had_25 watched_26 very_27 closely_28 over_29 this_30 small_31 sprout_32 which_33 was_34 not_35 like_36 any_37 other_38 small_39 sprouts_40 on_41 his_42 planet_43 ._44
(a / and~e.21 :op1 (c / contrast-01~e.0 :arg2 (c2 / come-up-13~e.18 :arg1 (f / flower~e.16 :arg1-of (n / new-01~e.15) :source~e.4 (s / seed~e.6 :arg1-of (b / blow-01~e.7 :source~e.8 (a2 / amr-unknown~e.11)))) :time (d / day~e.2 :mod (o / one~e.10)))) :op2 (w / watch-over-03~e.26 :arg0 (p / prince~e.24 :mod (l / little~e.23)) :arg1 (s2 / sprout~e.32 :mod (s3 / small~e.31) :mod (t / this~e.30) :arg1-of (r / resemble-01~e.36 :polarity~e.35 -~e.35 :arg2 (s4 / sprout~e.40 :mod (s5 / small~e.39) :mod (o2 / other~e.38 :mod (a3 / any~e.37)) :location~e.41 (p2 / planet~e.43 :poss~e.42 p)))) :arg1-of (c3 / close-10~e.28 :degree (v / very~e.27))))

# it_0 might_1 ,_2 you_3 see_4 ,_5 have_6 been_7 a_8 new_9 kind_10 of_11 baobab_12 ._13
(p / possible-01~e.1 :arg1 (b2 / baobab~e.12 :mod (k / kind~e.10 :arg1-of (n / new-01~e.9)) :domain~e.8 (i / it~e.0)))

# the_0 shrub_1 soon_2 stopped_3 growing_4 ,_5 and_6 began_7 to_8 get_9 ready_10 to_11 produce_12 a_13 flower_14 ._15
(a / and~e.6 :op1 (s / stop-01~e.3 :arg0 (s2 / shrub~e.1) :arg1 (g / grow-01~e.4 :arg1 s2) :time (s3 / soon~e.2)) :op2 (b / begin-01~e.7 :arg0 s2 :arg1 (r / ready-01~e.10 :arg0 s2 :arg1 s2 :arg2 (p / produce-01~e.12 :arg0 s2 :arg1 (f / flower~e.14)))))

# the_0 little_1 prince_2 ,_3 who_4 was_5 present_6 at_7 the_8 first_9 appearance_10 of_11 a_12 huge_13 bud_14 ,_15 felt_16 at_17 once_18 that_19 some_20 sort_21 of_22 miraculous_23 apparition_24 must_25 emerge_26 from_27 it_28 ._29
(f / feel-01~e.16 :arg0 (p / prince~e.2 :mod (l / little~e.1) :arg1-of (p2 / present-02~e.6 :arg2 (a / appear-01~e.10 :arg1 (b / bud~e.14 :mod (h / huge~e.13)) :ord~e.9 (o2 / ordinal-entity~e.12 :value 1~e.12)))) :arg1 (o / obligate-01~e.25 :arg2 (e / emerge-01~e.26 :arg0 (t / thing~e.18 :arg1-of~e.19 (a4 / appear-01~e.28 :manner (m / miraculous~e.23)) :mod (s / sort~e.21)) :arg1 b)) :time (a2 / at-once~e.7))

# but_0 the_1 flower_2 was_3 not_4 satisfied_5 to_6 complete_7 the_8 preparations_9 for_10 her_11 beauty_12 in_13 the_14 shelter_15 of_16 her_17 green_18 chamber_19 ._20
(c / contrast-01~e.0 :arg1 (s / satisfy-01~e.5 :polarity~e.4 -~e.4 :arg0 (c2 / complete-01~e.7 :arg0 f :arg1 (p / prepare-02~e.9 :arg0 f :arg1 (b / beautiful-02~e.12 :arg1 f)) :location~e.13 (c3 / chamber~e.19 :arg1-of (g / green-02~e.18) :poss~e.11 f :arg2-of~e.17 (s2 / shelter-01~e.15))) :arg1 (f / flower~e.2)))

# she_0 chose_1 her_2 colours_3 with_4 the_5 greatest_6 care_7 ._8
(c / choose-01~e.1 :arg0 (s / she~e.0) :arg1 (c2 / color~e.3 :poss~e.2 s) :manner~e.4 (c3 / care-04~e.7 :degree (g / great~e.6 :degree (m / most~e.6))))

# she_0 adjusted_1 her_2 petals_3 one_4 by_5 one_6 ._7
(a / adjust-01~e.1 :arg0 (s / she~e.0) :arg1 (p / petal~e.3 :poss~e.2 s) :manner~e.5 (o / one-by-one~e.4))

# she_0 did_1 not_2 wish_3 to_4 go_5 out_6 into_7 the_8 world_9 all_10 rumpled_11 ,_12 like_13 the_14 field_15 poppies_16 ._17
(w / wish-01~e.3 :polarity~e.2 -~e.1 :arg0 (s / she~e.0 :arg1-of (r / rumple-02~e.11 :mod (a / all~e.10)) :arg1-of (r2 / resemble-01~e.13 :arg2 (p / poppy~e.16 :mod (f / field~e.15)))) :arg1 (g / go-out-17~e.5 :arg0 s :destination~e.7 (w2 / world~e.9)))

# it_0 was_1 only_2 in_3 the_4 full_5 radiance_6 of_7 her_8 beauty_9 that_10 she_11 wished_12 to_13 appear_14 ._15
(w / wish-01~e.12 :arg0 (s / she~e.11) :arg1 (a / appear-01~e.14 :arg1 s :manner (r / radiate-01~e.6 :arg0 s :arg1 (b / beautiful-02~e.9 :arg1 s) :degree~e.0 (f2 / full~e.5) :mod (o / only~e.2))))

# oh_0 ,_1 yes_2 !_3
(y / yes~e.2)

# she_0 was_1 a_2 coquettish_3 creature_4 !_5
(r / resemble-01~e.2 :arg1 (s / she~e.0) :arg2 (c / creature~e.4 :mod (c2 / coquet~e.3)))

# and_0 her_1 mysterious_2 adornment_3 lasted_4 for_5 days_6 and_7 days_8 ._9
(a / and~e.0 :op1 (l / last-01~e.4 :arg1 (t / thing~e.3 :arg2-of~e.1 (a2 / adorn-01~e.3 :arg1 (s / she~e.1) :mod (m / mysterious~e.2))) :arg2 (m2 / multiple~e.6 :op1 (t2 / temporal-quantity :quant 1 :unit (d / day~e.8)))))

# then_0 one_1 morning_2 ,_3 exactly_4 at_5 sunrise_6 ,_7 she_8 suddenly_9 showed_10 herself_11 ._12
(s / show-01~e.10 :arg0 (s2 / she~e.8) :arg1 s2 :manner~e.11 (s3 / sudden~e.9) :time~e.5 (d / date-entity :dayperiod~e.5 (m / morning~e.2) :mod (o / one~e.1)) :time~e.5 (s4 / sunrise~e.6 :mod (e / exact~e.4)) :time~e.5 (t / then~e.0))

# and_0 ,_1 after_2 working_3 with_4 all_5 this_6 painstaking_7 precision_8 ,_9 she_10 yawned_11 and_12 said_13 :_14 "_15 ah_16 !_17
(a / and~e.0 :op1 (y / yawn-01~e.11 :arg0 (s2 / she~e.10)) :op2 (s / say-01~e.13 :arg0 s2 :arg1 (a2 / ah~e.16 :mode~e.17 expressive~e.17)) :time (a3 / after~e.2 :op1 (w / work-01~e.3 :arg0 s2 :manner~e.4 (p / precise~e.8 :degree (p2 / painstaking~e.7) :mod (t / this~e.6) :mod (a4 / all~e.5)))))

# i_0 am_1 scarcely_2 awake_3 ._4
(a / awake-03~e.3 :arg1 (i / i~e.0) :degree (s / scarce~e.2))

# i_0 beg_1 that_2 you_3 will_4 excuse_5 me_6 ._7
(b2 / beg-01~e.1 :arg0 (i / i~e.0) :arg1 (y2 / you~e.3) :arg2 (e2 / excuse-01~e.5 :arg0 y2 :arg1 i))

# my_0 petals_1 are_2 still_3 all_4 disarranged_5 ..._6 "_7
(a3 / arrange-01~e.5 :polarity - :arg1 (p2 / petal~e.1 :part-of~e.0 (i / i~e.0) :mod (a4 / all~e.4)) :mod (s4 / still~e.3))

# but_0 the_1 little_2 prince_3 could_4 not_5 restrain_6 his_7 admiration_8 :_9 "_10 oh_11 !_12
(c / contrast-01~e.0 :arg2 (p2 / possible-01~e.4 :polarity~e.5 -~e.5 :arg1 (r / restrain-01~e.6 :arg0 (p / prince~e.3 :mod (l / little~e.2) :arg0-of (s / say-01~e.11 :arg1 (o / oh~e.11 :mode~e.12 "expressive"~e.12))) :arg1 (a / admire-01~e.8 :arg0 p))))

# how_0 beautiful_1 you_2 are_3 !_4 "_5
(b / beautiful-02~e.1 :arg1 (y / you~e.2) :degree (s / so~e.0))

# "_0 am_1 i_2 not_3 ?_4 "_5 the_6 flower_7 responded_8 ,_9 sweetly_10 ._11
(r / respond-01~e.8 :arg0 (f / flower~e.7) :arg1 (b / beautiful-02~e.3 :polarity~e.3 -~e.2 :mode interrogative~e.4 :arg1 f) :manner (s / sweet-03~e.10))

# "_0 and_1 i_2 was_3 born_4 at_5 the_6 same_7 moment_8 as_9 the_10 sun_11 ..._12 "_13
(a / and~e.1 :op2 (b / bear-02~e.4 :arg1 (i / i~e.2) :time~e.5 (m / moment~e.8 :arg1-of (s / same-01~e.7 :arg2 (s2 / sun~e.11)))))

# the_0 little_1 prince_2 could_3 guess_4 easily_5 enough_6 that_7 she_8 was_9 not_10 any_11 too_12 modest_13 -_14 -_15 but_16 how_17 moving_18 -_19 -_20 and_21 exciting_22 -_23 -_24 she_25 was_26 !_27
(p / possible-01~e.3 :arg1 (g / guess-01~e.4 :arg0 (p2 / prince~e.2 :mod (l / little~e.1)) :arg1 (c / contrast-01~e.16 :arg1 (m / modest~e.13 :polarity~e.10 -~e.10 :domain (s / she~e.8) :degree (t / too~e.12)) :arg2 (a2 / and~e.21 :op1 (m2 / move-05~e.18 :arg0 s :degree (s2 / so~e.17)) :op2 (e3 / excite-01~e.22 :arg0 s :degree (s3 / so~e.27)))) :arg1-of~e.7 (e / easy-05~e.5 :mod (e2 / enough~e.6))))

# "_0 i_1 think_2 it_3 is_4 time_5 for_6 breakfast_7 ,_8 "_9 she_10 added_11 an_12 instant_13 later_14 ._15
(a / add-01~e.11 :arg0 (s / she~e.10) :arg1 (t / think-01~e.2 :arg0 s :arg1 (t2 / time~e.5 :purpose~e.6 (b / breakfast-01~e.7))) :time (l / late~e.14 :degree (m / more~e.14 :quant (i / instant~e.13))))

# "_0 if_1 you_2 would_3 have_4 the_5 kindness_6 to_7 think_8 of_9 my_10 needs_11 -_12 -_13 "_14
(t / think-01~e.8 :mode~e.1 imperative~e.7 :arg0 (y / you~e.2) :arg1 (t2 / thing~e.8 :arg1-of~e.11 (n / need-01~e.11 :arg0 (i / i~e.10))) :arg1-of (k2 / kind-01~e.6 :arg0 y :arg2 i))

# and_0 the_1 little_2 prince_3 ,_4 completely_5 abashed_6 ,_7 went_8 to_9 look_10 for_11 a_12 sprinkling_13 -_14 can_15 of_16 fresh_17 water_18 ._19
(a / and~e.0 :op1 (g / go-05~e.8 :arg0 (p / prince~e.3 :mod (l2 / little~e.2) :arg1-of (a2 / abash-01~e.6 :arg1-of (c3 / complete-02~e.5))) :arg1 (l / look-01~e.10 :arg0 p :arg1 (c / can~e.15 :arg0-of~e.16 (s / sprinkle-01~e.13) :arg0-of~e.16 (c2 / contain-01 :arg1 (w / water~e.18 :arg1-of (f / fresh-04~e.17)))))))

# so_0 ,_1 he_2 tended_3 the_4 flower_5 ._6
(t / tend-01~e.3 :arg0 (h / he~e.2) :arg1 (f / flower~e.5) :arg1-of (c / cause-01~e.0))

# so_0 ,_1 too_2 ,_3 she_4 began_5 very_6 quickly_7 to_8 torment_9 him_10 with_11 her_12 vanity_13 -_14 -_15 which_16 was_17 ,_18 if_19 the_20 truth_21 be_22 known_23 ,_24 a_25 little_26 difficult_27 to_28 deal_29 with_30 ._31
(b / begin-01~e.5 :arg0 (s / she~e.4) :arg1 (t2 / torment-01~e.9 :arg0 s :arg1 (h / he~e.10) :arg2 (v2 / vanity~e.13 :poss~e.12 s :arg2-of~e.8 (d3 / deal-01~e.29 :arg0 h :mod (d / difficult~e.27 :degree (l / little~e.26)) :condition~e.19 (k / know-01~e.23 :arg1 (t3 / truth~e.21))))) :mod (t / too~e.2) :arg1-of (q / quick-02~e.7 :degree (v / very~e.6)))

# one_0 day_1 ,_2 for_3 instance_4 ,_5 when_6 she_7 was_8 speaking_9 of_10 her_11 four_12 thorns_13 ,_14 she_15 said_16 to_17 the_18 little_19 prince_20 :_21 "_22 let_23 the_24 tigers_25 come_26 with_27 their_28 claws_29 !_30 "_31
(s / say-01~e.16 :arg0 (s2 / she~e.15) :arg1 (c / come-01~e.26 :mode~e.30 imperative~e.23 :arg1 (t / tiger~e.25) :accompanier~e.27 (c2 / claw~e.29 :part-of~e.28 t)) :arg2 (p / prince~e.20 :mod (l / little~e.19)) :time~e.6 (d / day~e.1 :mod (o / one~e.0)) :arg0-of (e / exemplify-01~e.4) :time~e.6 (s3 / speak-01~e.9 :arg0 s2 :arg1 (t2 / thorn~e.13 :quant 4~e.12 :part-of~e.11 s2)))

# "_0 there_1 are_2 no_3 tigers_4 on_5 my_6 planet_7 ,_8 "_9 the_10 little_11 prince_12 objected_13 ._14
(o / object-01~e.13 :arg0 (p / prince~e.12 :mod (l / little~e.11)) :arg1 (t / tiger~e.4 :polarity~e.3 -~e.3 :location~e.5 (p2 / planet~e.7 :poss~e.6 p)))

# "_0 and_1 ,_2 anyway_3 ,_4 tigers_5 do_6 not_7 eat_8 weeds_9 ._10 "_11
(a / and~e.1 :op2 (e / eat-01~e.8 :polarity~e.7 -~e.6 :arg0 (t / tiger~e.5) :arg1 (w / weed~e.9) :mod (a2 / anyway~e.3)))

# "_0 i_1 am_2 not_3 a_4 weed_5 ,_6 "_7 the_8 flower_9 replied_10 ,_11 sweetly_12 ._13
(r / reply-01~e.10 :arg0 (f / flower~e.9) :arg2 (w / weed~e.5 :polarity~e.3 -~e.3 :domain~e.4 f) :manner (s / sweet-03~e.12))

# "_0 please_1 excuse_2 me_3 ..._4 "_5
(e / excuse-01~e.2 :mode imperative~e.3 :polite~e.1 +~e.1 :arg0 (y / you~e.3) :arg1 (i / i~e.3))

# "_0 i_1 am_2 not_3 at_4 all_5 afraid_6 of_7 tigers_8 ,_9 "_10 she_11 went_12 on_13 ,_14 "_15 but_16 i_17 have_18 a_19 horror_20 of_21 drafts_22 ._23
(g / go-on-25~e.12 :arg0 (s / she~e.11) :arg1 (c / contrast-01~e.16 :arg1 (f / fear-01~e.6 :polarity~e.3 -~e.3 :arg0 s :arg1 (t / tiger~e.8) :degree (a / at-all~e.5)) :arg2 (a2 / abhor-01~e.20 :arg0 s :arg1 (d / draft~e.22))))

# i_0 suppose_1 you_2 would_3 n't_4 have_5 a_6 screen_7 for_8 me_9 ?_10 "_11
(s / suppose-01~e.1 :arg0 (i / i~e.0) :arg1 (h / have-03~e.5 :polarity~e.4 - :mode~e.9 interrogative~e.10 :arg0 (y / you~e.2) :arg1 (s2 / screen~e.7) :beneficiary~e.8 i))

# "_0 a_1 horror_2 of_3 drafts_4 -_5 -_6 that_7 is_8 bad_9 luck_10 ,_11 for_12 a_13 plant_14 ,_15 "_16 remarked_17 the_18 little_19 prince_20 ,_21 and_22 added_23 to_24 himself_25 ,_26 "_27 this_28 flower_29 is_30 a_31 very_32 complex_33 creature_34 ..._35 "_36
(a / and~e.22 :op1 (r / remark-01~e.17 :arg0 (p / prince~e.20 :mod (l / little~e.19)) :arg1 (l2 / luck~e.10 :arg1-of (b / bad-07~e.9) :beneficiary~e.12 (p2 / plant~e.14) :domain~e.13 (a3 / abhor-01~e.2 :arg1 (d / draft~e.4)))) :op2 (a2 / add-01~e.23 :arg0 p :arg1 (c3 / creature~e.34 :mod (c2 / complex~e.33 :degree (v / very~e.32)) :domain~e.31 (f / flower~e.29 :mod (t / this~e.28))) :beneficiary~e.12 p))

# "_0 at_1 night_2 i_3 want_4 you_5 to_6 put_7 me_8 under_9 a_10 glass_11 globe_12 ._13
(w / want-01~e.4 :arg0 (i / i~e.3) :arg1 (p / put-01~e.7 :arg0 (y / you~e.5) :arg1 i :arg2 (u / under~e.9 :op1 (g / globe~e.12 :consist-of (g2 / glass~e.11))) :time (d / date-entity :dayperiod~e.1 (n / night~e.2))))

# it_0 is_1 very_2 cold_3 where_4 you_5 live_6 ._7
(c / cold-01~e.3 :degree~e.0 (v / very~e.2) :location~e.4 (l / live-01~e.6 :arg0 (y / you~e.5)))

# in_0 the_1 place_2 i_3 came_4 from_5 -_6 -_7 "_8
(l / location~e.2 :arg3-of~e.5 (c / come-01~e.4 :arg1 (i / i~e.3)))

# but_0 she_1 interrupted_2 herself_3 at_4 that_5 point_6 ._7
(c / contrast-01~e.0 :arg2 (i / interrupt-01~e.2 :arg0 (s / she~e.1) :arg1 s :time~e.4 (p / point~e.6 :mod (t / that~e.5))))

# she_0 had_1 come_2 in_3 the_4 form_5 of_6 a_7 seed_8 ._9
(c / come-01~e.2 :arg1 (s / she~e.0) :time-of~e.5 (s2 / seed~e.8 :domain~e.7 s))

# she_0 could_1 not_2 have_3 known_4 anything_5 of_6 any_7 other_8 worlds_9 ._10
(p / possible-01~e.1 :polarity~e.2 -~e.2 :arg1 (k / know-01~e.4 :arg0 (s / she~e.0) :arg1 (a / anything~e.5 :topic~e.6 (w / world~e.9 :mod (o / other~e.8 :mod (a2 / any~e.7))))))

# embarassed_0 over_1 having_2 let_3 herself_4 be_5 caught_6 on_7 the_8 verge_9 of_10 such_11 a_12 na√Øve_13 untruth_14 ,_15 she_16 coughed_17 two_18 or_19 three_20 times_21 ,_22 in_23 order_24 to_25 put_26 the_27 little_28 prince_29 in_30 the_31 wrong_32 ._33
(c / cough-01~e.17 :arg0 (s / she~e.16 :arg1-of (e / embarrass-01~e.0 :arg0 (l2 / let-01~e.3 :arg0 s :arg1 (c2 / catch-03~e.4 :arg1 s :arg2 (v / verge-01~e.9 :arg1 (t / truth~e.2 :polarity - :mod (n / naive~e.6 :degree (s2 / such~e.11)))))))) :purpose~e.25 (p / put-03~e.26 :arg0 s :arg1 (p2 / prince~e.29 :mod (l / little~e.28)) :arg2 (w / wrong-04~e.32 :arg1 p2)) :frequency~e.14 (o / or~e.19 :op1 2~e.18 :op2 3~e.20))

# "_0 the_1 screen_2 ?_3 "_4
(s / screen~e.2 :mode interrogative~e.3)

# "_0 i_1 was_2 just_3 going_4 to_5 look_6 for_7 it_8 when_9 you_10 spoke_11 to_12 me_13 ..._14 "_15
(l3 / look-01~e.6 :arg0 (i / i~e.1) :arg1 (i2 / it~e.8) :time~e.9 (s3 / speak-01~e.11 :arg0 (y2 / you~e.10) :arg2 i))

# then_0 she_1 forced_2 her_3 cough_4 a_5 little_6 more_7 so_8 that_9 he_10 should_11 suffer_12 from_13 remorse_14 just_15 the_16 same_17 ._18
(f / force-02~e.2 :arg0 (s / she~e.1) :arg1 (c / cough-01~e.4 :arg0 s) :time (t / then~e.0) :degree~e.11 (m / more~e.7 :degree (l / little~e.6)) :purpose~e.8 (s2 / suffer-01~e.12 :arg0 (h / he~e.10) :arg1 (r / remorse~e.14) :arg1-of~e.17 (h2 / have-concession-91~e.15)))

# so_0 the_1 little_2 prince_3 ,_4 in_5 spite_6 of_7 all_8 the_9 good_10 will_11 that_12 was_13 inseparable_14 from_15 his_16 love_17 ,_18 had_19 soon_20 come_21 to_22 doubt_23 her_24 ._25
(c / come-04~e.21 :arg1 (p / prince~e.3 :mod (l / little~e.2)) :arg2 (d / doubt-01~e.23 :arg0 p :arg1 (s3 / she~e.24)) :time~e.5 (s / soon~e.20) :arg1-of (c2 / cause-01~e.12) :concession~e.14 (w / will~e.11 :arg1-of (g / good-02~e.10) :mod (a / all~e.8) :arg1-of (s2 / separate-01~e.15 :arg2 (l2 / love-01~e.17 :arg0 p) :arg1-of~e.19 (p2 / possible-01~e.22 :polarity -))))

# he_0 had_1 taken_2 seriously_3 words_4 which_5 were_6 without_7 importance_8 ,_9 and_10 it_11 made_12 him_13 very_14 unhappy_15 ._16
(s / serious-01~e.3 :arg1 (h / he~e.0) :arg2 (w / word-01~e.4 :mod (i / important~e.8 :polarity -)) :arg0-of~e.7 (m / make-02~e.12 :arg1 (h2 / happy-01~e.15 :polarity -~e.13 :arg1 h :degree (v / very~e.14))))

# "_0 i_1 ought_2 not_3 to_4 have_5 listened_6 to_7 her_8 ,_9 "_10 he_11 confided_12 to_13 me_14 one_15 day_16 ._17 "_18
(c / confide-01~e.12 :arg0 (h / he~e.11) :arg1 (r / recommend-01~e.2 :arg1 (l / listen-01~e.6 :arg0 h :arg1 (s / she~e.8) :polarity~e.3 -~e.3) :arg2 h) :arg2 (i / i~e.14) :time (d / day~e.16 :mod (o / one~e.15)))

# one_0 never_1 ought_2 to_3 listen_4 to_5 the_6 flowers_7 ._8
(r / recommend-01~e.2 :arg1 (l / listen-01~e.4 :polarity~e.1 -~e.1 :arg0 (o2 / one~e.0) :arg1 (f / flower~e.7) :time (e / ever~e.1)))

# one_0 should_1 simply_2 look_3 at_4 them_5 and_6 breathe_7 their_8 fragrance_9 ._10
(r / recommend-01~e.1 :arg1 (a / and~e.6 :op1 (l / look-01~e.3 :arg0 (o2 / one~e.0) :arg1 (t / they~e.5) :manner (s / simple~e.2)) :op2 (b / breathe-01~e.7 :arg0 o2 :arg1 (f / fragrance~e.9 :poss~e.8 t))))

# mine_0 perfumed_1 all_2 my_3 planet_4 ._5
(p / perfume-01~e.1 :arg0 (t / thing~e.0 :poss~e.3 (i / i~e.3)) :arg1 (p2 / planet~e.4 :mod (a / all~e.2) :poss i))

# but_0 i_1 did_2 not_3 know_4 how_5 to_6 take_7 pleasure_8 in_9 all_10 her_11 grace_12 ._13
(c / contrast-01~e.0 :arg2 (k / know-01~e.4 :polarity~e.3 -~e.2 :arg0 (i / i~e.1) :manner~e.5 (p2 / please-01~e.8 :arg0 (g / grace~e.12 :poss (s / she~e.11) :mod (a / all~e.10)) :arg1 i)))

# this_0 tale_1 of_2 claws_3 ,_4 which_5 disturbed_6 me_7 so_8 much_9 ,_10 should_11 only_12 have_13 filled_14 my_15 heart_16 with_17 tenderness_18 and_19 pity_20 ._21 "_22
(r2 / recommend-01~e.11 :arg1 (f / fill-01~e.14 :arg0 (t2 / tale~e.1 :topic~e.2 (c / claws~e.3) :arg0-of~e.17 (d / disturb-01~e.6 :arg1 (i / i~e.7) :degree (m / much~e.9 :degree (s / so~e.8))) :mod (t3 / this~e.0)) :arg1 (h / heart~e.16 :part-of~e.15 i) :arg2 (a / and~e.19 :op1 (t / tender~e.18) :op2 (p / pity-01~e.20)) :mod (o / only~e.12)))

# and_0 he_1 continued_2 his_3 confidences_4 :_5 "_6 the_7 fact_8 is_9 that_10 i_11 did_12 not_13 know_14 how_15 to_16 understand_17 anything_18 !_19
(a / and~e.0 :op1 (c / continue-02~e.2 :arg0 (h / he~e.1) :arg1 (c2 / confide-01~e.4 :arg0 h :arg1 (k / know-01~e.14 :polarity~e.13 -~e.12 :arg0 h :arg1 (t / thing~e.16 :manner-of~e.8 (u / understand-01~e.17 :arg0 h :arg1 (a2 / anything~e.18)))))))

# i_0 ought_1 to_2 have_3 judged_4 by_5 deeds_6 and_7 not_8 by_9 words_10 ._11
(r2 / recommend-01~e.1 :arg1 (a2 / and~e.7 :op1 (j / judge-01~e.4 :arg0 (i / i~e.0) :arg3~e.2 (d / do-02~e.3)) :op2 (j2 / judge-01~e.4 :polarity~e.8 -~e.8 :arg0 i :arg3~e.6 (w / word~e.10))))

# she_0 cast_1 her_2 fragrance_3 and_4 her_5 radiance_6 over_7 me_8 ._9
(c / cast-01~e.1 :arg0 (s / she~e.0) :arg1 (a / and~e.4 :op1 (f / fragrance~e.3 :poss~e.5 s) :op2 (t / thing~e.7 :arg1-of~e.6 (r / radiate-01~e.6 :arg0 s))) :arg2 (i / i~e.8))

# i_0 ought_1 never_2 to_3 have_4 run_5 away_6 from_7 her_8 ..._9
(r / recommend-01~e.1 :arg1 (r2 / run-02~e.5 :polarity~e.2 -~e.2 :arg0 (i / i~e.0) :time (e / ever~e.2) :direction~e.7 (a2 / away~e.6 :op1 (s / she~e.8))))

# i_0 ought_1 to_2 have_3 guessed_4 all_5 the_6 affection_7 that_8 lay_9 behind_10 her_11 poor_12 little_13 strategems_14 ._15
(r / recommend-01~e.1 :arg1 (g / guess-01~e.4 :arg0 (i / i~e.0) :arg1 (a / affection~e.7 :mod (a2 / all~e.5) :arg1-of~e.8 (l / lie-07~e.9 :arg2 (b / behind~e.10 :op1 (s / strategem~e.14 :mod (l2 / little~e.13) :mod (p / poor~e.12) :poss (s2 / she~e.11)))))))

# flowers_0 are_1 so_2 inconsistent_3 !_4
(c / consistent-01~e.3 :polarity -~e.4 :arg1 (f / flower~e.0) :degree (s / so~e.2))

# but_0 i_1 was_2 too_3 young_4 to_5 know_6 how_7 to_8 love_9 her_10 ..._11 "_12
(c / contrast-01~e.0 :arg2 (y / young~e.4 :degree (t / too~e.3) :domain (i / i~e.1) :compared-to~e.5 (k / know-01~e.6 :arg0 i :arg1 (m / manner~e.7 :manner-of~e.7 (l / love-01~e.9 :arg0 i :arg1 (s / she~e.10))))))

# chapter_0 9_1 ._2
(c / chapter~e.0 :mod 9~e.1)

# i_0 believe_1 that_2 for_3 his_4 escape_5 he_6 took_7 advantage_8 of_9 the_10 migration_11 of_12 a_13 flock_14 of_15 wild_16 birds_17 ._18
(b / believe-01~e.1 :arg0 (i / i~e.0) :arg1 (t / take-01~e.7 :arg0 (h / he~e.6) :arg1 (a / advantage~e.8) :arg2 (m / migrate-01~e.11 :arg0 (f / flock-02~e.14 :arg0 (b2 / bird~e.17 :mod (w / wild~e.16)))) :purpose~e.3 (e / escape-01~e.5 :arg0 h)))

# on_0 the_1 morning_2 of_3 his_4 departure_5 he_6 put_7 his_8 planet_9 in_10 perfect_11 order_12 ._13
(o / order-03~e.12 :arg0 (h / he~e.6) :arg1 (p2 / planet~e.9 :poss~e.8 h) :arg1-of (p / perfect-02~e.11) :time~e.10 (d2 / date-entity :dayperiod~e.0 (m / morning~e.2) :time-of~e.4 (d / depart-01~e.5 :arg0 h)))

# he_0 carefully_1 cleaned_2 out_3 his_4 active_5 volcanoes_6 ._7
(c / clean-out-03~e.2 :arg0 (h / he~e.0) :arg1 (v / volcano~e.6 :poss~e.4 h :arg0-of (a / activity-06~e.5)) :manner (c2 / careful~e.1))

# he_0 possessed_1 two_2 active_3 volcanoes_4 ;_5 and_6 they_7 were_8 very_9 convenient_10 for_11 heating_12 his_13 breakfast_14 in_15 the_16 morning_17 ._18
(a / and~e.6 :op1 (p / possess-01~e.1 :arg0 (h / he~e.0) :arg1 (v / volcano~e.4 :quant 2~e.2 :arg0-of (a2 / activity-06~e.3))) :op2 (c / convenient~e.10 :degree (v2 / very~e.9) :purpose~e.11 (h2 / heat-01~e.12 :arg1 (f / food~e.13 :arg1-of (b2 / breakfast-01~e.14 :arg0 h)) :arg2 v :time~e.15 (d / date-entity :dayperiod (m / morning~e.17))) :domain v))

# he_0 also_1 had_2 one_3 volcano_4 that_5 was_6 extinct_7 ._8
(h / have-03~e.2 :arg0 (h2 / he~e.0) :arg1 (v / volcano~e.4 :mod (e / extinct~e.7) :quant 1~e.3) :mod (a / also~e.1))

# but_0 ,_1 as_2 he_3 said_4 ,_5 "_6 one_7 never_8 knows_9 !_10 "_11
(c / contrast-01~e.0 :arg2 (s / say-01~e.4 :arg0 (h / he~e.3) :arg1 (k / know-01~e.9 :polarity~e.8 -~e.8 :arg0 (o / one~e.7))))

# so_0 he_1 cleaned_2 out_3 the_4 extinct_5 volcano_6 ,_7 too_8 ._9
(c / clean-out-03~e.2 :arg0 (h / he~e.1) :arg1 (v / volcano~e.6 :mod (e / extinct~e.5)) :mod (t / too~e.8))

# if_0 they_1 are_2 well_3 cleaned_4 out_5 ,_6 volcanoes_7 burn_8 slowly_9 and_10 steadily_11 ,_12 without_13 any_14 eruptions_15 ._16
(b / burn-01~e.8 :arg1 (v / volcano~e.7 :arg1-of (e2 / erupt-01~e.15 :polarity~e.14 -)) :condition~e.0 (c / clean-out-03~e.4 :arg1 v :degree (w / well~e.3)) :manner~e.13 (s3 / steady~e.11) :arg1-of (s / slow-05~e.9))

# volcanic_0 eruptions_1 are_2 like_3 fires_4 in_5 a_6 chimney_7 ._8
(e / erupt-01~e.1 :arg1 (v / volcano~e.0) :arg1-of (r / resemble-01~e.3 :arg2 (f / fire~e.4 :location~e.5 (c / chimney~e.7))))

# on_0 our_1 earth_2 we_3 are_4 obviously_5 much_6 too_7 small_8 to_9 clean_10 out_11 our_12 volcanoes_13 ._14
(s / small~e.8 :degree (t2 / too~e.7 :degree (m / much~e.6)) :compared-to~e.11 (c / clean-out-03~e.10 :arg0 w :arg1 (v / volcano~e.13 :poss~e.12 w)) :domain (w / we~e.3) :location~e.0 (e / earth~e.2 :poss~e.1 w) :arg1-of (o / obvious-01~e.5))

# that_0 is_1 why_2 they_3 bring_4 no_5 end_6 of_7 trouble_8 upon_9 us_10 ._11
(c / cause-01~e.2 :arg0 (t3 / that~e.0) :arg1 (t2 / trouble-01~e.8 :arg0 (t4 / they~e.3) :arg1 (w / we~e.10) :quant (e / end~e.6 :polarity~e.5 -~e.5)))

# the_0 little_1 prince_2 also_3 pulled_4 up_5 ,_6 with_7 a_8 certain_9 sense_10 of_11 dejection_12 ,_13 the_14 last_15 little_16 shoots_17 of_18 the_19 baobabs_20 ._21
(p / pull-01~e.4 :arg0 (p2 / prince~e.2 :mod (l / little~e.1) :arg0-of (s2 / sense-01~e.10 :arg1 (d2 / deject-01~e.12) :mod (c / certain~e.9))) :arg1 (s / shoot~e.17 :part-of~e.18 (b / baobab~e.20) :mod (l2 / little~e.16) :ord~e.7 (o / ordinal-entity~e.8 :value "-1"~e.15)) :mod (a / also~e.3) :direction (u / up~e.5))

# he_0 believed_1 that_2 he_3 would_4 never_5 want_6 to_7 return_8 ._9
(b / believe-01~e.1 :arg0 (h / he~e.0) :arg1 (w / want-01~e.6 :polarity~e.5 -~e.5 :arg0 h :arg1 (r / return-01~e.8 :arg1 h) :time (e / ever~e.5)))

# but_0 on_1 this_2 last_3 morning_4 all_5 these_6 familiar_7 tasks_8 seemed_9 very_10 precious_11 to_12 him_13 ._14
(c / contrast-01~e.0 :arg2 (s / seem-01~e.9 :arg1 (p / precious~e.11 :degree (v / very~e.10) :domain (t2 / task~e.8 :mod (a2 / all~e.5) :mod (f / familiar~e.7))) :arg2 (h / he~e.13) :time (d / date-entity :dayperiod~e.1 (m / morning~e.4) :mod (t / this~e.2) :ord~e.6 (o / ordinal-entity :value "-1"~e.3))))

# and_0 when_1 he_2 watered_3 the_4 flower_5 for_6 the_7 last_8 time_9 ,_10 and_11 prepared_12 to_13 place_14 her_15 under_16 the_17 shelter_18 of_19 her_20 glass_21 globe_22 ,_23 he_24 realised_25 that_26 he_27 was_28 very_29 close_30 to_31 tears_32 ._33
(r / realize-01~e.25 :arg0 (h / he~e.24) :arg1 (c / close-10~e.30 :arg1 h :arg2 (t / tear-03~e.32 :arg1 h) :degree (v / very~e.29)) :time (a / and~e.0 :op1 (w / water-01~e.3 :arg0 h :arg1 (f / flower-01~e.5) :ord~e.1 (o / ordinal-entity~e.9 :value "-1"~e.8)) :op2 (p / prepare-02~e.12 :arg0 h :arg1 h :arg2 (p2 / place-01~e.14 :arg0 h :arg1 f :arg2 (u2 / under~e.16 :op1 (g / globe~e.22 :consist-of~e.19 (g2 / glass~e.21) :poss~e.15 f :arg2-of~e.20 (s2 / shelter-01~e.18 :arg0 h :arg1 f)))))))

# "_0 goodbye_1 ,_2 "_3 he_4 said_5 to_6 the_7 flower_8 ._9
(s / say-01~e.5 :arg0 (h / he~e.4) :arg1 (g / goodbye~e.1) :arg2 (f / flower~e.8))

# but_0 she_1 made_2 no_3 answer_4 ._5
(c / contrast-01~e.0 :arg2 (a2 / answer-01~e.4 :polarity~e.3 -~e.2 :arg0 (s / she~e.1)))

# "_0 goodbye_1 ,_2 "_3 he_4 said_5 again_6 ._7
(s / say-01~e.5 :arg0 (h / he~e.4) :arg1 (g / goodbye~e.1) :mod (a / again~e.6))

# the_0 flower_1 coughed_2 ._3
(c / cough-01~e.2 :arg0 (f / flower~e.1))

# but_0 it_1 was_2 not_3 because_4 she_5 had_6 a_7 cold_8 ._9
(c2 / contrast-01~e.0 :arg2 (c3 / cause-01~e.4 :polarity~e.3 -~e.3 :arg0 (h / have-03~e.6 :arg0 (s / she~e.5) :arg1 (c / cold~e.8)) :arg1 (i / it~e.1)))

# "_0 i_1 have_2 been_3 silly_4 ,_5 "_6 she_7 said_8 to_9 him_10 ,_11 at_12 last_13 ._14
(s / say-01~e.8 :arg0 (s2 / she~e.7) :arg1 (s4 / silly~e.4 :domain s2) :arg2 (h / he~e.10) :time~e.12 (a / at-last~e.13))

# "_0 i_1 ask_2 your_3 forgiveness_4 ._5
(a / ask-02~e.2 :arg0 (i / i~e.1) :arg1 (f / forgive-01~e.4 :arg0 y :arg1 i) :arg2 (y / you~e.3))

# try_0 to_1 be_2 happy_3 ..._4 "_5
(t / try-01~e.0 :mode imperative~e.1 :arg0 (y / you) :arg1 (h / happy-01~e.3 :arg1 y))

# he_0 was_1 surprised_2 by_3 this_4 absence_5 of_6 reproaches_7 ._8
(s / surprise-01~e.2 :arg0 (a / absent-01~e.5 :arg1 (r / reproach-01~e.7)) :arg1 (h / he~e.0))

# he_0 stood_1 there_2 all_3 bewildered_4 ,_5 the_6 glass_7 globe_8 held_9 arrested_10 in_11 mid_12 -_13 air_14 ._15
(s / stand-01~e.1 :arg1 (h / he~e.0 :arg1-of (b / bewilder-01~e.4 :degree (a / all~e.3)) :arg0-of (h2 / hold-01~e.14 :arg1 (g / globe~e.8 :consist-of~e.9 (g2 / glass~e.7) :arg1-of (a2 / arrest-02~e.10 :location~e.11 (m / midair~e.12))))) :arg2 (t / there~e.2))

# he_0 did_1 not_2 understand_3 this_4 quiet_5 sweetness_6 ._7
(u / understand-01~e.3 :polarity~e.2 -~e.1 :arg0 (h / he~e.0) :arg1 (s / sweet-05~e.6 :arg1 (t / this~e.4) :arg1-of (q / quiet-04~e.5)))

# "_0 of_1 course_2 i_3 love_4 you_5 ,_6 "_7 the_8 flower_9 said_10 to_11 him_12 ._13
(s / say-01~e.10 :arg0 (f / flower-01~e.9) :arg1 (l / love-01~e.4 :arg0 f :arg1 h :mod (o / of-course~e.2)) :arg2 (h / he~e.12))

# "_0 it_1 is_2 my_3 fault_4 that_5 you_6 have_7 not_8 known_9 it_10 all_11 the_12 while_13 ._14
(f / fault-01~e.4 :arg1 (i3 / i~e.3) :arg2 (k / know-01~e.9 :polarity~e.8 -~e.8 :arg0 (y / you~e.6) :arg1 (i2 / it~e.10) :time (w / while-away-01~e.13 :duration~e.7 (a / all~e.11))))

# that_0 is_1 of_2 no_3 importance_4 ._5
(i / important~e.4 :polarity~e.3 -~e.3 :domain (t / that~e.0))

# but_0 you_1 -_2 -_3 you_4 have_5 been_6 just_7 as_8 foolish_9 as_10 i_11 ._12
(c / contrast-01~e.0 :arg2 (f / foolish~e.9 :domain~e.7 (y / you~e.4) :degree (e / equal~e.8) :compared-to~e.10 (i / i~e.11)))

# try_0 to_1 be_2 happy_3 ..._4 let_5 the_6 glass_7 globe_8 be_9 ._10
(a / and~e.1 :op1 (t / try-01~e.0 :mode imperative~e.5 :arg0 (y / you) :arg1 (h / happy-01~e.3 :arg1 y)) :op2 (l / leave-14~e.3 :mode imperative~e.1 :arg0 y :arg1 (a2 / alone~e.3 :domain (g / globe~e.8 :consist-of (g2 / glass~e.7)))))

# i_0 do_1 n't_2 want_3 it_4 any_5 more_6 ._7 "_8
(w / want-01~e.3 :arg0 (i / i~e.0) :arg1 (i2 / it~e.4) :polarity~e.2 -~e.1 :time (a / anymore~e.6))

# "_0 but_1 the_2 wind_3 -_4 -_5 "_6
(c / contrast-01~e.1 :arg2 (w / wind~e.3))

# "_0 my_1 cold_2 is_3 not_4 so_5 bad_6 as_7 all_8 that_9 ..._10 the_11 cool_12 night_13 air_14 will_15 do_16 me_17 good_18 ._19
(a / and :op1 (b / bad-05~e.6 :polarity~e.4 -~e.4 :arg1 (c3 / cold~e.2 :poss~e.1 (i / i~e.1)) :compared-to~e.7 (t / that~e.9 :mod (a2 / all~e.8))) :op2 (g / good-04~e.18 :arg1 (a3 / air~e.14 :arg1-of (c / cool-06~e.12) :mod (n / night~e.13)) :arg2 i))

# i_0 am_1 a_2 flower_3 ._4 "_5
(f / flower~e.3 :domain~e.2 (i / i~e.0))

# "_0 but_1 the_2 animals_3 -_4 -_5 "_6
(c / contrast-01~e.1 :arg2 (a / animal~e.3))

# "_0 well_1 ,_2 i_3 must_4 endure_5 the_6 presence_7 of_8 two_9 or_10 three_11 caterpillars_12 if_13 i_14 wish_15 to_16 become_17 acquainted_18 with_19 the_20 butterflies_21 ._22
(h / have-concession-91~e.1 :arg2 (o / obligate-01~e.4 :arg1 i :arg2 (e / endure-01~e.5 :arg1 (i / i~e.3) :arg2 (p / present-02~e.7 :arg1 (c / caterpillar~e.12 :quant (o2 / or~e.10 :op1 2~e.9 :op2 3~e.11))) :condition~e.13 (w / wish-01~e.15 :arg0 i :arg1 (a / acquaint-01~e.18 :arg1 i :arg2 (b2 / butterfly~e.21))))))

# it_0 seems_1 that_2 they_3 are_4 very_5 beautiful_6 ._7
(s / seem-01~e.1 :arg1 (b / beautiful-02~e.6 :arg1 (t2 / they~e.3) :degree (v2 / very~e.5)))

# and_0 if_1 not_2 the_3 butterflies_4 -_5 -_6 and_7 the_8 caterpillars_9 -_10 -_11 who_12 will_13 call_14 upon_15 me_16 ?_17
(c / call-on-05~e.15 :arg0 (a / amr-unknown~e.17) :arg1 (i / i~e.16) :condition~e.1 (c3 / call-on-05~e.14 :polarity~e.2 -~e.2 :arg0 (a2 / and~e.7 :op1 (b / butterfly~e.4) :op2 (c2 / caterpillar~e.9)) :arg1 i))

# you_0 will_1 be_2 far_3 away_4 ..._5 as_6 for_7 the_8 large_9 animals_10 -_11 -_12 i_13 am_14 not_15 at_16 all_17 afraid_18 of_19 any_20 of_21 them_22 ._23
(a / and :op1 (a2 / away~e.4 :extent~e.7 (f / far~e.3) :location-of~e.22 (y / you~e.0)) :op2 (f2 / fear-01~e.18 :polarity~e.15 -~e.15 :arg0 (i / i~e.13) :arg1 (a3 / animal~e.10 :mod (l / large~e.9) :quant (a4 / any~e.20)) :degree (a5 / at-all~e.17)))

# i_0 have_1 my_2 claws_3 ._4 "_5
(h / have-03~e.1 :arg0 (i / i~e.0) :arg1 (c / claw~e.3 :part-of~e.2 i))

# and_0 ,_1 na√Øvely_2 ,_3 she_4 showed_5 her_6 four_7 thorns_8 ._9
(s / show-01~e.5 :arg0 (s2 / she~e.4) :arg1 (t / thorn~e.8 :quant 4~e.7 :part-of~e.6 s2) :manner (n / naive~e.2))

# then_0 she_1 added_2 :_3 "_4 do_5 n't_6 linger_7 like_8 this_9 ._10
(a / add-01~e.2 :arg0 (s / she~e.1) :arg1 (l / linger-01~e.7 :polarity~e.6 -~e.5 :mode imperative :arg1 (y / you) :compared-to~e.8 (t3 / this~e.9)) :time (t / then~e.0))

# you_0 have_1 decided_2 to_3 go_4 away_5 ._6
(d / decide-01~e.2 :arg0 (y / you~e.0) :arg1 (g / go-02~e.4 :arg0 y :direction (a / away~e.5)))

# now_0 go_1 !_2 "_3
(g / go-02~e.1 :mode~e.2 imperative~e.2 :arg0 (y / you~e.1) :time (n / now~e.0))

# for_0 she_1 did_2 not_3 want_4 him_5 to_6 see_7 her_8 crying_9 ._10
(w / want-01~e.4 :polarity~e.3 -~e.2 :arg0 (s / she~e.1) :arg1 (s2 / see-01~e.7 :arg0 (h / he~e.5) :arg1 (c / cry-02~e.9 :arg0 s)))

# she_0 was_1 such_2 a_3 proud_4 flower_5 ..._6
(p / pride-01~e.4 :arg0 (f2 / flower~e.5 :domain (s / she~e.0)) :degree (s2 / such~e.2))

# chapter_0 10_1 ._2
(c / chapter~e.0 :mod 10~e.1)

# he_0 found_1 himself_2 in_3 the_4 neighborhood_5 of_6 the_7 asteroids_8 325_9 ,_10 326_11 ,_12 327_13 ,_14 328_15 ,_16 329_17 ,_18 and_19 330_20 ._21
(f / find-out-03~e.1 :arg0 (h / he~e.0) :arg1 (b / be-located-at-91~e.2 :arg1 h :arg2 (n / neighborhood~e.5 :location-of~e.6 (a3 / and~e.19 :op1 (a4 / asteroid :wiki~e.8 - :name (n2 / name :op1 325~e.9)) :op2 (a5 / asteroid :wiki~e.8 - :name (n3 / name :op1 326~e.11)) :op3 (a6 / asteroid :wiki~e.8 - :name (n4 / name :op1 327~e.13)) :op4 (a7 / asteroid :wiki~e.8 - :name (n5 / name :op1 328~e.15)) :op5 (a8 / asteroid :wiki~e.8 - :name (n6 / name :op1 329~e.17)) :op6 (a9 / asteroid :wiki~e.8 - :name (n7 / name :op1 330~e.20))))))

# he_0 began_1 ,_2 therefore_3 ,_4 by_5 visiting_6 them_7 ,_8 in_9 order_10 to_11 add_12 to_13 his_14 knowledge_15 ._16
(b / begin-01~e.1 :arg0 (h / he~e.0) :arg2 (v / visit-01~e.6 :arg0 h :arg1 (t2 / they~e.7)) :mod (t / therefore~e.3) :purpose~e.11 (a / add-02~e.12 :arg0 v :arg2 (k / knowledge~e.15 :poss~e.14 h)))

# the_0 first_1 of_2 them_3 was_4 inhabited_5 by_6 a_7 king_8 ._9
(i / inhabit-01~e.5 :arg0 (k / king~e.8) :arg1 (t2 / thing :ord~e.1 (o / ordinal-entity~e.1 :value 1~e.7) :arg1-of (i2 / include-91~e.2 :arg2 (t / they~e.3))))

# clad_0 in_1 royal_2 purple_3 and_4 ermine_5 ,_6 he_7 was_8 seated_9 upon_10 a_11 throne_12 which_13 was_14 at_15 the_16 same_17 time_18 both_19 simple_20 and_21 majestic_22 ._23
(s / seat-01~e.9 :arg1 (h / he~e.7 :arg1-of (c / clad-01~e.0 :arg2 (a / and~e.4 :op1 (p / purple-02~e.3 :mod (r / royal~e.2)) :op2 (e / ermine~e.5)))) :arg2 (t / throne~e.12 :arg1-of~e.18 (s2 / simple-02~e.20) :mod (m / majesty~e.22)))

# "_0 ah_1 !_2
(a2 / ah~e.1 :mode~e.2 expressive~e.2)

# here_0 is_1 a_2 subject_3 ,_4 "_5 exclaimed_6 the_7 king_8 ,_9 when_10 he_11 saw_12 the_13 little_14 prince_15 coming_16 ._17
(e / exclaim-01~e.6 :arg0 (k / king~e.8) :arg1 (h2 / here~e.0 :location-of (s / subject~e.3)) :time~e.10 (s2 / see-01~e.12 :arg0 k :arg1 (p / prince~e.15 :mod (l / little~e.14) :arg1-of (c / come-01~e.16))))

# and_0 the_1 little_2 prince_3 asked_4 himself_5 :_6 "_7 how_8 could_9 he_10 recognize_11 me_12 when_13 he_14 had_15 never_16 seen_17 me_18 before_19 ?_20 "_21
(a / ask-01~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2)) :arg1 (p2 / possible-01~e.9 :arg1 (r / recognize-02~e.11 :arg0 (h / he~e.10) :arg1 p :condition~e.13 (s / see-01~e.17 :polarity~e.16 -~e.16 :arg0 h :arg1 p :time (b / before~e.19) :time (e / ever~e.16))) :manner~e.8 (a2 / amr-unknown~e.20)) :arg2 p)

# he_0 did_1 not_2 know_3 how_4 the_5 world_6 is_7 simplified_8 for_9 kings_10 ._11
(k / know-01~e.3 :arg0 (h / he~e.0) :arg1 (s / simplify-01~e.8 :arg1 (w / world~e.6) :beneficiary~e.9 (k2 / king~e.10)) :polarity~e.2 -~e.1)

# to_0 them_1 ,_2 all_3 men_4 are_5 subjects_6 ._7
(o / opine-01~e.0 :arg0 (t2 / they~e.1) :arg1 (s2 / subject~e.6 :domain (m2 / man~e.4 :mod (a2 / all~e.3))))

# "_0 approach_1 ,_2 so_3 that_4 i_5 may_6 see_7 you_8 better_9 ,_10 "_11 said_12 the_13 king_14 ,_15 who_16 felt_17 consumingly_18 proud_19 of_20 being_21 at_22 last_23 a_24 king_25 over_26 somebody_27 ._28
(s / say-01~e.12 :arg0 (k / king~e.14 :arg0-of~e.20 (p / pride-01~e.19 :arg2 (r / reign-01~e.26 :arg0 k :arg1 (s3 / somebody~e.27) :time~e.22 (a2 / at-last~e.23)))) :arg1 (a / approach-01~e.1 :mode~e.4 imperative~e.3 :arg1 y :purpose~e.3 (s2 / see-01~e.7 :arg0 k :arg1 (y / you~e.8) :manner (w / well~e.17 :degree (m / more~e.9)))))

# the_0 little_1 prince_2 looked_3 everywhere_4 to_5 find_6 a_7 place_8 to_9 sit_10 down_11 ;_12 but_13 the_14 entire_15 planet_16 was_17 crammed_18 and_19 obstructed_20 by_21 the_22 king_23 's_24 magnificent_25 ermine_26 robe_27 ._28
(a / and~e.19 :op1 (c / cram-01~e.18 :arg1 (r2 / robe~e.27 :mod (e2 / ermine~e.26) :mod (m / magnificent~e.25) :poss~e.24 (k / king~e.23)) :arg2 (p3 / planet~e.16 :extent~e.21 (e3 / entire~e.15))) :op2 (o / obstruct-01~e.20 :arg0 r2 :arg1 p3) :concession~e.13 (l / look-01~e.3 :arg0 (p / prince~e.2 :mod (l2 / little~e.1)) :arg1 (p2 / place~e.8 :purpose~e.9 (s / sit-down-02~e.10 :arg1 p)) :location~e.6 (e / everywhere~e.4)))

# so_0 he_1 remained_2 standing_3 upright_4 ,_5 and_6 ,_7 since_8 he_9 was_10 tired_11 ,_12 he_13 yawned_14 ._15
(a / and~e.6 :op1 (r / remain-01~e.2 :arg1 (h / he~e.1) :arg3~e.8 (s / stand-01~e.3 :arg1 h :manner (u / upright~e.4))) :op2 (y / yawn-01~e.14 :arg0 h :arg1-of (c / cause-01~e.0 :arg0 (t / tire-01~e.11 :arg1 h))))

# "_0 it_1 is_2 contrary_3 to_4 etiquette_5 to_6 yawn_7 in_8 the_9 presence_10 of_11 a_12 king_13 ,_14 "_15 the_16 monarch_17 said_18 to_19 him_20 ._21
(s / say-01~e.18 :arg0 (m / monarch~e.17) :arg1 (c / contrary-01~e.3 :arg1 (y / yawn-01~e.7 :location~e.8 (k / king~e.13)) :arg2 (e / etiquette~e.5)) :arg2 (h / he~e.20))

# "_0 i_1 forbid_2 you_3 to_4 do_5 so_6 ._7 "_8
(f / forbid-01~e.2 :arg0 (i / i~e.1) :arg1 (d / do-02~e.5 :arg0 y :arg1 (s / so~e.6)) :arg2 (y / you~e.3))

# "_0 i_1 can_2 n't_3 help_4 it_5 ._6
(p / possible-01~e.2 :polarity~e.3 - :arg1 (h / help-02~e.4 :arg0 (i / i~e.1) :arg1 (i2 / it~e.5)))

# i_0 can_1 n't_2 stop_3 myself_4 ,_5 "_6 replied_7 the_8 little_9 prince_10 ,_11 thoroughly_12 embarrassed_13 ._14
(r / reply-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg2 (p2 / possible-01~e.1 :polarity~e.2 -~e.0 :arg1 (s / stop-01~e.3 :arg0 p :arg1 p)) :manner (e / embarrass-01~e.13 :arg1 p :degree (t / thorough~e.12)))

# "_0 i_1 have_2 come_3 on_4 a_5 long_6 journey_7 ,_8 and_9 i_10 have_11 had_12 no_13 sleep_14 ..._15 "_16
(a / and~e.9 :op1 (c / come-01~e.3 :arg1 (i / i~e.1) :arg2 (j / journey-01~e.7 :arg0 i :arg1-of (l / long-03~e.6))) :op2 (s / sleep-01~e.14 :polarity~e.13 -~e.13 :arg0 i))

# "_0 ah_1 ,_2 then_3 ,_4 "_5 the_6 king_7 said_8 ._9
(s / say-01~e.8 :arg0 (k / king~e.7) :arg1 (a / ah~e.1 :mode expressive~e.1 :mod (t / then~e.3)))

# "_0 i_1 order_2 you_3 to_4 yawn_5 ._6
(o / order-01~e.2 :arg0 (i / i~e.1) :arg1 (y / you~e.3) :arg2 (y2 / yawn-01~e.5 :arg0 y))

# it_0 is_1 years_2 since_3 i_4 have_5 seen_6 anyone_7 yawning_8 ._9
(p / pass-03~e.0 :arg1 (y3 / year~e.2) :time (s3 / since~e.3 :op1 (s / see-01~e.6 :arg0 (i / i~e.4) :arg1 (a / anyone~e.7 :arg0-of (y / yawn-01~e.8)))))

# yawns_0 ,_1 to_2 me_3 ,_4 are_5 objects_6 of_7 curiosity_8 ._9
(c2 / curious-01~e.8 :arg0 (y2 / yawn-01~e.0) :arg1 (i / i~e.3))

# come_0 ,_1 now_2 !_3
(c / come-01~e.0 :arg1 (y / you) :time (n / now~e.2) :mode~e.3 imperative~e.3)

# yawn_0 again_1 !_2
(y / yawn-01~e.0 :mode~e.2 imperative~e.2 :arg0 (y2 / you) :mod (a / again~e.1))

# it_0 is_1 an_2 order_3 ._4 "_5
(o2 / order-01~e.3 :arg2 (i2 / it~e.0))

# "_0 that_1 frightens_2 me_3 ..._4
(f / frighten-01~e.2 :arg0 (t / that~e.1) :arg1 (i / i~e.3))

# i_0 can_1 not_2 ,_3 any_4 more_5 ..._6 "_7 murmured_8 the_9 little_10 prince_11 ,_12 now_13 completely_14 abashed_15 ._16
(m / murmur-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10) :arg1-of (a2 / abash-01~e.15 :arg1-of (c / complete-02~e.14) :time (n / now~e.13))) :arg1 (p2 / possible-01~e.1 :polarity~e.2 -~e.2 :time (a / anymore~e.5)))

# "_0 hum_1 !_2
(h / hum~e.1 :mode~e.2 expressive~e.2)

# hum_0 !_1 "_2 replied_3 the_4 king_5 ._6
(r / reply-01~e.3 :arg0 (k / king~e.5) :arg2 (h / hum~e.0 :mode~e.1 expressive~e.1))

# "_0 then_1 i_2 -_3 -_4 i_5 order_6 you_7 sometimes_8 to_9 yawn_10 and_11 sometimes_12 to_13 -_14 -_15 "_16
(o / order-01~e.6 :arg0 (i / i~e.5) :arg1 (y / you~e.7) :arg2 (a / and~e.11 :op1 (y2 / yawn-01~e.10 :arg0 y :frequency (s / sometimes~e.8)) :op2 (d / do-02~e.2 :frequency (s2 / sometimes~e.12))) :mod (t2 / then~e.1))

# he_0 sputtered_1 a_2 little_3 ,_4 and_5 seemed_6 vexed_7 ._8
(a / and~e.5 :op1 (s / sputter-01~e.1 :arg0 (h / he~e.0) :degree (l / little~e.3)) :op2 (s2 / seem-01~e.6 :arg1 (v / vex-01~e.7 :arg1 h)))

# for_0 what_1 the_2 king_3 fundamentally_4 insisted_5 upon_6 was_7 that_8 his_9 authority_10 should_11 be_12 respected_13 ._14
(i / insist-01~e.5 :arg0 (k / king~e.3) :arg1 (r / respect-01~e.13 :arg1 (a / authority~e.10 :poss~e.9 k)) :mod (f / fundamental~e.4))

# he_0 tolerated_1 no_2 disobedience_3 ._4
(t / tolerate-01~e.1 :arg0 (h / he~e.0) :arg1 (d / disobey-01~e.3 :arg1 h) :polarity~e.2 -~e.2)

# he_0 was_1 an_2 absolute_3 monarch_4 ._5
(m / monarch~e.4 :mod (a / absolute~e.3) :domain (h2 / he~e.0))

# but_0 ,_1 because_2 he_3 was_4 a_5 very_6 good_7 man_8 ,_9 he_10 made_11 his_12 orders_13 reasonable_14 ._15
(h3 / have-concession-91~e.0 :arg1 (m / make-02~e.11 :arg0 (h / he~e.10) :arg1 (r / reasonable-02~e.14 :arg1 (t / thing~e.13 :arg2-of~e.12 (o / order-01~e.13))) :arg1-of (c2 / cause-01~e.2 :arg0 (m2 / man~e.8 :arg1-of (g / good-02~e.7 :degree (v / very~e.6)) :domain~e.5 (h2 / he~e.3)))))

# "_0 if_1 i_2 ordered_3 a_4 general_5 ,_6 "_7 he_8 would_9 say_10 ,_11 by_12 way_13 of_14 example_15 ,_16 "_17 if_18 i_19 ordered_20 a_21 general_22 to_23 change_24 himself_25 into_26 a_27 sea_28 bird_29 ,_30 and_31 if_32 the_33 general_34 did_35 not_36 obey_37 me_38 ,_39 that_40 would_41 not_42 be_43 the_44 fault_45 of_46 the_47 general_48 ._49
(s / say-01~e.10 :arg0 (h / he~e.8) :arg1 (o / order-01~e.20 :arg0 h :arg1 (p / person~e.19 :arg0-of~e.21 (h2 / have-org-role-91~e.21 :arg2 (g / general~e.34))) :arg2 (c / change-01~e.24 :arg0 p :arg1 p :arg2 (b / bird~e.29 :mod (s2 / sea~e.28))) :arg1-of (o2 / obey-01~e.37 :polarity~e.36 -~e.35 :arg0 p) :condition-of~e.13 (f / fault-01~e.45 :polarity~e.42 -~e.42 :arg1 p)) :arg0-of~e.46 (e / exemplify-01~e.15))

# it_0 would_1 be_2 my_3 fault_4 ._5 "_6
(f / fault-01~e.4 :arg1 (i2 / i~e.3))

# "_0 may_1 i_2 sit_3 down_4 ?_5 "_6 came_7 now_8 a_9 timid_10 inquiry_11 from_12 the_13 little_14 prince_15 ._16
(i / inquire-01~e.11 :arg0 (p / prince~e.15 :mod (l / little~e.14)) :arg1 (p2 / permit-01~e.7 :mode interrogative~e.5 :arg1 (s / sit-down-02~e.3 :arg1 p)) :manner (t / timid~e.10) :time (n / now~e.8))

# "_0 i_1 order_2 you_3 to_4 do_5 so_6 ,_7 "_8 the_9 king_10 answered_11 him_12 ,_13 and_14 majestically_15 gathered_16 in_17 a_18 fold_19 of_20 his_21 ermine_22 mantle_23 ._24
(a / and~e.14 :op1 (a2 / answer-01~e.11 :arg0 (k / king~e.10) :arg1 (h / he~e.12) :arg2 (o / order-01~e.2 :arg0 k :arg1 h :arg2 (d / do-02~e.5 :arg1 (s / so~e.6)))) :op2 (g / gather-01~e.16 :arg0 k :arg1 (f / fold~e.19 :part-of~e.21 (m3 / mantle~e.23 :consist-of~e.20 (e2 / ermine~e.22))) :manner (m / majesty~e.15)))

# but_0 the_1 little_2 prince_3 was_4 wondering_5 ..._6
(w / wonder-01~e.5 :arg0 (p / prince~e.3 :mod (l / little~e.2)))

# the_0 planet_1 was_2 tiny_3 ._4
(t / tiny~e.3 :domain (p / planet~e.1))

# over_0 what_1 could_2 this_3 king_4 really_5 rule_6 ?_7
(p / possible-01~e.2 :arg1 (r / rule-03~e.6 :arg0 (k / king~e.4) :arg1 (a / amr-unknown~e.7) :arg1-of (r2 / real-04~e.5)))

# "_0 sire_1 ,_2 "_3 he_4 said_5 to_6 him_7 ,_8 "_9 i_10 beg_11 that_12 you_13 will_14 excuse_15 my_16 asking_17 you_18 a_19 question_20 -_21 -_22 "_23
(s / say-01~e.5 :arg0 (h / he~e.4) :arg1 (b / beg-01~e.11 :arg0 h :arg1 p :arg2 (e / excuse-01~e.15 :arg0 p :arg1 h :arg2 (a / ask-01~e.17 :arg0 h :arg2 p))) :arg2 (p / person~e.20 :arg1-of~e.20 (t / title-01~e.20 :arg2 (s2 / sire~e.1))))

# "_0 i_1 order_2 you_3 to_4 ask_5 me_6 a_7 question_8 ,_9 "_10 the_11 king_12 hastened_13 to_14 assure_15 him_16 ._17
(h / hasten-01~e.13 :arg0 (k / king~e.12) :arg1 (a / assure-01~e.15 :arg0 k :arg1 (h2 / he~e.16) :arg2 (o / order-01~e.2 :arg0 k :arg1 h2 :arg2 (a2 / ask-01~e.5 :arg0 h2 :arg2 k))))

# "_0 sire_1 -_2 -_3 over_4 what_5 do_6 you_7 rule_8 ?_9 "_10
(s / say-01~e.6 :arg1 (r / rule-03~e.8 :arg0 p :arg1 (a / amr-unknown~e.9)) :arg2 (p / person~e.4 :arg1-of~e.4 (t / title-01~e.4 :arg2 (s2 / sire~e.1))))

# "_0 over_1 everything_2 ,_3 "_4 said_5 the_6 king_7 ,_8 with_9 magnificent_10 simplicity_11 ._12
(s / say-01~e.5 :arg0 (k / king~e.7) :arg1 (e / everything~e.2) :arg1-of (s2 / simple-02~e.11 :mod (m / magnificence~e.10)))

# "_0 over_1 everything_2 ?_3 "_4
(o / over~e.1 :mode interrogative~e.3 :op1 (e / everything~e.2))

# the_0 king_1 made_2 a_3 gesture_4 ,_5 which_6 took_7 in_8 his_9 planet_10 ,_11 the_12 other_13 planets_14 ,_15 and_16 all_17 the_18 stars_19 ._20
(g / gesture-01~e.4 :arg0 (k / king~e.1) :arg0-of (t / take-in-23~e.7 :arg1 (a / and~e.16 :op1 (p / planet~e.10 :poss~e.9 k) :op2 (p2 / planet~e.14 :mod (o / other~e.13)) :op3 (s / star~e.19 :mod (a2 / all~e.17)))))

# "_0 over_1 all_2 that_3 ?_4 "_5 asked_6 the_7 little_8 prince_9 ._10
(a / ask-01~e.6 :mode interrogative~e.4 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (o / over~e.1 :op1 (t / that~e.3 :mod (a3 / all~e.2))))

# "_0 over_1 all_2 that_3 ,_4 "_5 the_6 king_7 answered_8 ._9
(a / answer-01~e.8 :arg0 (k / king~e.7) :arg2 (o / over~e.1 :op1 (t / that~e.3 :mod (a2 / all~e.2))))

# for_0 his_1 rule_2 was_3 not_4 only_5 absolute_6 :_7 it_8 was_9 also_10 universal_11 ._12
(a3 / and~e.10 :op1 (a4 / absolute~e.6 :domain (r / rule-03~e.2 :arg0 (h / he~e.1))) :op2 (u2 / universal~e.11 :domain~e.8 r))

# "_0 and_1 the_2 stars_3 obey_4 you_5 ?_6 "_7
(o / obey-01~e.4 :arg0 (s / star~e.3) :arg1 (y / you~e.5) :mode interrogative~e.6)

# "_0 certainly_1 they_2 do_3 ,_4 "_5 the_6 king_7 said_8 ._9
(s / say-01~e.8 :arg0 (k / king~e.7) :arg1 (d / do-02~e.3 :arg0 (t / they~e.2) :mod (c / certain~e.1)))

# "_0 they_1 obey_2 instantly_3 ._4
(o / obey-01~e.2 :arg0 (t / they~e.1) :manner (i / instant~e.3))

# i_0 do_1 not_2 permit_3 insubordination_4 ._5 "_6
(p / permit-01~e.3 :polarity~e.2 -~e.1 :arg0 (i / i~e.0) :arg1 (i2 / insubordinate-00~e.4))

# such_0 power_1 was_2 a_3 thing_4 for_5 the_6 little_7 prince_8 to_9 marvel_10 at_11 ._12
(m / marvel-01~e.10 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (p2 / power~e.1 :degree (s / such~e.0)))

# if_0 he_1 had_2 been_3 master_4 of_5 such_6 complete_7 authority_8 ,_9 he_10 would_11 have_12 been_13 able_14 to_15 watch_16 the_17 sunset_18 ,_19 not_20 forty_21 -_22 four_23 times_24 in_25 one_26 day_27 ,_28 but_29 seventy_30 -_31 two_32 ,_33 or_34 even_35 a_36 hundred_37 ,_38 or_39 even_40 two_41 hundred_42 times_43 ,_44 without_45 ever_46 having_47 to_48 move_49 his_50 chair_51 ._52
(p / possible-01~e.14 :arg1 (w / watch-01~e.16 :arg0 (h / he~e.10) :arg1 (s / sunset~e.18 :arg1-of (h3 / have-frequency-91~e.12 :polarity~e.20 -~e.20 :arg2 44~e.21 :range~e.27 (t5 / temporal-quantity :quant 1~e.26 :unit (y / year~e.30))) :arg1-of (h4 / have-frequency-91~e.29 :arg2 (o / or~e.34 :op1 72~e.32 :op2 100~e.35 :op3 200~e.24) :range~e.23 t5)) :manner~e.45 (m2 / move-01~e.49 :polarity~e.47 - :arg0 h :arg1 (c2 / chair~e.51 :poss~e.50 h) :time (e3 / ever~e.46))) :condition~e.0 (m / master~e.4 :domain (h2 / he~e.1) :poss-of~e.5 (a / authority~e.8 :arg1-of~e.2 (c / complete-02~e.7) :mod (s2 / such~e.6))))

# and_0 because_1 he_2 felt_3 a_4 bit_5 sad_6 as_7 he_8 remembered_9 his_10 little_11 planet_12 which_13 he_14 had_15 forsaken_16 ,_17 he_18 plucked_19 up_20 his_21 courage_22 to_23 ask_24 the_25 king_26 a_27 favor_28 :_29 "_30 i_31 should_32 like_33 to_34 see_35 a_36 sunset_37 ..._38 do_39 me_40 that_41 kindness_42 ..._43
(p / pluck-01~e.19 :arg0 (h / he~e.18) :arg1 (c / courage~e.22 :poss~e.21 h) :mod (u / up~e.20) :arg1-of (c2 / cause-01~e.1 :arg0 (f / feel-01~e.3 :arg0 h :arg1 (s3 / sad-02~e.6 :arg1 h :degree~e.32 (b / bit~e.5)) :arg1-of (c3 / cause-01~e.1 :arg0 (r / remember-01~e.9 :arg0 h :arg1 (p2 / planet~e.12 :poss~e.10 h :mod (l2 / little~e.11) :arg1-of~e.15 (f2 / forsake-01~e.16 :arg0 h)))))) :arg0-of (c4 / cause-01 :arg1 (a / ask-02~e.24 :arg0 h :arg1 (a2 / and~e.0 :op1 (l / like-02~e.33 :arg0 (i / i~e.31) :arg1 (s / see-01~e.35 :arg0 i :arg1 (s2 / sunset~e.37))) :op2 (d / do-02~e.39 :mode imperative~e.40 :arg0 k :arg1 (t / thing~e.23 :arg1-of~e.41 (k2 / kind-01~e.42 :arg0 k :arg2 h)) :arg2 h)) :arg2 (k / king~e.26))))

# order_0 the_1 sun_2 to_3 set_4 ..._5 "_6
(o / order-01~e.0 :mode imperative~e.3 :arg0 (y / you) :arg1 (s / sun~e.2) :arg2 (s2 / set-11~e.4 :arg1 s))

# "_0 if_1 i_2 ordered_3 a_4 general_5 to_6 fly_7 from_8 one_9 flower_10 to_11 another_12 like_13 a_14 butterfly_15 ,_16 or_17 to_18 write_19 a_20 tragic_21 drama_22 ,_23 or_24 to_25 change_26 himself_27 into_28 a_29 sea_30 bird_31 ,_32 and_33 if_34 the_35 general_36 did_37 not_38 carry_39 out_40 the_41 order_42 that_43 he_44 had_45 received_46 ,_47 which_48 one_49 of_50 us_51 would_52 be_53 in_54 the_55 wrong_56 ?_57 "_58 the_59 king_60 demanded_61 ._62
(d / demand-01~e.61 :arg0 (k / king~e.60) :arg1 (w / wrong-04~e.56 :arg1 (a / amr-unknown~e.57 :arg1-of (i2 / include-91~e.49 :arg2 (w3 / we~e.51))) :condition~e.1 (a2 / and~e.33 :op1 (o3 / order-01~e.3 :arg0 k :arg1 (p / person~e.2 :arg0-of~e.4 (h / have-org-role-91~e.4 :arg2 (g / general~e.5))) :arg2 (o4 / or~e.17 :op1 (f / fly-01~e.7 :arg1 p :destination~e.28 (a3 / another~e.12) :source~e.8 (t / thing~e.11 :arg1-of~e.10 (f2 / flower-01~e.10 :quant 1~e.9)) :manner (b / butterfly~e.15)) :op2 (w2 / write-01~e.19 :arg0 p :arg1 (d2 / drama~e.22 :mod (t2 / tragedy~e.21))) :op3 (c2 / change-01~e.26 :arg0 p :arg1 p :arg2 (b2 / bird~e.31 :mod (s / sea~e.30))))) :op2 (c / carry-out-03~e.39 :polarity~e.38 -~e.37 :arg0 p :arg1 (t3 / thing~e.42 :arg2-of~e.40 (o2 / order-01~e.42) :arg1-of~e.45 (r / receive-01~e.46 :arg0 p :arg2 k))))))

# "_0 the_1 general_2 ,_3 or_4 myself_5 ?_6 "_7
(o / or~e.4 :mode interrogative~e.6 :op1 (p / person :arg0-of (h / have-org-role-91 :arg2 (g / general~e.2))) :op2 (i / i~e.5))

# "_0 you_1 ,_2 "_3 said_4 the_5 little_6 prince_7 firmly_8 ._9
(s / say-01~e.4 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg1 (y / you~e.1) :arg1-of (f / firm-03~e.8))

# "_0 exactly_1 ._2
(e / exact~e.1)

# one_0 much_1 require_2 from_3 each_4 one_5 the_6 duty_7 which_8 each_9 one_10 can_11 perform_12 ,_13 "_14 the_15 king_16 went_17 on_18 ._19
(g / go-on-25~e.17 :arg0 (k / king~e.16) :arg1 (o / obligate-01~e.1 :arg1 (o2 / one~e.0) :arg2 (r / require-01~e.2 :arg0 o2 :arg1 (d / duty~e.7 :arg1-of (p / perform-02~e.12 :arg0 o3 :arg1-of (p2 / possible-01~e.11))) :arg2 (o3 / one~e.5 :mod (e / each~e.9)))))

# "_0 accepted_1 authority_2 rests_3 first_4 of_5 all_6 on_7 reason_8 ._9
(r / rest-02~e.3 :arg1 (a / authority~e.2 :arg1-of (a2 / accept-01~e.1)) :arg2 (r2 / reason-01~e.8) :mod (f / first-of-all~e.4))

# if_0 you_1 ordered_2 your_3 people_4 to_5 go_6 and_7 throw_8 themselves_9 into_10 the_11 sea_12 ,_13 they_14 would_15 rise_16 up_17 in_18 revolution_19 ._20
(r / rise-up-03~e.16 :arg0 (p / person~e.4 :poss~e.3 y :arg0-of (r2 / revolution-03~e.19)) :arg1 y :condition~e.0 (o / order-01~e.2 :arg0 (y / you~e.1) :arg1 p :arg2 (t / throw-01~e.8 :arg0 p :arg1 p :arg2 (s / sea~e.12))))

# i_0 have_1 the_2 right_3 to_4 require_5 obedience_6 because_7 my_8 orders_9 are_10 reasonable_11 ._12 "_13
(r / right-05~e.3 :arg1 i :arg2 (r2 / require-01~e.5 :arg0 (i / i~e.0) :arg1 (o / obey-01~e.6 :arg1 i)) :arg1-of (c / cause-01~e.7 :arg0 (r3 / reasonable-02~e.11 :arg1 (t / thing~e.9 :arg2-of~e.8 (o2 / order-01~e.9)))))

# "_0 then_1 my_2 sunset_3 ?_4 "_5 the_6 little_7 prince_8 reminded_9 him_10 :_11 for_12 he_13 never_14 forgot_15 a_16 question_17 once_18 he_19 had_20 asked_21 it_22 ._23
(r / remind-01~e.9 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (s / sunset~e.3 :mode~e.1 interrogative~e.4 :poss~e.2 p) :arg2 (h / he~e.13) :arg1-of (c / cause-01~e.12 :arg0 (f / forget-01~e.15 :polarity~e.14 -~e.14 :arg0 p :arg1 (t / thing~e.18 :arg1-of~e.20 (q / question-01~e.17)) :condition~e.22 (a / ask-01~e.21 :arg0 p :arg1 t) :time (e / ever~e.14))))

# "_0 you_1 shall_2 have_3 your_4 sunset_5 ._6
(h / have-03~e.3 :arg0 (y / you~e.1) :arg1 (s / sunset~e.5 :poss~e.4 y))

# i_0 shall_1 command_2 it_3 ._4
(c / command-02~e.2 :arg0 (i / i~e.0) :arg2 (i2 / it~e.3))

# but_0 ,_1 according_2 to_3 my_4 science_5 of_6 government_7 ,_8 i_9 shall_10 wait_11 until_12 conditions_13 are_14 favorable_15 ._16 "_17
(c3 / contrast-01~e.0 :arg2 (w / wait-01~e.11 :arg1 (i / i~e.9) :arg2 (c / condition~e.13 :mod (f2 / favorable~e.15)) :arg1-of (c2 / cause-01~e.2 :arg0 (s2 / science~e.5 :domain~e.12 (g / government-organization~e.7 :arg0-of (g2 / govern-01~e.7)) :poss~e.4 i))))

# "_0 when_1 will_2 that_3 be_4 ?_5 "_6 inquired_7 the_8 little_9 prince_10 ._11
(i / inquire-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (b2 / be-temporally-at-91~e.1 :arg1 (t / that~e.3) :arg2 (a / amr-unknown~e.5)))

# "_0 hum_1 !_2
(h / hum~e.1 :mode~e.2 expressive~e.2)

# hum_0 !_1 "_2 replied_3 the_4 king_5 ;_6 and_7 before_8 saying_9 anything_10 else_11 he_12 consulted_13 a_14 bulky_15 almanac_16 ._17
(a / and~e.7 :op1 (r / reply-01~e.3 :arg0 (k / king~e.5) :arg2 (h / hum~e.0 :mode~e.1 expressive~e.1)) :op2 (c / consult-01~e.13 :arg0 k :arg1 (a2 / almanac~e.16 :arg1-of (b / bulky-02~e.15)) :time (b2 / before~e.8 :op1 (s / say-01~e.9 :arg0 k :arg1 (a3 / anything~e.10 :mod (e / else~e.11))))))

# "_0 hum_1 !_2
(h / hum~e.1 :mode~e.2 expressive~e.2)

# hum_0 !_1
(h / hum~e.0 :mode~e.1 expressive~e.1)

# that_0 will_1 be_2 about_3 -_4 -_5 about_6 -_7 -_8 that_9 will_10 be_11 this_12 evening_13 about_14 twenty_15 minutes_16 to_17 eight_18 ._19
(b / be-temporally-at-91~e.1 :arg1 (t3 / that~e.0) :arg2 (a / about~e.3 :op1 (d / date-entity :time "19:40"~e.18 :dayperiod~e.15 (e / evening~e.13) :mod (t / today~e.16))))

# and_0 you_1 will_2 see_3 how_4 well_5 i_6 am_7 obeyed_8 ._9 "_10
(s / see-01~e.3 :arg0 (y / you~e.1) :arg1 (o / obey-01~e.8 :arg1 (i / i~e.6) :manner (w / well~e.5 :degree (a / amr-unknown~e.4))))

# the_0 little_1 prince_2 yawned_3 ._4
(y / yawn-01~e.3 :arg0 (p / prince~e.2 :mod (l / little~e.1)))

# he_0 was_1 regretting_2 his_3 lost_4 sunset_5 ._6
(r / regret-01~e.2 :arg0 (h / he~e.0) :arg1 (l / lose-02~e.4 :arg0 h :arg1 (s / sunset~e.5)))

# and_0 then_1 ,_2 too_3 ,_4 he_5 was_6 already_7 beginning_8 to_9 be_10 a_11 little_12 bored_13 ._14
(a2 / and~e.0 :op2 (b / begin-01~e.8 :arg1 (b4 / bore-02~e.13 :arg1 (h2 / he~e.5) :degree (l / little~e.12)) :time (a / already~e.7)))

# "_0 i_1 have_2 nothing_3 more_4 to_5 do_6 here_7 ,_8 "_9 he_10 said_11 to_12 the_13 king_14 ._15
(s / say-01~e.11 :arg0 (h / he~e.10) :arg1 (r / remain-01~e.4 :polarity~e.3 -~e.6 :arg1 (t / thing~e.12 :arg1-of~e.6 (d2 / do-02~e.6)) :location~e.7 (h2 / here~e.7)) :arg2 (k / king~e.14))

# "_0 so_1 i_2 shall_3 set_4 out_5 on_6 my_7 way_8 again_9 ._10 "_11
(c / cause-01~e.1 :arg1 (s / set-out-07~e.4 :arg0 (i / i~e.2) :arg1 (w / way~e.8 :poss~e.7 i) :mod (a / again~e.9)))

# "_0 do_1 not_2 go_3 ,_4 "_5 said_6 the_7 king_8 ,_9 who_10 was_11 very_12 proud_13 of_14 having_15 a_16 subject_17 ._18
(s / say-01~e.6 :arg0 (k / king~e.8 :arg0-of~e.14 (p / pride-01~e.13 :arg2 (h / have-03~e.16 :arg0 k :arg1 (s2 / subject~e.17)) :degree (v / very~e.12))) :arg1 (g / go-02~e.3 :polarity~e.2 -~e.2 :mode imperative~e.1 :arg0 (y / you~e.15)))

# "_0 do_1 not_2 go_3 ._4
(g / go-02~e.3 :polarity~e.2 -~e.2 :mode~e.1 imperative~e.1 :arg0 (y / you))

# i_0 will_1 make_2 you_3 a_4 minister_5 !_6 "_7
(m / make-02~e.2 :arg0 (i / i~e.0) :arg1 (h / have-org-role-91~e.4 :arg0 (y / you~e.3) :arg2 (m2 / minister~e.5)))

# "_0 minister_1 of_2 what_3 ?_4 "_5
(m / minister~e.1 :topic~e.2 (a / amr-unknown~e.4))

# "_0 minster_1 of_2 -_3 -_4 of_5 justice_6 !_7 "_8
(m / minister~e.1 :topic~e.5 (j / justice~e.6))

# "_0 but_1 there_2 is_3 nobody_4 here_5 to_6 judge_7 !_8 "_9
(n / nobody~e.4 :location~e.2 (h / here~e.5) :arg1-of (j / judge-01~e.7))

# "_0 we_1 do_2 not_3 know_4 that_5 ,_6 "_7 the_8 king_9 said_10 to_11 him_12 ._13
(s / say-01~e.10 :arg0 (k / king~e.9) :arg1 (k2 / know-01~e.4 :arg0 (w / we~e.1) :arg1 (t / that~e.5) :polarity~e.3 -~e.2) :arg2 (h / he~e.12))

# "_0 i_1 have_2 not_3 yet_4 made_5 a_6 complete_7 tour_8 of_9 my_10 kingdom_11 ._12
(t / tour-01~e.8 :polarity~e.3 -~e.5 :arg0 (i / i~e.1) :arg1 (k / kingdom~e.11 :poss~e.10 i) :arg1-of (c / complete-02~e.7))

# i_0 am_1 very_2 old_3 ._4
(o2 / old~e.3 :domain (i / i~e.0) :degree (v / very~e.2))

# there_0 is_1 no_2 room_3 here_4 for_5 a_6 carriage_7 ._8
(r / room~e.3 :polarity~e.2 -~e.2 :purpose~e.5 (c / carriage~e.7) :location~e.0 (h / here~e.4))

# and_0 it_1 tires_2 me_3 to_4 walk_5 ._6 "_7
(t / tire-01~e.2 :arg0 (w / walk-01~e.5 :arg0 (i / i~e.3)) :arg1 i)

# "_0 oh_1 ,_2 but_3 i_4 have_5 looked_6 already_7 !_8 "_9 said_10 the_11 little_12 prince_13 ,_14 turning_15 around_16 to_17 give_18 one_19 more_20 glance_21 to_22 the_23 other_24 side_25 of_26 the_27 planet_28 ._29
(s / say-01~e.10 :arg0 (p / prince~e.13 :mod (l / little~e.12) :arg0-of (t / turn-01~e.15 :arg1 p :purpose~e.22 (g / glance-01~e.21 :quant 1~e.19 :arg0 p :arg1 (s2 / side~e.25 :mod (o / other~e.24) :part-of~e.26 (p2 / planet~e.28)) :mod (m / more~e.20)))) :arg1 (c / contrast-01~e.3 :arg2 (l2 / look-01~e.6 :arg0 p :time (a2 / already~e.7))))

# on_0 that_1 side_2 ,_3 as_4 on_5 this_6 ,_7 there_8 was_9 nobody_10 at_11 all_12 ..._13
(n2 / nobody~e.10 :location~e.0 (s / side~e.2 :mod (t / that~e.1) :arg1-of (s2 / same-01~e.4 :arg2 (t2 / this~e.6))) :mod (a / at-all~e.12))

# "_0 then_1 you_2 shall_3 judge_4 yourself_5 ,_6 "_7 the_8 king_9 answered_10 ._11
(a / answer-01~e.10 :arg0 (k / king~e.9) :arg2 (h / have-condition-91~e.5 :arg1 (j / judge-01~e.4 :arg0 (y / you~e.2) :arg1 y)))

# "_0 that_1 is_2 the_3 most_4 difficult_5 thing_6 of_7 all_8 ._9
(t / thing~e.6 :domain (t2 / that~e.1) :mod (d / difficult~e.5 :degree (m / most~e.4) :compared-to~e.7 (a / all~e.8)))

# it_0 is_1 much_2 more_3 difficult_4 to_5 judge_6 oneself_7 than_8 to_9 judge_10 others_11 ._12
(d / difficult~e.4 :degree (m / more~e.3 :degree (m2 / much~e.2)) :domain~e.0 (j / judge-01~e.6 :arg0 (o2 / one~e.7) :arg1 o2) :compared-to~e.8 (j2 / judge-01~e.10 :arg1 (o / other~e.11)))

# if_0 you_1 succeed_2 in_3 judging_4 yourself_5 rightly_6 ,_7 then_8 you_9 are_10 indeed_11 a_12 man_13 of_14 true_15 wisdom_16 ._17 "_18
(w2 / wise~e.11 :domain (y / you~e.5) :condition~e.0 (s / succeed-01~e.2 :arg0 y :arg1 (j / judge-01~e.4 :arg0 y :arg1 y :arg1-of (r / right-02~e.6))) :arg1-of (t / true-01~e.15))

# "_0 yes_1 ,_2 "_3 said_4 the_5 little_6 prince_7 ,_8 "_9 but_10 i_11 can_12 judge_13 myself_14 anywhere_15 ._16
(s / say-01~e.4 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg1 (y / yes~e.1 :concession~e.10 (p2 / possible-01~e.12 :arg1 (j / judge-01~e.13 :arg0 p :arg1 p :location~e.14 (a / anywhere~e.15)))))

# i_0 do_1 not_2 need_3 to_4 live_5 on_6 this_7 planet_8 ._9
(n / need-01~e.3 :arg0 (i / i~e.0) :arg1 (l / live-01~e.5 :arg0 i :location~e.6 (p / planet~e.8 :mod (t / this~e.7))) :polarity~e.2 -~e.1)

# "_0 hum_1 !_2
(h / hum~e.1 :mode~e.2 expressive~e.2)

# hum_0 !_1 "_2 said_3 the_4 king_5 ._6
(s / say-01~e.3 :arg0 (k / king~e.5) :arg1 (h / hum~e.0 :mode~e.1 expressive~e.1))

# "_0 i_1 have_2 good_3 reason_4 to_5 believe_6 that_7 somewhere_8 on_9 my_10 planet_11 there_12 is_13 an_14 old_15 rat_16 ._17
(h2 / have-03~e.2 :arg0 (i / i~e.1) :arg1 (r3 / reason~e.4 :arg1-of (g / good-02~e.3) :arg0-of (c / cause-01~e.7 :arg1 (b3 / believe-01~e.6 :arg0 i :arg1 (r2 / rat~e.16 :location~e.12 (s / somewhere~e.8 :location~e.9 (p / planet~e.11 :poss~e.10 i)) :mod (o / old~e.15))))))

# i_0 hear_1 him_2 at_3 night_4 ._5
(h / hear-01~e.1 :arg0 (i / i~e.0) :arg1 (h2 / he~e.2) :time (d / date-entity :dayperiod~e.3 (n / night~e.4)))

# you_0 can_1 judge_2 this_3 old_4 rat_5 ._6
(p / possible-01~e.1 :arg1 (j / judge-01~e.2 :arg0 (y / you~e.0) :arg1 (r / rat~e.5 :mod (o / old~e.4) :mod (t / this~e.3))))

# from_0 time_1 to_2 time_3 you_4 will_5 condemn_6 him_7 to_8 death_9 ._10
(c / condemn-01~e.6 :arg0 (y / you~e.4) :arg1 (h / he~e.7) :arg3~e.8 (d / die-01~e.9 :arg1 h) :frequency~e.0 (t / time-to-time~e.1))

# thus_0 his_1 life_2 will_3 depend_4 on_5 your_6 justice_7 ._8
(d / depend-01~e.0 :arg0 (l / live-01~e.2 :arg0 (h / he~e.1)) :arg1 (j / justice~e.7 :poss~e.5 (y / you~e.6)))

# but_0 you_1 will_2 pardon_3 him_4 on_5 each_6 occasion_7 ;_8 for_9 he_10 must_11 be_12 treated_13 thriftily_14 ._15
(p / pardon-01~e.3 :arg0 (y / you~e.1) :arg1 (h / he~e.4) :frequency~e.10 (o2 / occasion-02~e.7 :quant (e / each~e.6)) :arg1-of (c / cause-01~e.9 :arg0 (o / obligate-01~e.11 :arg2 (t / treat-04~e.13 :arg1 h :manner (t2 / thrift~e.14)))))

# he_0 is_1 the_2 only_3 one_4 we_5 have_6 ._7 "_8
(o / one~e.4 :mod (o2 / only~e.3) :domain (h2 / he~e.0) :arg1-of (h / have-03~e.6 :arg0 (w / we~e.5)))

# "_0 i_1 ,_2 "_3 replied_4 the_5 little_6 prince_7 ,_8 "_9 do_10 not_11 like_12 to_13 condemn_14 anyone_15 to_16 death_17 ._18
(r / reply-01~e.4 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg1 (l2 / like-01~e.12 :polarity~e.11 -~e.10 :arg0 p :arg1 (c / condemn-01~e.14 :arg0 p :arg1 (a / anyone~e.15) :arg3~e.16 (d / die-01~e.17 :arg1 a))))

# and_0 now_1 i_2 think_3 i_4 will_5 go_6 on_7 my_8 way_9 ._10 "_11
(t / think-01~e.3 :arg0 (i / i~e.2) :arg1 (g / go-02~e.6 :arg0 i :arg1 (w / way~e.9 :poss~e.8 i)) :time (n / now~e.1))

# "_0 no_1 ,_2 "_3 said_4 the_5 king_6 ._7
(s / say-01~e.4 :arg0 (k / king~e.6) :arg1 (n / no~e.1))

# but_0 the_1 little_2 prince_3 ,_4 having_5 now_6 completed_7 his_8 preparations_9 for_10 departure_11 ,_12 had_13 no_14 wish_15 to_16 grieve_17 the_18 old_19 monarch_20 ._21
(w / wish-01~e.15 :polarity~e.5 -~e.14 :arg0 (p / prince~e.3 :mod (l / little~e.2) :arg0-of (c / complete-01~e.7 :arg1 (p2 / prepare-02~e.9 :arg0 p :arg2 (d / depart-01~e.11 :arg0 p)) :time (n / now~e.6))) :arg1 (g / grieve-01~e.17 :arg0 p :arg1 (m / monarch~e.20 :mod (o / old~e.19))))

# "_0 if_1 your_2 majesty_3 wishes_4 to_5 be_6 promptly_7 obeyed_8 ,_9 "_10 he_11 said_12 ,_13 "_14 he_15 should_16 be_17 able_18 to_19 give_20 me_21 a_22 reasonable_23 order_24 ._25
(s / say-01~e.12 :arg0 (h / he~e.11) :arg1 (p / possible-01~e.18 :arg1 (o / order-01~e.24 :arg0 (p2 / person~e.20 :arg1-of~e.20 (t2 / title-01~e.20 :arg2 (m / majesty~e.3 :poss~e.2 p2))) :arg1 h :arg2 (t / thing~e.19 :arg1-of~e.23 (r / reasonable-02~e.23))) :condition~e.1 (w / wish-01~e.4 :arg0 p2 :arg1 (o2 / obey-01~e.8 :arg1 p2 :manner~e.16 (p3 / prompt~e.7)))))

# he_0 should_1 be_2 able_3 ,_4 for_5 example_6 ,_7 to_8 order_9 me_10 to_11 be_12 gone_13 by_14 the_15 end_16 of_17 one_18 minute_19 ._20
(e2 / exemplify-01~e.6 :arg0 (p / possible-01~e.3 :arg1 (o / order-01~e.9 :arg0 (h / he~e.0) :arg1 (i / i~e.10) :arg2 (g / go-02~e.13 :arg0 i :time (b / by~e.14 :op1 (e / end-01~e.16 :arg1 (t / temporal-quantity :quant 1~e.18 :unit (m / minute~e.19))))))))

# it_0 seems_1 to_2 me_3 that_4 conditions_5 are_6 favorable_7 ..._8 "_9
(s / seem-01~e.1 :arg1 (f / favorable~e.7 :domain (c / condition~e.5)) :arg2 (i2 / i~e.3))

# as_0 the_1 king_2 made_3 no_4 answer_5 ,_6 the_7 little_8 prince_9 hesitated_10 a_11 moment_12 ._13
(h / hesitate-01~e.10 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :duration~e.11 (m / moment~e.12) :arg1-of (c / cause-01 :arg0 (a / answer-01~e.5 :polarity~e.4 -~e.3 :arg0 (k / king~e.2))))

# then_0 ,_1 with_2 a_3 sigh_4 ,_5 he_6 took_7 his_8 leave_9 ._10
(t / take-01~e.7 :arg0 (h / he~e.6 :arg0-of~e.2 (s / sigh-02~e.4)) :arg1 (l / leave-11~e.9 :arg0 h) :time (t2 / then~e.0))

# "_0 i_1 made_2 you_3 my_4 ambassador_5 ,_6 "_7 the_8 king_9 called_10 out_11 ,_12 hastily_13 ._14
(c / call-07~e.10 :arg0 (k / king~e.9) :arg1 (m / make-02~e.2 :arg0 k :arg1 (h2 / have-org-role-91~e.4 :arg0 (y / you~e.3) :arg1 k :arg2 (a / ambassador~e.5))) :manner~e.11 (h / hasty~e.13))

# he_0 had_1 a_2 magnificent_3 air_4 of_5 authority_6 ._7
(h / have-03~e.1 :arg0 (h2 / he~e.0) :arg1 (a / air~e.4 :mod (m / magnificence~e.3) :domain~e.2 (a2 / authority~e.6)))

# "_0 the_1 grown_2 -_3 ups_4 are_5 very_6 strange_7 ,_8 "_9 the_10 little_11 prince_12 said_13 to_14 himself_15 ,_16 as_17 he_18 continued_19 on_20 his_21 journey_22 ._23
(s / say-01~e.13 :arg0 (p / prince~e.12 :mod (l / little~e.11)) :arg1 (s2 / strange~e.7 :degree (v / very~e.6) :domain~e.15 (g / grown-up~e.2)) :arg2 p :time (c / continue-01~e.19 :arg0 p :arg1 (j / journey-01~e.22 :arg0 p)))

# chapter_0 11_1 ._2
(c / chapter~e.0 :mod 11~e.1)

# the_0 second_1 planet_2 was_3 inhabited_4 by_5 a_6 conceited_7 man_8 ._9
(i / inhabit-01~e.4 :arg0 (m / man~e.8 :mod (c / conceit~e.7)) :arg1 (p / planet~e.2 :ord~e.1 (o / ordinal-entity~e.6 :value 2~e.5)))

# "_0 ah_1 !_2
(a / ah~e.1 :mode~e.2 expressive~e.2)

# ah_0 !_1
(a / ah~e.0 :mode~e.1 expressive~e.1)

# i_0 am_1 about_2 to_3 receive_4 a_5 visit_6 from_7 an_8 admirer_9 !_10 "_11 he_12 exclaimed_13 from_14 afar_15 ,_16 when_17 he_18 first_19 saw_20 the_21 little_22 prince_23 coming_24 ._25
(e / exclaim-01~e.13 :arg0 (h / he~e.12) :arg1 (v / visit-01~e.6 :arg0 h :arg1 (p / person~e.10 :arg0-of~e.9 (a / admire-01~e.9 :arg1 h)) :time (a3 / about-to~e.2)) :time (s / see-01~e.20 :arg0 h :arg1 (c / come-01~e.24 :arg1 (p2 / prince~e.23 :mod (l / little~e.22))) :ord~e.17 (o / ordinal-entity~e.19 :value 1~e.5)) :direction~e.7 (f2 / from~e.14 :op1 (a2 / afar~e.15)))

# for_0 ,_1 to_2 conceited_3 men_4 ,_5 all_6 other_7 men_8 are_9 admirers_10 ._11
(o2 / opine-01~e.0 :arg0 (m2 / man~e.4 :mod (c / conceit~e.3)) :arg1 (p2 / person~e.10 :arg0-of~e.10 (a3 / admire-01~e.10) :domain (m / man~e.8 :mod (o / other~e.7) :mod (a / all~e.6))))

# "_0 good_1 morning_2 ,_3 "_4 said_5 the_6 little_7 prince_8 ._9
(s / say-01~e.5 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (m / morning~e.2 :arg1-of (g / good-02~e.1)))

# "_0 that_1 is_2 a_3 queer_4 hat_5 you_6 are_7 wearing_8 ._9 "_10
(h2 / hat~e.5 :mod (q2 / queer~e.4) :domain~e.3 (t2 / that~e.1) :arg1-of (w2 / wear-01~e.8))

# "_0 it_1 is_2 a_3 hat_4 for_5 salutes_6 ,_7 "_8 the_9 conceited_10 man_11 replied_12 ._13
(r / reply-01~e.12 :arg0 (m / man~e.11 :mod (c / conceit~e.10)) :arg1 (h2 / hat~e.4 :purpose~e.5 (s / salute-01~e.6 :instrument~e.3 h2) :domain~e.1 (i / it~e.1)))

# "_0 it_1 is_2 to_3 raise_4 in_5 salute_6 when_7 people_8 acclaim_9 me_10 ._11
(h / have-purpose-91 :arg1 (i / it~e.1) :arg2 (r / raise-01~e.4 :arg1 i :subevent-of~e.5 (s / salute-01~e.6 :time~e.7 (a / acclaim-01~e.9 :arg0 (p / person~e.8) :arg1 (i2 / i~e.10)) :instrument~e.5 i)))

# unfortunately_0 ,_1 nobody_2 at_3 all_4 ever_5 passes_6 this_7 way_8 ._9 "_10
(p / pass-03~e.6 :arg1 (n / nobody~e.2 :degree (a / at-all~e.4)) :path (w / way~e.8 :mod (t / this~e.7)) :arg2-of (f / fortunate-01~e.0 :polarity -) :time~e.3 (e / ever~e.5))

# "_0 yes_1 ?_2 "_3 said_4 the_5 little_6 prince_7 ,_8 who_9 did_10 not_11 understand_12 what_13 the_14 conceited_15 man_16 was_17 talking_18 about_19 ._20
(s / say-01~e.4 :arg0 (p / prince~e.7 :mod (l / little~e.6) :arg0-of (u / understand-01~e.12 :arg1 (a / amr-unknown~e.13 :arg1-of~e.19 (t / talk-01~e.18 :arg0 (m / man~e.16 :mod (c / conceit~e.15)))) :polarity~e.11 -~e.10)) :arg1 (y / yes~e.1 :mode interrogative~e.2))

# "_0 clap_1 your_2 hands_3 ,_4 one_5 against_6 the_7 other_8 ,_9 "_10 the_11 conceited_12 man_13 now_14 directed_15 him_16 ._17
(d / direct-01~e.15 :arg0 (m / man~e.13 :mod (c / conceit~e.12)) :arg1 (h / he~e.16) :arg2 (c2 / clap-01~e.1 :mode imperative~e.2 :arg0 h :arg1 (h2 / hand~e.3 :part-of~e.6 h) :manner (c3 / clap-01~e.1 :arg0 h :arg1 (h3 / hand~e.3 :quant 1~e.5 :part-of~e.6 h) :arg2 (h4 / hand~e.3 :part-of~e.6 h :arg1-of (d2 / differ-02~e.8 :arg2 h3)))) :time (n / now~e.14))

# the_0 little_1 prince_2 clapped_3 his_4 hands_5 ._6
(c / clap-01~e.3 :arg0 (p / prince~e.2 :mod (l / little~e.1)) :arg1 (h / hand~e.5 :part-of~e.4 p))

# the_0 conceited_1 man_2 raised_3 his_4 hat_5 in_6 a_7 modest_8 salute_9 ._10
(r / raise-01~e.3 :arg0 (m / man~e.2 :mod (c / conceit~e.1)) :arg1 (h / hat~e.5 :poss~e.4 m) :subevent-of~e.6 (s / salute-01~e.9 :arg0 m :manner (m2 / modest~e.8) :instrument~e.7 h))

# "_0 this_1 is_2 more_3 entertaining_4 than_5 the_6 visit_7 to_8 the_9 king_10 ,_11 "_12 the_13 little_14 prince_15 said_16 to_17 himself_18 ._19
(s / say-01~e.16 :arg0 (p / prince~e.15 :mod (l / little~e.14)) :arg1 (e / entertain-01~e.4 :arg0 (t / this~e.1) :degree (m / more~e.3) :compared-to~e.5 (v / visit-01~e.7 :arg1 (k / king~e.10))) :arg2 p)

# and_0 he_1 began_2 again_3 to_4 clap_5 his_6 hands_7 ,_8 one_9 against_10 the_11 other_12 ._13
(b / begin-01~e.2 :arg0 (h / he~e.1) :arg1 (c / clap-01~e.5 :arg0 h :arg1 (h2 / hand~e.7 :part-of~e.6 h) :manner (c2 / clap-01~e.5 :arg0 h :arg1 (h3 / hand~e.7 :quant 1~e.9 :part-of~e.6 h) :arg2 (h4 / hand~e.7 :part-of~e.6 h :arg1-of (d / differ-02~e.12 :arg2 h3)))) :mod (a / again~e.10))

# the_0 conceited_1 man_2 against_3 raised_4 his_5 hat_6 in_7 salute_8 ._9
(r / raise-01~e.4 :arg0 (m / man~e.2 :mod (c / conceit~e.1)) :arg1 (h2 / hat~e.6) :mod (a / again~e.3) :subevent-of~e.7 (s / salute-01~e.8 :arg0 m :instrument~e.7 h2))

# after_0 five_1 minutes_2 of_3 this_4 exercise_5 the_6 little_7 prince_8 grew_9 tired_10 of_11 the_12 game_13 's_14 monotony_15 ._16
(t / tire-01~e.10 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (m / monotony~e.15 :poss~e.14 (g2 / game~e.13)) :time (a / after~e.0 :op1 (e / exercise~e.5 :duration~e.9 (t2 / temporal-quantity :quant 5~e.1 :unit (m2 / minute~e.2)))))

# "_0 and_1 what_2 should_3 one_4 do_5 to_6 make_7 the_8 hat_9 come_10 down_11 ?_12 "_13 he_14 asked_15 ._16
(a / ask-01~e.15 :arg0 (h / he~e.14) :arg1 (d / do-02~e.5 :arg0 (o / one~e.4) :arg1 (a2 / amr-unknown~e.12) :arg2 (m / make-02~e.7 :arg0 o :arg1 (c / come-01~e.10 :arg1 (h3 / hat~e.9) :direction (d3 / down~e.11)))))

# but_0 the_1 conceited_2 man_3 did_4 not_5 hear_6 him_7 ._8
(h / hear-01~e.6 :arg0 (m / man~e.3 :mod (c / conceit~e.2)) :arg2 (h2 / he~e.7) :polarity~e.5 -~e.4)

# conceited_0 people_1 never_2 hear_3 anything_4 but_5 praise_6 ._7
(h / hear-01~e.3 :polarity~e.2 -~e.2 :arg0 (p / person~e.1 :mod (c / conceit~e.0)) :arg1 (a / anything~e.4 :concession~e.5 (p2 / praise-01~e.6)) :time (e / ever~e.2))

# "_0 do_1 you_2 really_3 admire_4 me_5 very_6 much_7 ?_8 "_9 he_10 demanded_11 of_12 the_13 little_14 prince_15 ._16
(d / demand-01~e.11 :arg0 (h / he~e.10) :arg1 (a / admire-01~e.4 :mode~e.1 interrogative~e.8 :arg0 p :arg1 h :degree (m / much~e.7 :degree (v / very~e.6)) :arg1-of (r / real-04~e.3)) :arg2 (p / prince~e.15 :mod (l / little~e.14)))

# "_0 what_1 does_2 that_3 mean_4 -_5 -_6 '_7 admire_8 '_9 ?_10 "_11
(m / mean-01~e.4 :arg1 (a / admire-01~e.8) :arg2 (a2 / amr-unknown~e.10))

# "_0 to_1 admire_2 mean_3 that_4 you_5 regard_6 me_7 as_8 the_9 handsomest_10 ,_11 the_12 best_13 -_14 dressed_15 ,_16 the_17 richest_18 ,_19 and_20 the_21 most_22 intelligent_23 man_24 on_25 this_26 planet_27 ._28 "_29
(m / mean-01~e.3 :arg1 (a / admire-01~e.2) :arg2 (r / regard-01~e.6 :arg0 (y / you~e.5) :arg1 (i / i~e.7) :arg2 (m6 / man~e.24 :mod (h / handsome~e.10 :degree (m2 / most~e.22)) :arg1-of (d / dress-01~e.15 :manner (w / well~e.13 :degree (m3 / most~e.13))) :mod (r2 / rich~e.18 :degree (m4 / most~e.13)) :arg1-of (i2 / intelligent-01~e.23 :degree (m5 / most~e.22)) :location~e.25 (p2 / planet~e.27 :mod (t / this~e.26)))))

# "_0 but_1 you_2 are_3 the_4 only_5 man_6 on_7 your_8 planet_9 !_10 "_11
(c / contrast-01~e.1 :arg2 (m / man~e.6 :quant (o / only~e.5 :location~e.7 (p / planet~e.9 :poss~e.8 y)) :domain (y / you~e.2)))

# "_0 do_1 me_2 this_3 kindness_4 ._5
(k2 / kind-01~e.4 :mode~e.1 imperative~e.2 :arg0 (y / you) :arg1 (t / this~e.3) :arg2 (i / i~e.2))

# admire_0 me_1 just_2 the_3 same_4 ._5 "_6
(a / admire-01~e.0 :mode imperative~e.1 :arg0 (y / you~e.1) :arg1 (i / i~e.1) :manner (s / same-01~e.4 :degree (j / just~e.2)))

# "_0 i_1 admire_2 you_3 ,_4 "_5 said_6 the_7 little_8 prince_9 ,_10 shrugging_11 his_12 shoulders_13 slightly_14 ,_15 "_16 but_17 what_18 is_19 there_20 in_21 that_22 to_23 interest_24 you_25 so_26 much_27 ?_28 "_29
(s / say-01~e.6 :arg0 (p / prince~e.9 :mod (l / little~e.8) :arg0-of (s2 / shrug-01~e.11 :arg1 (s3 / shoulder~e.13 :part-of~e.12 p) :degree (s4 / slight~e.14))) :arg1 (c2 / contrast-01~e.17 :arg1 (a / admire-01~e.2 :arg0 (i / i~e.1) :arg1 (y / you~e.25)) :arg2 (i2 / interest-01~e.24 :arg0 a :arg1 y :degree (m / much~e.27 :degree (s6 / so~e.26)) :arg1-of (c / cause-01 :arg0 (a2 / amr-unknown~e.28)))))

# and_0 the_1 little_2 prince_3 went_4 away_5 ._6
(a / and~e.0 :op2 (g / go-02~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2)) :direction (a2 / away~e.5)))

# "_0 the_1 grown_2 -_3 ups_4 are_5 certainly_6 very_7 odd_8 ,_9 "_10 he_11 said_12 to_13 himself_14 ,_15 as_16 he_17 continued_18 on_19 his_20 journey_21 ._22
(s / say-01~e.12 :arg0 (h / he~e.11) :arg1 (o / odd~e.8 :degree (v / very~e.7) :mod (c2 / certain~e.6) :domain~e.14 (g / grown-up~e.2)) :arg2 h :time (c / continue-01~e.18 :arg0 h :arg1 (j / journey-01~e.21 :arg0 h)))

# chapter_0 12_1 ._2
(c / chapter~e.0 :mod 12~e.1)

# the_0 next_1 planet_2 was_3 inhabited_4 by_5 a_6 tippler_7 ._8
(i / inhabit-01~e.4 :arg0 (p / person~e.5 :arg0-of~e.7 (t / tipple-01~e.7)) :arg1 (p2 / planet~e.2 :mod (n / next~e.1)))

# this_0 was_1 a_2 very_3 short_4 visit_5 ,_6 but_7 it_8 plunged_9 the_10 little_11 prince_12 into_13 deep_14 dejection_15 ._16
(h / have-concession-91~e.7 :arg1 (d / deject-01~e.15 :arg0 v :arg1 (p2 / prince~e.12 :mod (l / little~e.11)) :arg1-of (d2 / deep-02~e.14)) :arg2 (v / visit-01~e.5 :arg1-of (s / short-07~e.4 :degree~e.8 (v2 / very~e.3)) :domain~e.2 (t / this~e.0)))

# "_0 what_1 are_2 you_3 doing_4 there_5 ?_6 "_7 he_8 said_9 to_10 the_11 tippler_12 ,_13 whom_14 he_15 found_16 settled_17 down_18 in_19 silence_20 before_21 a_22 collection_23 of_24 empty_25 bottles_26 and_27 also_28 a_29 collection_30 of_31 full_32 bottles_33 ._34
(s / say-01~e.9 :arg0 (h / he~e.8) :arg1 (d / do-02~e.4 :arg0 p :arg1 (a / amr-unknown~e.6) :location~e.5 (t / there~e.5)) :arg2 (p / person~e.14 :arg0-of~e.24 (t2 / tipple-01~e.12) :arg1-of (f / find-01~e.16 :arg0 h) :arg1-of (s2 / settle-down-04~e.17 :manner (s3 / silent~e.20) :location~e.18 (b / before~e.21 :op1 (a2 / and~e.27 :op1 (b2 / bottle~e.26 :arg1-of (e / empty-02~e.25) :arg1-of (c / collect-01~e.30)) :op2 (b3 / bottle~e.33 :mod (f2 / full~e.32) :arg1-of (c2 / collect-01~e.30)))))))

# "_0 i_1 am_2 drinking_3 ,_4 "_5 replied_6 the_7 tippler_8 ,_9 with_10 a_11 lugubrious_12 air_13 ._14
(r / reply-01~e.6 :arg0 (p / person~e.13 :arg0-of~e.8 (t / tipple-01~e.8)) :arg2 (d / drink-01~e.3 :arg0 p) :manner~e.10 (l / lugubrious~e.12))

# "_0 why_1 are_2 you_3 drinking_4 ?_5 "_6 demanded_7 the_8 little_9 prince_10 ._11
(d / demand-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (c / cause-01~e.1 :arg0 (a / amr-unknown~e.5) :arg1 (d2 / drink-01~e.4 :arg0 (y / you~e.3))))

# "_0 so_1 that_2 i_3 may_4 forget_5 ,_6 "_7 replied_8 the_9 tippler_10 ._11
(r / reply-01~e.8 :arg0 (p / person~e.3 :arg0-of~e.10 (t / tipple-01~e.10)) :arg2 (c / cause-01~e.1 :arg0 (p2 / possible-01~e.4 :arg1 (f / forget-01~e.5 :arg0 p))))

# "_0 forget_1 what_2 ?_3 "_4 inquired_5 the_6 little_7 prince_8 ,_9 who_10 already_11 was_12 sorry_13 for_14 him_15 ._16
(i / inquire-01~e.5 :arg0 (p / prince~e.8 :mod (l / little~e.7) :arg1-of (s / sorry-01~e.13 :arg2 (h / he~e.15) :time (a2 / already~e.11))) :arg1 (f / forget-01~e.1 :arg0 h :arg1 (a / amr-unknown~e.2)) :arg2 h)

# "_0 forget_1 that_2 i_3 am_4 ashamed_5 ,_6 "_7 the_8 tippler_9 confessed_10 ,_11 hanging_12 his_13 head_14 ._15
(c / confess-01~e.10 :arg0 (p / person~e.3 :arg0-of~e.9 (t / tipple-01~e.9) :arg0-of~e.9 (h / hang-01~e.12 :arg1 (h2 / head~e.14 :part-of~e.13 p))) :arg1 (f / forget-01~e.1 :arg0 p :arg1 (s / shame-01~e.5 :arg1 p)))

# "_0 ashamed_1 of_2 what_3 ?_4 "_5 insisted_6 the_7 little_8 prince_9 ,_10 who_11 wanted_12 to_13 help_14 him_15 ._16
(i / insist-01~e.6 :arg0 (p / prince~e.9 :mod (l / little~e.8) :arg0-of (w / want-01~e.12 :arg1 (h / help-01~e.14 :arg0 p :arg1 (h2 / he~e.15)))) :arg1 (a / amr-unknown~e.4 :arg0-of (s / shame-01~e.1)))

# "_0 ashamed_1 of_2 drinking_3 !_4 "_5
(s / shame-01~e.1 :arg0 (d / drink-01~e.3))

# the_0 tippler_1 brought_2 his_3 speech_4 to_5 an_6 end_7 ,_8 and_9 shut_10 himself_11 up_12 in_13 an_14 impregnable_15 silence_16 ._17
(a / and~e.9 :op1 (e / end-01~e.7 :arg0 (p / person~e.2 :arg0-of~e.3 (t / tipple-01~e.1)) :arg1 (s / speak-01~e.4 :arg0 p)) :op2 (s2 / shut-up-06~e.10 :arg0 p :arg1 p :manner (s3 / silent~e.16 :mod (p2 / pregnable~e.15 :polarity -) :domain~e.11 p)))

# and_0 the_1 little_2 prince_3 went_4 away_5 ,_6 puzzled_7 ._8
(a / and~e.0 :op2 (g / go-02~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2) :arg1-of (p2 / puzzle-01~e.7)) :direction (a2 / away~e.5)))

# "_0 the_1 grown_2 -_3 ups_4 are_5 certainly_6 very_7 ,_8 very_9 odd_10 ,_11 "_12 he_13 said_14 to_15 himself_16 ,_17 as_18 he_19 continued_20 on_21 his_22 journey_23 ._24
(s / say-01~e.14 :arg0 (h / he~e.13) :arg1 (o / odd~e.10 :degree (v / very~e.9 :degree (v2 / very~e.7)) :domain~e.16 (g / grown-up~e.2) :mod (c / certain~e.6)) :arg2 h :time~e.18 (c2 / continue-01~e.20 :arg0 h :arg1 (j / journey-01~e.23 :arg0 h)))

# chapter_0 13_1 ._2
(c / chapter~e.0 :mod 13~e.1)

# the_0 fourth_1 planet_2 belonged_3 to_4 a_5 businessman_6 ._7
(b / belong-01~e.3 :arg0 (p / planet~e.2 :ord~e.4 (o / ordinal-entity~e.5 :value 4~e.1)) :arg1 (b3 / businessman~e.6))

# this_0 man_1 was_2 so_3 much_4 occupied_5 that_6 he_7 did_8 not_9 even_10 raise_11 his_12 head_13 at_14 the_15 little_16 prince_17 's_18 arrival_19 ._20
(o / occupy-01~e.5 :arg1 (m / man~e.1 :mod (t / this~e.0)) :degree (m2 / much~e.4 :degree (s / so~e.3)) :arg0-of (c / cause-01~e.6 :arg1 (r / raise-01~e.11 :arg0 m :arg1 (h / head~e.13 :part-of~e.12 m) :polarity~e.9 -~e.8 :time~e.10 (a / arrive-01~e.19 :arg1 (p / prince~e.17 :mod (l / little~e.16))))))

# "_0 good_1 morning_2 ,_3 "_4 the_5 little_6 prince_7 said_8 to_9 him_10 ._11
(s / say-01~e.8 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg1 (m / morning~e.2 :arg1-of (g / good-02~e.1)) :arg2 (h / he~e.10))

# "_0 your_1 cigarette_2 has_3 gone_4 out_5 ._6 "_7
(g / go-out-18~e.4 :arg1 (c / cigarette~e.2 :poss~e.1 (y / you~e.1)))

# "_0 three_1 and_2 two_3 make_4 five_5 ._6
(e / equal-01~e.4 :arg1 (s / sum-of~e.2 :op1 3~e.1 :op2 2~e.3) :arg2 5~e.5)

# five_0 and_1 seven_2 make_3 twelve_4 ._5
(e / equal-01~e.3 :arg1 (s / sum-of~e.1 :op1 5~e.0 :op2 7~e.2) :arg2 12~e.4)

# twelve_0 and_1 three_2 make_3 fifteen_4 ._5
(e / equal-01~e.3 :arg1 (s / sum-of~e.1 :op1 12~e.0 :op2 3~e.2) :arg2 15~e.4)

# good_0 morning_1 ._2
(m / morning~e.1 :arg1-of (g / good-02~e.0))

# fifteen_0 and_1 seven_2 make_3 twenty_4 -_5 two_6 ._7
(e / equal-01~e.3 :arg1 (s / sum-of~e.1 :op1 15~e.0 :op2 7~e.2) :arg2 22~e.4)

# twenty_0 -_1 two_2 and_3 six_4 make_5 twenty_6 -_7 eight_8 ._9
(e / equal-01~e.0 :arg1 (s / sum-of~e.3 :op1 22~e.2 :op2 6~e.4) :arg2 28~e.8)

# i_0 have_1 n't_2 time_3 to_4 light_5 it_6 again_7 ._8
(h / have-03~e.1 :arg0 (i / i~e.0) :arg1 (t / time~e.3 :purpose~e.4 (l / light-04~e.5 :arg0 i :arg1 (i2 / it~e.6) :mod (a / again~e.7))) :polarity~e.2 -)

# twenty_0 -_1 six_2 and_3 five_4 make_5 thirty_6 -_7 one_8 ._9
(e / equal-01~e.0 :arg1 (s / sum-of~e.3 :op1 26~e.2 :op2 5~e.4) :arg2 31~e.6)

# phew_0 !_1
(p / phew~e.0 :mode~e.1 expressive~e.1)

# then_0 that_1 makes_2 five_3 -_4 hundred_5 -_6 and_7 -_8 one_9 -_10 million_11 ,_12 six_13 -_14 hundred_15 -_16 twenty_17 -_18 two_19 -_20 thousand_21 ,_22 seven_23 -_24 hundred_25 -_26 thirty_27 -_28 one_29 ._30 "_31
(e / equal-01~e.2 :arg1 501622731~e.5 :arg2 (t / that~e.1))

# "_0 five_1 hundred_2 million_3 what_4 ?_5 "_6 asked_7 the_8 little_9 prince_10 ._11
(a / ask-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (a2 / amr-unknown~e.4 :quant 500000000~e.1))

# "_0 eh_1 ?_2
(e / eh~e.1 :mode expressive~e.1 :mode interrogative~e.2)

# are_0 you_1 still_2 there_3 ?_4
(b / be-located-at-91~e.2 :arg1 (y / you~e.1) :arg2 (t / there~e.3) :mode interrogative~e.4 :mod (s / still~e.2))

# five_0 -_1 hundred_2 -_3 and_4 -_5 one_6 million_7 -_8 -_9 i_10 can_11 n't_12 stop_13 ..._14
(a / and~e.4 :op1 501000000~e.7 :op2 (p / possible-01~e.11 :arg1 (s / stop-01~e.13 :arg0 (i / i~e.10)) :polarity~e.12 -))

# i_0 have_1 so_2 much_3 to_4 do_5 !_6
(o / obligate-01~e.1 :arg1 (i / i~e.0) :arg2 (d / do-02~e.5 :arg1 (m / much~e.3 :degree (s / so~e.2))))

# i_0 am_1 concerned_2 with_3 matters_4 of_5 consequence_6 ._7
(c / concern-01~e.2 :arg0 (m / matter~e.4 :mod (c2 / consequence~e.6)) :arg1 (i / i~e.0))

# i_0 do_1 n't_2 amuse_3 myself_4 with_5 balderdash_6 ._7
(a / amuse-01~e.3 :arg0 (i / i~e.0) :arg1 i :arg2 (b / balderdash~e.6) :polarity~e.2 -~e.1)

# two_0 and_1 five_2 make_3 seven_4 ..._5 "_6
(e / equal-01~e.3 :arg1 7~e.4 :arg2 (s / sum-of~e.1 :op1 2~e.0 :op2 5~e.2))

# "_0 five_1 -_2 hundred_3 -_4 and_5 -_6 one_7 million_8 what_9 ?_10 "_11 repeated_12 the_13 little_14 prince_15 ,_16 who_17 never_18 in_19 his_20 life_21 had_22 let_23 go_24 of_25 a_26 question_27 once_28 he_29 had_30 asked_31 it_32 ._33
(r / repeat-01~e.12 :arg0 (p / prince~e.15 :mod (l / little~e.14) :arg0-of (l2 / let-01~e.23 :polarity~e.18 -~e.18 :arg1 (g / go-02~e.24 :arg0 (t / thing~e.9 :arg1-of~e.27 (q / question-01~e.27 :arg0 p))) :time~e.19 (l3 / live-01~e.21 :arg0 p) :time~e.19 (a2 / ask-01~e.31 :arg0 p :arg1 t) :time~e.19 (e / ever~e.18))) :arg1 (a / amr-unknown~e.10 :quant 501000000~e.3))

# the_0 businessman_1 raised_2 his_3 head_4 ._5
(r / raise-01~e.2 :arg0 (b / businessman~e.1) :arg1 (h / head~e.4 :part-of~e.3 b))

# "_0 during_1 the_2 fifty_3 -_4 four_5 years_6 that_7 i_8 have_9 inhabited_10 this_11 planet_12 ,_13 i_14 have_15 been_16 disturbed_17 only_18 three_19 times_20 ._21
(d / disturb-01~e.17 :arg1 (i / i~e.8) :arg1-of~e.20 (h / have-frequency-91~e.15 :arg2 3~e.19 :mod (o / only~e.18)) :time (i2 / inhabit-01~e.10 :arg0 i :arg1 (p / planet~e.12 :mod (t / this~e.11)) :duration~e.9 (t2 / temporal-quantity :quant 54~e.1 :unit (y / year~e.6))))

# the_0 first_1 time_2 was_3 twenty_4 -_5 two_6 years_7 ago_8 ,_9 when_10 some_11 giddy_12 goose_13 fell_14 from_15 goodness_16 knows_17 where_18 ._19
(b / be-temporally-at-91~e.10 :arg1 (d / disturb-01~e.15 :ord~e.1 (o / ordinal-entity~e.2 :value 1)) :arg2 (b2 / before~e.8 :op1 (n / now~e.7) :quant (t4 / temporal-quantity :quant 22~e.4 :unit (y2 / year~e.7)) :time-of~e.10 (f3 / fall-01~e.14 :arg1 (g4 / goose~e.13 :mod (g5 / giddy~e.12) :mod (s2 / some~e.11)) :arg3~e.15 (l / location~e.18 :arg1-of (k2 / know-01~e.17 :arg0 (g6 / goodness~e.16))))))

# he_0 made_1 the_2 most_3 frightful_4 noise_5 that_6 resounded_7 all_8 over_9 the_10 place_11 ,_12 and_13 i_14 made_15 four_16 mistakes_17 in_18 my_19 addition_20 ._21
(a / and~e.13 :op1 (m / make-01~e.1 :arg0 (h / he~e.0) :arg1 (n / noise~e.5 :arg1-of (r / resound-01~e.7 :arg2 (a4 / all-over~e.9 :op1 (p / place~e.11))) :arg0-of (f2 / frighten-01~e.4 :degree (m2 / most~e.3)))) :op1 (m4 / mistake-02~e.17 :quant 4~e.16 :arg0 i :arg1 (a3 / add-02~e.15 :arg0 (i / i~e.14))))

# the_0 second_1 time_2 ,_3 eleven_4 years_5 ago_6 ,_7 i_8 was_9 disturbed_10 by_11 an_12 attack_13 of_14 rheumatism_15 ._16
(d / disturb-01~e.10 :arg0 (a / attack-01~e.13 :arg0 (r / rheumatism~e.15) :arg1 i) :arg1 (i / i~e.8) :time (b / before~e.6 :op1 (n / now~e.5) :quant (t2 / temporal-quantity :quant 11~e.4 :unit (y / year~e.5))) :domain (d2 / disturb-01~e.10 :ord~e.1 (o / ordinal-entity~e.2 :value 2~e.11)))

# i_0 do_1 n't_2 get_3 enough_4 exercise_5 ._6
(e / exercise-02~e.5 :arg0 (i / i~e.0) :degree~e.3 (e2 / enough~e.4 :polarity~e.2 -~e.1))

# i_0 have_1 no_2 time_3 for_4 loafing_5 ._6
(h / have-03~e.1 :arg0 (i / i~e.0) :arg1 (t / time~e.3 :purpose~e.4 (l / loaf-01~e.5 :arg0 i)) :polarity~e.2 -~e.2)

# the_0 third_1 time_2 -_3 -_4 well_5 ,_6 this_7 is_8 it_9 !_10
(d / disturb-01~e.5 :ord~e.1 (o / ordinal-entity~e.2 :value 3~e.10) :domain~e.9 (t / this~e.7))

# i_0 was_1 saying_2 ,_3 then_4 ,_5 five_6 -_7 hundred_8 -_9 and_10 -_11 one_12 millions_13 -_14 -_15 "_16
(s / say-01~e.2 :arg0 (i / i~e.0) :arg1 501000000~e.13)

# "_0 millions_1 of_2 what_3 ?_4 "_5
(a / amr-unknown~e.4 :quant (m / multiple~e.1 :op1 1000000~e.2))

# the_0 businessman_1 suddenly_2 realized_3 that_4 there_5 was_6 no_7 hope_8 of_9 being_10 left_11 in_12 peace_13 until_14 he_15 answered_16 this_17 question_18 ._19
(r / realize-01~e.3 :arg0 (b / businessman~e.1) :arg1 (h / hopeful-03~e.8 :polarity~e.7 -~e.7 :arg1 (l / leave-14~e.11 :arg1 (p / peace~e.13 :domain b)) :time~e.12 (u / until~e.14 :op1 (a / answer-01~e.16 :arg0 b :arg1 (q / question-01~e.18 :arg1 (t / this~e.17))))) :manner (s / sudden~e.2))

# "_0 millions_1 of_2 those_3 little_4 objects_5 ,_6 "_7 he_8 said_9 ,_10 "_11 which_12 one_13 sometimes_14 sees_15 in_16 the_17 sky_18 ._19 "_20
(s / say-01~e.9 :arg0 (h / he~e.8) :arg1 (o / object~e.5 :arg1-of (i / include-91~e.13 :arg2 (o3 / object~e.5 :mod (l / little~e.4) :mod (t2 / that~e.3) :location~e.16 (s4 / sky~e.18) :arg1-of (s2 / see-01~e.15 :arg0 (o2 / one~e.13) :frequency (s3 / sometimes~e.14)))) :quant (m / multiple~e.1 :op1 1000000~e.2)))

# "_0 flies_1 ?_2 "_3
(f / fly~e.1 :mode interrogative~e.2)

# "_0 oh_1 ,_2 no_3 ._4
(n / no~e.3 :mod (o / oh~e.1 :mode expressive~e.3))

# little_0 glittering_1 objects_2 ._3 "_4
(o / object~e.2 :mod (l / little~e.0) :arg0-of (g / glitter-01~e.1))

# "_0 bees_1 ?_2 "_3
(b / bee~e.1 :mode interrogative~e.2)

# "_0 oh_1 ,_2 no_3 ._4
(n / no~e.3 :mod (o / oh~e.1 :mode expressive~e.3))

# little_0 golden_1 objects_2 that_3 set_4 lazy_5 men_6 to_7 idle_8 dreaming_9 ._10
(c / cause-01~e.3 :arg0 (o / object~e.2 :consist-of~e.4 (g / gold~e.1) :mod (l / little~e.0)) :arg1 (d / dream-01~e.9 :arg0 (m / man~e.6 :mod (l2 / lazy~e.5)) :manner (i / idle-01~e.8)))

# as_0 for_1 me_2 ,_3 i_4 am_5 concerned_6 with_7 matters_8 of_9 consequence_10 ._11
(c / concern-01~e.6 :arg0 (m / matter~e.8 :mod (c2 / consequence~e.10)) :arg1 (i / i~e.2))

# there_0 is_1 no_2 time_3 for_4 idle_5 dreaming_6 in_7 my_8 life_9 ._10 "_11
(t2 / time~e.3 :polarity~e.2 -~e.2 :purpose~e.4 (d2 / dream-01~e.6 :manner (i2 / idle~e.5)) :duration~e.4 (l / live-01~e.9 :arg0 (i / i~e.8)))

# "_0 ah_1 !_2
(a / ah~e.1 :mode~e.2 expressive~e.2)

# you_0 mean_1 the_2 stars_3 ?_4 "_5
(m / mean-01~e.1 :mode interrogative~e.4 :arg0 (y / you~e.0) :arg2 (s / star~e.3))

# "_0 yes_1 ,_2 that_3 's_4 it_5 ._6
(t / that-is-it-00~e.3)

# the_0 stars_1 ._2 "_3
(s / star~e.1)

# "_0 and_1 what_2 do_3 you_4 do_5 with_6 five_7 -_8 hundred_9 millions_10 of_11 stars_12 ?_13 "_14
(a / and~e.1 :op2 (d / do-02~e.3 :arg0 (y / you~e.4) :arg1 (a2 / amr-unknown~e.2) :arg3~e.6 (s / star~e.12 :quant 500000000~e.7)))

# "_0 five_1 -_2 hundred_3 -_4 and_5 -_6 one_7 million_8 ,_9 six_10 -_11 hundred_12 -_13 twenty_14 -_15 two_16 thousand_17 ,_18 seven_19 -_20 hundred_21 -_22 thirty_23 -_24 one_25 ._26
(h / have-quant-91~e.23 :arg2 501622731~e.21)

# i_0 am_1 concerned_2 with_3 matters_4 of_5 consequence_6 :_7 i_8 am_9 accurate_10 ._11 "_12
(a / and~e.2 :op1 (c / concern-01~e.2 :arg0 (m / matter~e.4 :mod (c2 / consequence~e.6)) :arg1 (i / i~e.8)) :op2 (a2 / accurate~e.10 :domain i))

# "_0 and_1 what_2 do_3 you_4 do_5 with_6 these_7 stars_8 ?_9 "_10
(a / and~e.1 :op2 (d / do-02~e.3 :arg0 (y / you~e.4) :arg1 (a2 / amr-unknown~e.2) :arg3~e.6 (s / star~e.8 :mod (t / this~e.7))))

# "_0 what_1 do_2 i_3 do_4 with_5 them_6 ?_7 "_8
(d / do-02~e.4 :arg0 (i / i~e.3) :arg1 (a / amr-unknown~e.7) :arg3~e.5 (t / they~e.6))

# "_0 yes_1 ._2 "_3
(y / yes~e.1)

# "_0 nothing_1 ._2
(n / nothing~e.1)

# i_0 own_1 them_2 ._3 "_4
(o / own-01~e.1 :arg0 (i / i~e.0) :arg1 (t / they~e.2))

# "_0 you_1 own_2 the_3 stars_4 ?_5 "_6
(o / own-01~e.2 :arg0 (y / you~e.1) :arg1 (s / star~e.4) :mode interrogative~e.5)

# "_0 yes_1 ._2 "_3
(y / yes~e.1)

# "_0 but_1 i_2 have_3 already_4 seen_5 a_6 king_7 who_8 -_9 -_10 "_11
(c / contrast-01~e.1 :arg2 (s / see-01~e.5 :arg0 (i / i~e.2) :arg1 (k / king~e.7) :time (a / already~e.4)))

# "_0 kings_1 do_2 not_3 own_4 ,_5 they_6 reign_7 over_8 ._9
(c / contrast-01~e.8 :arg1 (o / own-01~e.4 :polarity~e.3 -~e.2 :arg0 (k / king~e.1)) :arg2 (r / reign-01~e.7 :arg0 k))

# it_0 is_1 a_2 very_3 different_4 matter_5 ._6 "_7
(m / matter~e.5 :arg1-of (d / differ-02~e.4 :degree (v / very~e.3)) :domain~e.2 (i / it~e.0))

# "_0 and_1 what_2 good_3 does_4 it_5 do_6 you_7 to_8 own_9 the_10 stars_11 ?_12 "_13
(a / and~e.1 :op2 (c / cause-01~e.4 :arg0 (o / own-01~e.9 :arg1 (s / star~e.11)) :arg1 (g / good-04~e.3 :arg1 (a2 / amr-unknown~e.12) :arg2 (y / you~e.7))))

# "_0 it_1 does_2 me_3 the_4 good_5 of_6 making_7 me_8 rich_9 ._10 "_11
(c / cause-01~e.2 :arg0 (i2 / it~e.1) :arg1 (g / good-04~e.5 :arg1 (m2 / make-02~e.7 :arg1 (r / rich~e.9 :domain i)) :arg2 (i / i~e.8)))

# "_0 and_1 what_2 good_3 does_4 it_5 do_6 you_7 to_8 be_9 rich_10 ?_11 "_12
(a / and~e.1 :op2 (c / cause-01~e.4 :arg0 (r / rich~e.10 :domain~e.5 (y / you~e.7)) :arg1 (g / good-04~e.3 :arg1 (a2 / amr-unknown~e.11) :arg2 y)))

# "_0 it_1 makes_2 it_3 possible_4 for_5 me_6 to_7 buy_8 more_9 stars_10 ,_11 if_12 any_13 are_14 ever_15 discovered_16 ._17 "_18
(p / possible-01~e.4 :arg1 (b / buy-01~e.8 :arg0 (i / i~e.6) :arg1 (s / star~e.10 :degree (m / more~e.9))) :condition~e.12 (d / discover-01~e.16 :arg1 s :time (e / ever~e.15)))

# "_0 this_1 man_2 ,_3 "_4 the_5 little_6 prince_7 said_8 to_9 himself_10 ,_11 "_12 reasons_13 a_14 little_15 like_16 my_17 poor_18 tippler_19 ..._20 "_21
(s / say-01~e.8 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg1 (r / reason-01~e.13 :arg0 (m / man~e.2 :mod (t2 / this~e.1)) :arg1-of (r2 / resemble-01~e.16 :arg2 (r3 / reason-01~e.13 :arg0 (p2 / person~e.10 :arg0-of~e.19 (t / tipple-01~e.19) :mod (p3 / poor~e.18) :poss~e.17 p)) :degree (l2 / little~e.15))) :arg2 p)

# nevertheless_0 ,_1 he_2 still_3 had_4 some_5 more_6 questions_7 ._8
(h3 / have-concession-91~e.0 :arg1 (h / have-03~e.4 :arg0 (h2 / he~e.2) :arg1 (t / thing :degree (m / more~e.6) :mod (s / some~e.5) :arg1-of (q / question-01~e.7)) :mod (s2 / still~e.3)))

# "_0 how_1 is_2 it_3 possible_4 for_5 one_6 to_7 own_8 the_9 stars_10 ?_11 "_12
(p / possible-01~e.4 :arg1 (o / own-01~e.8 :arg0 (o2 / one~e.6) :arg1 (s / star~e.10)) :manner~e.1 (a / amr-unknown~e.11))

# "_0 to_1 whom_2 do_3 they_4 belong_5 ?_6 "_7 the_8 businessman_9 retorted_10 ,_11 peevishly_12 ._13
(r / retort-01~e.10 :arg0 (b3 / businessman~e.9) :arg2 (b2 / belong-01~e.5 :arg0 (t / they~e.4) :arg1 (a / amr-unknown~e.6)) :manner (p / peevish~e.12))

# "_0 i_1 do_2 n't_3 know_4 ._5
(k / know-01~e.4 :arg0 (i / i~e.1) :polarity~e.3 -~e.2)

# to_0 nobody_1 ._2 "_3
(b / belong-01~e.0 :arg1 (n / nobody~e.1))

# "_0 then_1 they_2 belong_3 to_4 me_5 ,_6 because_7 i_8 was_9 the_10 first_11 person_12 to_13 think_14 of_15 it_16 ._17 "_18
(b / belong-01~e.3 :arg0 (t / they~e.2) :arg1 (i / i~e.5) :arg1-of (c / cause-01~e.7 :arg0 (p / person~e.12 :ord~e.11 (o / ordinal-entity~e.11 :value 1) :domain i :arg0-of~e.15 (t2 / think-01~e.14 :arg2 (i2 / it~e.16)))))

# "_0 is_1 that_2 all_3 that_4 is_5 necessary_6 ?_7 "_8
(a / all~e.3 :mode~e.4 interrogative~e.7 :domain (t2 / that~e.2) :arg1-of (n / need-01~e.6))

# "_0 certainly_1 ._2
(c / certain~e.1)

# when_0 you_1 find_2 a_3 diamond_4 that_5 belongs_6 to_7 nobody_8 ,_9 it_10 is_11 yours_12 ._13
(b / belong-01~e.0 :arg0 d :arg1 (y / you~e.12) :condition~e.10 (f / find-01~e.2 :arg0 y :arg1 (d / diamond~e.4 :arg0-of (b2 / belong-01~e.6 :arg1 (n / nobody~e.8)))))

# when_0 you_1 discover_2 an_3 island_4 that_5 belongs_6 to_7 nobody_8 ,_9 it_10 is_11 yours_12 ._13
(b / belong-01~e.0 :arg0 i :arg1 (y / you~e.12) :condition~e.0 (d / discover-01~e.2 :arg0 y :arg1 (i / island~e.4 :arg0-of (b2 / belong-01~e.6 :arg1 (n / nobody~e.8)))))

# when_0 you_1 get_2 an_3 idea_4 before_5 any_6 one_7 else_8 ,_9 you_10 take_11 out_12 a_13 patent_14 on_15 it_16 :_17 it_18 is_19 yours_20 ._21
(a / and~e.12 :op1 (p / patent-01~e.14 :arg0 y :arg1 i) :op2 (b2 / belong-01~e.0 :arg0 i :arg1 (y / you~e.10)) :condition~e.0 (g / get-01~e.2 :arg0 y :arg1 (i / idea~e.4) :time (b / before~e.5 :op1 (a3 / anyone~e.6 :mod (e / else~e.8)))))

# so_0 with_1 me_2 :_3 i_4 own_5 the_6 stars_7 ,_8 because_9 nobody_10 else_11 before_12 me_13 ever_14 thought_15 of_16 owning_17 them_18 ._19 "_20
(c / cause-01~e.0 :arg0 (t / think-01~e.15 :arg0 (n / nobody~e.10 :mod (e2 / else~e.11)) :arg1 (o / own-01~e.5 :arg0 n :arg1 (s / star~e.7)) :time (e / ever~e.14) :time (b / before~e.12 :op1 (i / i~e.13))) :arg1 (o2 / own-01~e.5 :arg0 i :arg1 s) :arg1-of (r / resemble-01~e.1 :beneficiary~e.17 i))

# "_0 yes_1 ,_2 that_3 is_4 true_5 ,_6 "_7 said_8 the_9 little_10 prince_11 ._12
(s / say-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (t / true-01~e.5 :arg1 (t2 / that~e.3)))

# "_0 and_1 what_2 do_3 you_4 do_5 with_6 them_7 ?_8 "_9
(a / and~e.1 :op2 (d / do-02~e.5 :arg0 (y / you~e.4) :arg1 (a2 / amr-unknown~e.8) :arg2 (t / they~e.7)))

# "_0 i_1 administer_2 them_3 ,_4 "_5 replied_6 the_7 businessman_8 ._9
(r / reply-01~e.6 :arg0 (b / businessman~e.8) :arg2 (a / administer-01~e.2 :arg0 b :arg1 (t / they~e.3)))

# "_0 i_1 count_2 them_3 and_4 recount_5 them_6 ._7
(a / and~e.4 :op1 (c / count-01~e.2 :arg0 (i / i~e.1) :arg1 (t / they~e.6)) :op2 (r2 / recount-01~e.5 :arg0 i :arg1 t))

# it_0 is_1 difficult_2 ._3
(d / difficult~e.2 :domain~e.0 (i / it~e.0))

# but_0 i_1 am_2 a_3 man_4 who_5 is_6 naturally_7 interested_8 in_9 matters_10 of_11 consequence_12 ._13 "_14
(c / contrast-01~e.0 :arg2 (m / man~e.4 :domain~e.3 (i / i~e.1) :arg1-of (i2 / interest-01~e.8 :arg2 (m2 / matter~e.10 :mod (c2 / consequence~e.12)) :arg1-of (n / natural-02~e.7 :arg2 i))))

# the_0 little_1 prince_2 was_3 still_4 not_5 satisfied_6 ._7
(s / satisfy-01~e.6 :arg1 (p / prince~e.2 :mod (l / little~e.1)) :mod (s2 / still~e.4) :polarity~e.5 -~e.5)

# "_0 if_1 i_2 owned_3 a_4 silk_5 scarf_6 ,_7 "_8 he_9 said_10 ,_11 "_12 i_13 could_14 put_15 it_16 around_17 my_18 neck_19 and_20 take_21 it_22 away_23 with_24 me_25 ._26
(s / say-01~e.10 :arg0 (h / he~e.9) :arg1 (p / possible-01~e.14 :arg1 (a2 / and~e.20 :op1 (p2 / put-01~e.15 :arg0 h :arg1 (s2 / scarf~e.6 :consist-of~e.16 (s3 / silk~e.5)) :arg2 (a / around~e.17 :op1 (n / neck~e.19 :part-of~e.18 h))) :op2 (t / take-away-05~e.21 :arg0 h :arg1 s2 :accompanier~e.23 h)) :condition~e.1 (o / own-01~e.3 :arg0 h :arg1 s2)))

# if_0 i_1 owned_2 a_3 flower_4 ,_5 i_6 could_7 pluck_8 that_9 flower_10 and_11 take_12 it_13 away_14 with_15 me_16 ._17
(p / possible-01~e.7 :arg1 (a / and~e.11 :op1 (p2 / pluck-01~e.8 :arg0 (i / i~e.16) :arg1 (f2 / flower~e.4 :mod (t / that~e.9))) :op2 (t2 / take-away-05~e.12 :arg0 i :arg1 f2 :accompanier~e.14 i)) :condition~e.0 (o / own-01~e.2 :arg0 i :arg1 f2))

# but_0 you_1 can_2 not_3 pluck_4 the_5 stars_6 from_7 heaven_8 ..._9 "_10
(c / contrast-01~e.0 :arg2 (p2 / possible-01~e.2 :polarity~e.3 -~e.3 :arg1 (p / pluck-01~e.4 :arg0 (y / you~e.1) :arg1 (s / star~e.6) :arg2 (h / heaven~e.8))))

# "_0 no_1 ._2
(n / no~e.1)

# but_0 i_1 can_2 put_3 them_4 in_5 the_6 bank_7 ._8 "_9
(c / contrast-01~e.0 :arg2 (p2 / possible-01~e.2 :arg1 (p / put-01~e.3 :arg0 (i / i~e.1) :arg1 (t / they~e.4) :arg2 (b / bank~e.7))))

# "_0 whatever_1 does_2 that_3 mean_4 ?_5 "_6
(m / mean-01~e.4 :arg1 (t / that~e.3) :arg2 (a / amr-unknown~e.5))

# "_0 that_1 means_2 that_3 i_4 write_5 the_6 number_7 of_8 my_9 stars_10 on_11 a_12 little_13 paper_14 ._15
(m / mean-01~e.2 :arg1 (t / that~e.3) :arg2 (w / write-01~e.5 :arg0 (i / i~e.4) :arg1 (n / number~e.7 :quant-of~e.8 (s / star~e.10 :poss~e.9 i)) :location~e.11 (p / paper~e.14 :mod (l / little~e.13))))

# and_0 then_1 i_2 put_3 this_4 paper_5 in_6 a_7 drawer_8 and_9 lock_10 it_11 with_12 a_13 key_14 ._15 "_16
(a / and~e.0 :op2 (a2 / and~e.9 :op1 (p / put-01~e.3 :arg0 (i / i~e.2) :arg1 (p2 / paper~e.5 :mod (t2 / this~e.4)) :arg2 (d / drawer~e.8)) :op2 (l / lock-01~e.10 :arg0 i :arg1 d :arg3~e.12 (k / key~e.14))) :time (t / then~e.1))

# "_0 and_1 that_2 is_3 all_4 ?_5 "_6
(a / and~e.1 :op2 (a2 / all~e.4 :domain (t / that~e.2)) :mode interrogative~e.5)

# "_0 that_1 is_2 enough_3 ,_4 "_5 said_6 the_7 businessman_8 ._9
(s / say-01~e.6 :arg0 (b2 / businessman~e.8) :arg1 (e / enough~e.3 :domain (t / that~e.1)))

# "_0 it_1 is_2 entertaining_3 ,_4 "_5 thought_6 the_7 little_8 prince_9 ._10
(t / think-01~e.6 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (e / entertain-01~e.3 :arg0 (i / it~e.1)))

# "_0 it_1 is_2 rather_3 poetic_4 ._5
(p / poetry~e.4 :domain~e.1 (i / it~e.1) :degree (r / rather~e.3))

# but_0 it_1 is_2 of_3 no_4 great_5 consequence_6 ._7 "_8
(c / contrast-01~e.0 :arg2 (c2 / consequence~e.6 :domain~e.1 (i / it~e.1) :mod (g / great~e.5 :polarity~e.4 -~e.4)))

# on_0 matters_1 of_2 consequence_3 ,_4 the_5 little_6 prince_7 had_8 ideas_9 which_10 were_11 very_12 different_13 from_14 those_15 of_16 the_17 grown_18 -_19 ups_20 ._21
(h / have-03~e.8 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg1 (i / idea~e.9 :topic~e.2 (m / matter~e.1 :mod (c / consequence~e.3)) :arg1-of (d / differ-02~e.13 :arg2 (i2 / idea~e.15 :poss~e.0 (g / grown-up~e.18)) :degree (v / very~e.12))))

# "_0 i_1 myself_2 own_3 a_4 flower_5 ,_6 "_7 he_8 continued_9 his_10 conversation_11 with_12 the_13 businessman_14 ,_15 "_16 which_17 i_18 water_19 every_20 day_21 ._22
(c / continue-02~e.9 :arg0 (h / he~e.8) :arg1 (o / own-01~e.3 :arg0 h :arg1 (f2 / flower~e.5 :arg1-of (w / water-01~e.19 :arg0 h :frequency~e.20 (r / rate-entity-91~e.20 :arg3~e.2 (t / temporal-quantity :quant 1 :unit (d / day~e.21)))))) :arg2 (b / businessman~e.14) :arg3~e.12 (c2 / converse-01~e.11 :arg0 h :arg2 b))

# i_0 own_1 three_2 volcanoes_3 ,_4 which_5 i_6 clean_7 out_8 every_9 week_10 (_11 for_12 i_13 also_14 clean_15 out_16 the_17 one_18 that_19 is_20 extinct_21 ;_22 one_23 never_24 knows_25 )_26 ._27
(o / own-01~e.1 :arg0 (i / i~e.0) :arg1 (v / volcano~e.3 :quant 3~e.2 :arg1-of (c / clean-out-03~e.7 :arg0 i :frequency~e.8 (r / rate-entity-91~e.9 :arg3~e.12 (t / temporal-quantity :quant 1~e.18 :unit (w / week~e.10))) :arg1-of (c2 / cause-01~e.12 :arg0 (c3 / clean-out-03~e.7 :arg0 i :arg1 (v2 / volcano~e.3 :mod (e / extinct~e.21) :arg1-of~e.19 (i2 / include-91~e.23 :arg2 v)) :mod (a / also~e.14) :arg1-of (c4 / cause-01 :arg0 (k / know-01~e.25 :polarity~e.24 -~e.24 :arg0 (o2 / one~e.23))))))))

# it_0 is_1 of_2 some_3 use_4 to_5 my_6 volcanoes_7 ,_8 and_9 it_10 is_11 of_12 some_13 use_14 to_15 my_16 flower_17 ,_18 that_19 i_20 own_21 them_22 ._23
(c / cause-01~e.19 :arg0 (o / own-01~e.21 :arg0 (i / i~e.20) :arg1 (a / and~e.9 :op1 v :op2 f2)) :arg1 (u / use-01~e.14 :beneficiary~e.22 (a2 / and~e.9 :op1 (v / volcano~e.7 :poss~e.6 i) :op2 (f2 / flower~e.17 :poss~e.16 i)) :degree (s / some~e.13)))

# but_0 you_1 are_2 of_3 no_4 use_5 to_6 the_7 stars_8 ..._9 "_10
(c / contrast-01~e.0 :arg2 (u / use-01~e.5 :polarity~e.4 -~e.4 :arg0 (s / star~e.8) :arg1 (y / you~e.1)))

# the_0 businessman_1 opened_2 his_3 mouth_4 ,_5 but_6 he_7 found_8 nothing_9 to_10 say_11 in_12 answer_13 ._14
(c / contrast-01~e.6 :arg1 (o / open-01~e.2 :arg0 (b / businessman~e.1) :arg1 (m / mouth~e.4 :part-of~e.3 b)) :arg2 (f / find-01~e.8 :arg0 b :arg1 (a / answer-01~e.13 :polarity~e.9 -~e.11)))

# and_0 the_1 little_2 prince_3 went_4 away_5 ._6
(a / and~e.0 :op2 (g / go-02~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2)) :direction (a2 / away~e.5)))

# "_0 the_1 grown_2 -_3 ups_4 are_5 certainly_6 altogether_7 extraordinary_8 ,_9 "_10 he_11 said_12 simply_13 ,_14 talking_15 to_16 himself_17 as_18 he_19 continued_20 on_21 his_22 journey_23 ._24
(s / say-01~e.12 :arg0 (h / he~e.11 :arg0-of (t / talk-01~e.15 :arg2 h :time~e.18 (c2 / continue-01~e.20 :arg0 h :arg1 (j / journey-01~e.23 :arg0 h)))) :arg1 (e / extraordinary~e.8 :domain~e.17 (g2 / grown-up~e.2) :mod (c / certain~e.6) :degree (a / altogether~e.7)) :arg1-of (s2 / simple-02~e.13))

# chapter_0 14_1 ._2
(c / chapter~e.0 :mod 14~e.1)

# the_0 fifth_1 planet_2 was_3 very_4 strange_5 ._6
(s / strange~e.5 :degree (v / very~e.4) :domain (p / planet~e.2 :ord~e.1 (o / ordinal-entity~e.1 :value 5~e.1)))

# it_0 was_1 the_2 smallest_3 of_4 all_5 ._6
(s / small~e.3 :compared-to~e.4 (a / all~e.5) :degree (m / most~e.5) :domain~e.0 (i / it~e.0))

# there_0 was_1 just_2 enough_3 room_4 on_5 it_6 for_7 a_8 street_9 lamp_10 and_11 a_12 lamplighter_13 ._14
(a2 / accommodate-01~e.5 :arg0 (i / it~e.6) :arg1 (a / and~e.11 :op1 (l / lamp~e.10 :mod (s / street~e.9)) :op2 (p / person~e.0 :arg0-of (l2 / light-04 :arg1 (l3 / lamp~e.13)))) :extent~e.4 (e / enough~e.3 :mod (j / just~e.2)))

# the_0 little_1 prince_2 was_3 not_4 able_5 to_6 reach_7 any_8 explanation_9 of_10 the_11 use_12 of_13 a_14 street_15 lamp_16 and_17 a_18 lamplighter_19 ,_20 somewhere_21 in_22 the_23 heavens_24 ,_25 on_26 a_27 planet_28 which_29 had_30 no_31 people_32 ,_33 and_34 not_35 one_36 house_37 ._38
(p / possible-01~e.5 :polarity~e.4 -~e.4 :arg1 (e / explain-01~e.9 :arg0 (p2 / prince~e.2 :mod (l / little~e.1)) :arg1 (u / use-01~e.12 :arg1 (a / and~e.17 :op1 (l2 / lamp~e.16 :mod (s / street~e.15)) :op2 (p3 / person~e.7 :arg0-of~e.10 (l3 / light-04~e.7 :arg1 (l4 / lamp~e.19))) :location (r / relative-position~e.21 :op1 (h / heaven~e.24) :location~e.26 (p4 / planet~e.28 :arg0-of (h2 / have-03~e.30 :polarity~e.35 -~e.35 :arg1 (a2 / and~e.34 :op1 (p5 / person~e.32) :op2 (h3 / house~e.37)))))))))

# but_0 he_1 said_2 to_3 himself_4 ,_5 nevertheless_6 :_7 "_8 it_9 may_10 well_11 be_12 that_13 this_14 man_15 is_16 absurd_17 ._18
(h2 / have-concession-91~e.0 :arg1 (s / say-01~e.2 :arg0 (h / he~e.1) :arg1 (p / possible-01~e.3 :arg1 (a / absurd~e.17 :domain~e.4 (m / man~e.15 :mod (t / this~e.14)))) :arg2 h))

# but_0 he_1 is_2 not_3 so_4 absurd_5 as_6 the_7 king_8 ,_9 the_10 conceited_11 man_12 ,_13 the_14 businessman_15 ,_16 and_17 the_18 tippler_19 ._20
(c / contrast-01~e.0 :arg2 (a / absurd~e.5 :polarity~e.3 -~e.3 :domain (h / he~e.1) :compared-to~e.6 (a2 / and~e.17 :op1 (k / king~e.8) :op2 (m / man~e.12 :mod (c2 / conceit~e.11)) :op3 (b2 / businessman~e.15) :op4 (p / person~e.19 :arg0-of~e.19 (t / tipple-01~e.19))) :degree (e / equal~e.6)))

# for_0 at_1 least_2 his_3 work_4 has_5 some_6 meaning_7 ._8
(c / cause-01~e.0 :arg0 (m / mean-01~e.7 :arg1 (w / work-01~e.4 :arg0 (h / he~e.3)) :degree (s / some~e.6) :mod (a / at-least~e.2)))

# when_0 he_1 lights_2 his_3 street_4 lamp_5 ,_6 it_7 is_8 as_9 if_10 he_11 brought_12 one_13 more_14 star_15 to_16 life_17 ,_18 or_19 one_20 flower_21 ._22
(l2 / light-04~e.2 :arg0 h :arg1 (l3 / lamp~e.5 :mod (s2 / street~e.4) :poss~e.3 h) :arg1-of (r / resemble-01~e.9 :arg2 (b / bring-01~e.12 :arg0 (h / he~e.11) :arg1 (o / or~e.19 :op1 (s / star~e.15 :quant 1~e.13 :mod (m / more~e.14)) :op2 (f2 / flower~e.21)) :arg3~e.16 (l / live-01~e.17))))

# when_0 he_1 puts_2 out_3 his_4 lamp_5 ,_6 he_7 sends_8 the_9 flower_10 ,_11 or_12 the_13 star_14 ,_15 to_16 sleep_17 ._18
(s / send-02~e.8 :arg0 (h / he~e.7) :arg1 (o / or~e.12 :op1 (f2 / flower~e.10) :op2 (s3 / star~e.14)) :arg2 (s2 / sleep-01~e.17 :arg0 o) :time~e.0 (p / put-out-09~e.2 :arg0 h :arg1 (l / lamp~e.5 :poss~e.4 h)))

# that_0 is_1 a_2 beautiful_3 occupation_4 ._5
(o / occupation~e.4 :arg1-of (b / beautiful-02~e.3) :domain~e.2 (t / that~e.0))

# and_0 since_1 it_2 is_3 beautiful_4 ,_5 it_6 is_7 truly_8 useful_9 ._10 "_11
(a / and~e.0 :op2 (c / cause-01~e.1 :arg0 (b / beautiful-02~e.4 :arg1 (i / it~e.2)) :arg1 (u / useful-05~e.9 :arg1 i :degree (t / truly~e.8))))

# when_0 he_1 arrived_2 on_3 the_4 planet_5 he_6 respectfully_7 saluted_8 the_9 lamplighter_10 ._11
(s / salute-01~e.8 :arg0 (h / he~e.6) :arg1 (p / person :arg0-of (l / light-04 :arg1 (l2 / lamp~e.10))) :manner (r / respect-01~e.7) :time~e.0 (a / arrive-01~e.2 :arg1 h :arg4~e.3 (p2 / planet~e.5)))

# "_0 good_1 morning_2 ._3
(m / morning~e.2 :arg1-of (g / good-02~e.1))

# why_0 have_1 you_2 just_3 put_4 out_5 your_6 lamp_7 ?_8 "_9
(c / cause-01~e.0 :arg0 (a / amr-unknown~e.8) :arg1 (p / put-out-09~e.4 :arg0 (y / you~e.2) :arg1 (l / lamp~e.7 :poss~e.6 y) :mod (j / just~e.3)))

# "_0 those_1 are_2 the_3 orders_4 ,_5 "_6 replied_7 the_8 lamplighter_9 ._10
(r / reply-01~e.7 :arg0 (p / person~e.1 :arg0-of~e.1 (l / light-04~e.1 :arg1 (l2 / lamp~e.9))) :arg2 (o / order-01~e.4 :arg2 (t / that~e.1)))

# "_0 good_1 morning_2 ._3 "_4
(m / morning~e.2 :arg1-of (g / good-02~e.1))

# "_0 what_1 are_2 the_3 orders_4 ?_5 "_6
(o / order-01~e.4 :arg2 (a / amr-unknown~e.5))

# "_0 the_1 orders_2 are_3 that_4 i_5 put_6 out_7 my_8 lamp_9 ._10
(o / order-01~e.2 :arg2 (p / put-out-09~e.6 :arg0 (i / i~e.5) :arg1 (l / lamp~e.9 :poss~e.8 i)))

# good_0 evening_1 ._2 "_3
(e / evening~e.1 :arg1-of (g / good-02~e.0))

# and_0 he_1 lighted_2 his_3 lamp_4 again_5 ._6
(a / and~e.0 :op2 (l / light-04~e.2 :arg0 (h / he~e.1) :arg1 (l2 / lamp~e.4 :poss~e.3 h) :mod (a2 / again~e.5)))

# "_0 but_1 why_2 have_3 you_4 just_5 lighted_6 it_7 again_8 ?_9 "_10
(c / contrast-01~e.1 :arg2 (c2 / cause-01~e.2 :arg0 (a / amr-unknown~e.9) :arg1 (l / light-04~e.6 :arg0 (y / you~e.4) :arg1 (i / it~e.7) :mod (a2 / again~e.8) :mod (j / just~e.5))))

# "_0 those_1 are_2 the_3 orders_4 ,_5 "_6 replied_7 the_8 lamplighter_9 ._10
(r / reply-01~e.7 :arg0 (p / person~e.1 :arg0-of~e.1 (l / light-04~e.1 :arg1 (l2 / lamp~e.9))) :arg2 (o / order-01~e.4 :arg2 (t / that~e.1)))

# "_0 i_1 do_2 not_3 understand_4 ,_5 "_6 said_7 the_8 little_9 prince_10 ._11
(s / say-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (u / understand-01~e.4 :arg0 p :polarity~e.3 -~e.2))

# "_0 there_1 is_2 nothing_3 to_4 understand_5 ,_6 "_7 said_8 the_9 lamplighter_10 ._11
(s / say-01~e.8 :arg0 (p / person~e.1 :arg0-of (l / light-04 :arg1 (l2 / lamp~e.10))) :arg1 (n / nothing~e.3 :arg1-of (u / understand-01~e.5)))

# "_0 orders_1 are_2 orders_3 ._4
(o / order~e.1 :domain (o2 / order~e.3))

# good_0 morning_1 ._2 "_3
(m / morning~e.1 :arg1-of (g / good-02~e.0))

# and_0 he_1 put_2 out_3 his_4 lamp_5 ._6
(a / and~e.0 :op2 (p / put-out-09~e.2 :arg0 (h / he~e.1) :arg1 (l / lamp~e.5 :poss~e.4 h)))

# then_0 he_1 mopped_2 his_3 forehead_4 with_5 a_6 handkerchief_7 decorated_8 with_9 red_10 squares_11 ._12
(m / mop-01~e.2 :arg0 (h / he~e.1) :arg1 (f / forehead~e.4 :part-of~e.3 h) :arg2 (h2 / handkerchief~e.7 :arg1-of (d / decorate-01~e.8 :arg2 (s / square~e.11 :arg1-of (r / red-02~e.10)))) :time (t / then~e.0))

# "_0 i_1 follow_2 a_3 terrible_4 profession_5 ._6
(f / follow-02~e.2 :arg0 (i / i~e.1) :arg1 (p / profession~e.5 :arg1-of (t / terrible-01~e.4)))

# in_0 the_1 old_2 days_3 it_4 was_5 reasonable_6 ._7
(r / reasonable-02~e.6 :arg1 (i / it~e.4) :time~e.0 (d / day~e.3 :mod (o / old~e.2)))

# i_0 put_1 the_2 lamp_3 out_4 in_5 the_6 morning_7 ,_8 and_9 in_10 the_11 evening_12 i_13 lighted_14 it_15 again_16 ._17
(a / and~e.9 :op1 (p / put-out-09~e.1 :arg0 (i / i~e.0) :arg1 (l / lamp~e.3) :time~e.10 (d2 / date-entity :dayperiod~e.12 (m / morning~e.7))) :op2 (l2 / light-04~e.14 :arg0 i :arg1 l :time~e.10 (d / date-entity :dayperiod~e.12 (e / evening~e.12)) :mod (a2 / again~e.16)))

# i_0 had_1 the_2 rest_3 of_4 the_5 day_6 for_7 relaxation_8 and_9 the_10 rest_11 of_12 the_13 night_14 for_15 sleep_16 ._17 "_18
(h / have-03~e.1 :arg0 (i / i~e.0) :arg1 (a / and~e.9 :op1 (r / rest~e.3 :purpose~e.7 (r2 / relax-01~e.8) :part-of~e.4 (d / day~e.6)) :op2 (r3 / rest~e.11 :purpose~e.15 (s / sleep-01~e.16) :part-of~e.12 (n / night~e.14))))

# "_0 and_1 the_2 orders_3 have_4 been_5 changed_6 since_7 that_8 time_9 ?_10 "_11
(a / and~e.1 :op2 (c / change-01~e.6 :mode interrogative~e.10 :arg1 (o / order-01~e.3) :time (s / since~e.7 :op1 (t / time~e.9 :mod (t2 / that~e.8)))))

# "_0 the_1 orders_2 have_3 not_4 been_5 changed_6 ,_7 "_8 said_9 the_10 lamplighter_11 ._12
(s / say-01~e.9 :arg0 (p / person~e.3 :arg0-of~e.3 (l / light-04~e.3 :arg1 (l2 / lamp~e.11))) :arg1 (c / change-01~e.6 :arg1 (o / order-01~e.2) :polarity~e.4 -~e.4))

# "_0 that_1 is_2 the_3 tragedy_4 !_5
(t / tragedy~e.4 :domain (t2 / that~e.1))

# from_0 year_1 to_2 year_3 the_4 planet_5 has_6 turned_7 more_8 rapidly_9 and_10 the_11 orders_12 have_13 not_14 been_15 changed_16 !_17 "_18
(a / and~e.10 :op1 (t / turn-01~e.7 :arg1 (p / planet~e.5) :manner (r / rapid~e.9 :degree (m / more~e.8)) :frequency~e.0 (y / year~e.1)) :op2 (c / change-01~e.16 :arg1 (o / order-01~e.12) :polarity~e.14 -~e.14))

# "_0 then_1 what_2 ?_3 "_4 asked_5 the_6 little_7 prince_8 ._9
(a / ask-01~e.5 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (a2 / amr-unknown~e.2 :time (t / then~e.1)))

# "_0 then_1 -_2 -_3 the_4 planet_5 now_6 makes_7 a_8 complete_9 turn_10 every_11 minute_12 ,_13 and_14 i_15 no_16 longer_17 have_18 a_19 single_20 second_21 for_22 repose_23 ._24
(a / and~e.14 :op1 (t / turn-01~e.10 :arg1 (p / planet~e.5) :arg1-of (c / complete-02~e.9) :time (n / now~e.6) :frequency (r2 / rate-entity-91~e.11 :arg3 (t3 / temporal-quantity :quant 1~e.8 :unit (m / minute~e.12)))) :op2 (h / have-03~e.18 :polarity~e.16 -~e.16 :arg0 (i / i~e.15) :arg1 (t2 / temporal-quantity :quant 1~e.19 :unit (s / second~e.21) :purpose~e.22 (r / repose-01~e.23)) :time (n2 / no-longer~e.17)) :time (t4 / then~e.1))

# once_0 every_1 minute_2 i_3 have_4 to_5 light_6 my_7 lamp_8 and_9 put_10 it_11 out_12 !_13 "_14
(o / obligate-01~e.4 :arg1 (i / i~e.3) :arg2 (a / and~e.9 :op1 (l / light-04~e.6 :arg0 i :arg1 (l2 / lamp~e.8 :poss~e.7 i)) :op2 (p / put-out-09~e.10 :arg0 i :arg1 l2)) :frequency~e.0 (r / rate-entity-91~e.1 :arg2 (t / temporal-quantity :quant 1 :unit (m / minute~e.2))))

# "_0 that_1 is_2 very_3 funny_4 !_5
(f / funny~e.4 :degree (v / very~e.3) :domain~e.5 (t / that~e.1))

# a_0 day_1 lasts_2 only_3 one_4 minute_5 ,_6 here_7 where_8 you_9 live_10 !_11 "_12
(l / last-01~e.2 :arg1 (t / temporal-quantity :quant 1~e.0 :unit (d / day~e.1)) :arg2 (t2 / temporal-quantity :quant 1~e.4 :unit (m / minute~e.5)) :mod (o / only~e.3) :location~e.8 (l2 / live-01~e.10 :arg0 (y / you~e.9)))

# "_0 it_1 is_2 not_3 funny_4 at_5 all_6 !_7 "_8 said_9 the_10 lamplighter_11 ._12
(s / say-01~e.9 :arg0 (p / person~e.7 :arg0-of~e.7 (l / light-04~e.7 :arg1 (l2 / lamp~e.11))) :arg1 (f / funny~e.4 :polarity~e.3 -~e.3 :domain~e.1 (i / it~e.1) :degree (a / at-all~e.6)))

# "_0 while_1 we_2 have_3 been_4 talking_5 together_6 a_7 month_8 has_9 gone_10 by_11 ._12 "_13
(p / pass-03~e.1 :arg1 (t / temporal-quantity :quant 1~e.7 :unit (m / month~e.8)) :duration-of~e.10 (t2 / talk-01~e.5 :arg0 (w / we~e.2) :mod (t3 / together~e.6)))

# "_0 a_1 month_2 ?_3 "_4
(t / temporal-quantity :mode interrogative~e.3 :quant 1~e.1 :unit (m / month~e.2))

# "_0 yes_1 ,_2 a_3 month_4 ._5
(t / temporal-quantity :unit (m / month~e.4) :quant 1~e.3)

# thirty_0 minutes_1 ._2
(t / temporal-quantity :unit (m / minute~e.1) :quant 30~e.0)

# thirty_0 days_1 ._2
(t / temporal-quantity :unit (d / day~e.1) :quant 30~e.0)

# good_0 evening_1 ._2 "_3
(e / evening~e.1 :arg1-of (g / good-02~e.0))

# and_0 he_1 lighted_2 his_3 lamp_4 again_5 ._6
(a / and~e.0 :op2 (l / light-04~e.2 :arg0 (h / he~e.1) :arg1 (l2 / lamp~e.4 :poss~e.3 h) :mod (a2 / again~e.5)))

# as_0 the_1 little_2 prince_3 watched_4 him_5 ,_6 he_7 felt_8 that_9 he_10 loved_11 this_12 lamplighter_13 who_14 was_15 so_16 faithful_17 to_18 his_19 orders_20 ._21
(f / feel-01~e.8 :arg0 (p / prince~e.3 :mod (l2 / little~e.2)) :arg1 (l / love-01~e.11 :arg0 p :arg1 (p2 / person~e.10 :arg0-of~e.10 (l3 / light-04~e.10 :arg1 (l4 / lamp~e.13)) :mod (t / this~e.12) :arg1-of~e.9 (f2 / faithful-00~e.17 :arg2 (t2 / thing~e.18 :arg2-of~e.19 (o / order-01~e.20 :arg1 p2))))) :time (w / watch-01~e.4 :arg0 p :arg1 p2))

# he_0 remembered_1 the_2 sunsets_3 which_4 he_5 himself_6 had_7 gone_8 to_9 seek_10 ,_11 in_12 other_13 days_14 ,_15 merely_16 by_17 pulling_18 up_19 his_20 chair_21 ;_22 and_23 he_24 wanted_25 to_26 help_27 his_28 friend_29 ._30
(a / and~e.23 :op1 (r / remember-01~e.1 :arg0 (h / he~e.0) :arg1 (s3 / sunset~e.3 :arg1-of (s / seek-01~e.10 :purpose-of~e.8 (g / go-02~e.8 :arg0 h :manner~e.17 (p / pull-01~e.18 :arg0 h :arg1 (c / chair~e.21) :mod (m / mere~e.16) :direction (u / up~e.19)) :time~e.12 (d / day~e.14 :mod (o / other~e.13)))))) :op2 (w / want-01~e.25 :arg0 h :arg1 (h2 / help-01~e.27 :arg0 h :arg1 (p2 / person~e.6 :arg0-of~e.7 (h3 / have-rel-role-91~e.7 :arg1 h :arg2 (f / friend~e.29))))))

# "_0 you_1 know_2 ,_3 "_4 he_5 said_6 ,_7 "_8 i_9 can_10 tell_11 you_12 a_13 way_14 you_15 can_16 rest_17 whenever_18 you_19 want_20 to_21 ..._22 "_23
(s / say-01~e.6 :arg0 (h / he~e.5) :arg1 (p / possible-01~e.10 :arg1 (t / tell-01~e.11 :arg0 h :arg1 (w / way~e.14 :purpose~e.21 (p2 / possible-01~e.16 :arg1 (r / rest-01~e.17 :arg1 (y / you~e.15) :time~e.18 (w2 / want-01~e.20 :arg0 y :mod (a / any~e.2))))) :arg2 y)))

# "_0 i_1 always_2 want_3 to_4 rest_5 ,_6 "_7 said_8 the_9 lamplighter_10 ._11
(s / say-01~e.8 :arg0 (p / person~e.1 :arg0-of (l / light-04 :arg1 (l2 / lamp~e.10))) :arg1 (w / want-01~e.3 :arg0 p :arg1 (r / rest-01~e.5 :arg1 p) :time (a / always~e.2)))

# for_0 it_1 is_2 possible_3 for_4 a_5 man_6 to_7 be_8 faithful_9 and_10 lazy_11 at_12 the_13 same_14 time_15 ._16
(c / cause-01~e.0 :arg0 (p / possible-01~e.3 :arg1 (a / and~e.10 :op1 (f / faithful~e.9) :op2 (l / lazy~e.11) :domain (m / man~e.6) :time (s / same-01~e.14 :arg1 (t / time~e.15)))))

# the_0 little_1 prince_2 went_3 on_4 with_5 his_6 explanation_7 :_8 "_9 your_10 planet_11 is_12 so_13 small_14 that_15 three_16 strides_17 will_18 take_19 you_20 all_21 the_22 way_23 around_24 it_25 ._26
(g / go-on-25~e.3 :arg0 (p / prince~e.2 :mod (l / little~e.1)) :arg1 (e / explain-01~e.7 :arg0 p :arg1 (c / cause-01~e.15 :arg0 (s / small~e.14 :domain~e.25 (p2 / planet~e.11 :poss~e.10 (y / you~e.20)) :degree (s2 / so~e.13)) :arg1 (t / take-03~e.19 :arg0 (s3 / stride-01~e.17 :quant 3~e.16) :arg1 y :arg2 (a / around~e.24 :op1 p2 :degree (a2 / all-the-way~e.23))))))

# to_0 be_1 always_2 in_3 the_4 sunshine_5 ,_6 you_7 need_8 only_9 walk_10 along_11 rather_12 slowly_13 ._14
(n / need-01~e.8 :arg0 (y / you~e.7) :arg1 (w / walk-01~e.10 :arg1-of (s / slow-05~e.13 :degree (r / rather~e.12)) :mod (o / only~e.9)) :purpose~e.0 (b / be-located-at-91~e.3 :arg1 y :arg2 (s2 / sunshine~e.5) :time~e.3 (a / always~e.2)))

# when_0 you_1 want_2 to_3 rest_4 ,_5 you_6 will_7 walk_8 -_9 -_10 and_11 the_12 day_13 will_14 last_15 as_16 long_17 as_18 you_19 like_20 ._21 "_22
(w / walk-01~e.8 :arg0 (y / you~e.6) :time~e.0 (w2 / want-01~e.2 :arg0 y :arg1 (r / rest-01~e.4 :arg1 y)) :arg0-of (c / cause-01~e.17 :arg1 (l / last-01~e.15 :arg1 (d / day~e.13) :arg2 (t / temporal-quantity :degree (e / equal~e.16) :compared-to~e.18 (l2 / like-02~e.20 :arg0 y)))))

# "_0 that_1 does_2 n't_3 do_4 me_5 much_6 good_7 ,_8 "_9 said_10 the_11 lamplighter_12 ._13
(s / say-01~e.10 :arg0 (p / person :arg0-of (l / light-04 :arg1 (l2 / lamp~e.12))) :arg1 (d / do-02~e.4 :polarity~e.3 -~e.2 :arg0 (t / that~e.1) :arg1 (g / good-04~e.7 :arg2 p :degree (m / much~e.6)) :arg2 p))

# "_0 the_1 one_2 thing_3 i_4 love_5 in_6 life_7 is_8 to_9 sleep_10 ._11 "_12
(l / love-01~e.5 :arg0 (i / i~e.4) :arg1 (s / sleep-01~e.10 :arg0 i :mod (t / thing~e.3 :quant 1~e.2)) :time~e.6 (l2 / live-01~e.7))

# "_0 then_1 you_2 're_3 unlucky_4 ,_5 "_6 said_7 the_8 little_9 prince_10 ._11
(s / say-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (l2 / lucky~e.4 :polarity - :domain (y / you~e.2) :time (t / then~e.1)))

# "_0 i_1 am_2 unlucky_3 ,_4 "_5 said_6 the_7 lamplighter_8 ._9
(s / say-01~e.6 :arg0 (p / person~e.1 :arg0-of (l / light-04 :arg1 (l2 / lamp~e.8))) :arg1 (l3 / lucky~e.3 :domain p :polarity -~e.1))

# "_0 good_1 morning_2 ._3 "_4
(m / morning~e.2 :arg1-of (g / good-02~e.1))

# and_0 he_1 put_2 out_3 his_4 lamp_5 ._6
(a / and~e.0 :op2 (p / put-out-09~e.2 :arg0 (h / he~e.1) :arg1 (l / lamp~e.5 :poss~e.4 h)))

# "_0 that_1 man_2 ,_3 "_4 said_5 the_6 little_7 prince_8 to_9 himself_10 ,_11 as_12 he_13 continued_14 farther_15 on_16 his_17 journey_18 ,_19 "_20 that_21 man_22 would_23 be_24 scorned_25 by_26 all_27 the_28 others_29 :_30 by_31 the_32 king_33 ,_34 by_35 the_36 conceited_37 man_38 ,_39 by_40 the_41 tippler_42 ,_43 by_44 the_45 businessman_46 ._47
(s / say-01~e.5 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (s2 / scorn-01~e.25 :arg0 (o / other~e.29 :mod (a / all~e.27) :domain~e.10 (a2 / and :op1 (k / king~e.33) :op2 (m / man~e.38 :mod (c / conceit~e.37)) :op3 (p2 / person~e.40 :arg0-of~e.42 (t / tipple-01~e.42)) :op4 (b / businessman~e.46))) :arg1 (m2 / man~e.2 :mod (t2 / that~e.1))) :arg2 p :time~e.12 (c2 / continue-01~e.14 :arg0 p :arg1 (j / journey-01~e.18 :arg0 p) :extent~e.31 (f / far~e.15 :degree (m3 / more~e.15))))

# nevertheless_0 he_1 is_2 the_3 only_4 one_5 of_6 them_7 all_8 who_9 does_10 not_11 seem_12 to_13 me_14 ridiculous_15 ._16
(h2 / have-concession-91~e.0 :arg1 (s / seem-01~e.12 :polarity~e.11 -~e.10 :arg1 (r / ridiculous-02~e.15 :arg1 (p / person :mod (o2 / only~e.4) :arg1-of (i2 / include-91~e.5 :arg2 (t / they~e.7 :mod (a / all~e.8))) :domain (h / he~e.1))) :arg2 (i / i~e.14)))

# perhaps_0 that_1 is_2 because_3 he_4 is_5 thinking_6 of_7 something_8 else_9 besides_10 himself_11 ._12 "_13
(p / possible-01~e.0 :arg1 (c / cause-01~e.3 :arg0 (t / think-01~e.6 :arg0 (h / he~e.4) :arg2 (s / something~e.8 :mod (e / else~e.9) :arg1-of (d / differ-02~e.10 :arg2 h)))))

# he_0 breathed_1 a_2 sigh_3 of_4 regret_5 ,_6 and_7 said_8 to_9 himself_10 ,_11 again_12 :_13 "_14 that_15 man_16 is_17 the_18 only_19 one_20 of_21 them_22 all_23 whom_24 i_25 could_26 have_27 made_28 my_29 friend_30 ._31
(a / and~e.7 :op1 (b / breathe-02~e.1 :arg0 (h / he~e.0) :arg1 (s / sigh-02~e.3 :manner (r / regret-01~e.5))) :op2 (s2 / say-01~e.8 :arg0 h :arg1 (p / person~e.24 :mod (o2 / only~e.19) :arg1-of (i / include-91~e.20 :arg2 (t / they~e.22 :mod (a2 / all~e.23))) :domain~e.2 (m2 / man~e.16 :mod (t2 / that~e.15)) :arg2-of~e.9 (m / make-01~e.28 :arg0 h :arg1 (h2 / have-rel-role-91~e.27 :arg0 p :arg1 h :arg2 (f / friend~e.30)) :arg1-of (p2 / possible-01~e.26))) :arg2 h :mod (a3 / again~e.12)))

# but_0 his_1 planet_2 is_3 indeed_4 too_5 small_6 ._7
(c / contrast-01~e.0 :arg2 (s / small~e.6 :degree (t / too~e.5) :domain (p / planet~e.2 :poss~e.1 (h / he~e.1)) :mod (i / indeed~e.4)))

# there_0 is_1 no_2 room_3 on_4 it_5 for_6 two_7 people_8 ..._9 "_10
(r / room~e.3 :poss~e.4 (i / it~e.5) :beneficiary~e.6 (p / person~e.8 :quant 2~e.7) :polarity~e.2 -~e.2)

# what_0 the_1 little_2 prince_3 did_4 not_5 dare_6 confess_7 was_8 that_9 he_10 was_11 sorry_12 most_13 of_14 all_15 to_16 leave_17 this_18 planet_19 ,_20 because_21 it_22 was_23 blest_24 every_25 day_26 with_27 1440_28 sunsets_29 !_30
(d / dare-01~e.6 :polarity~e.5 -~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2)) :arg2 (c / confess-01~e.7 :arg1 (c2 / cause-01~e.21 :arg0 (b / bless-01~e.24 :arg1 (p2 / planet~e.19 :mod (t / this~e.18)) :arg2 (s / sunset~e.29 :quant 1440~e.28) :frequency~e.10 (r / rate-entity-91~e.25 :arg3~e.27 (t2 / temporal-quantity :quant 1 :unit (d2 / day~e.26)))) :arg1 (s2 / sorry-01~e.12 :arg1 p :arg2 (l2 / leave-11~e.17 :arg1 p2)) :degree (m / most~e.13))))

# chapter_0 15_1 ._2
(c / chapter~e.0 :mod 15~e.1)

# the_0 sixth_1 planet_2 was_3 ten_4 times_5 larger_6 than_7 the_8 last_9 one_10 ._11
(l / large~e.6 :domain (p / planet~e.2 :ord~e.5 (o / ordinal-entity~e.5 :value 6~e.7)) :quant (p3 / product-of~e.1 :op1 10~e.10 :op2 (v / volume-quantity :quant-of~e.4 (p2 / planet~e.2 :mod (l2 / last~e.9)))))

# it_0 was_1 inhabited_2 by_3 an_4 old_5 gentleman_6 who_7 wrote_8 voluminous_9 books_10 ._11
(i / inhabit-01~e.2 :arg0 (g / gentleman~e.6 :mod (o / old~e.5) :arg0-of (w / write-01~e.8 :arg1 (b / book~e.10 :mod (v / volume~e.9)))) :arg1 (i2 / it~e.0))

# "_0 oh_1 ,_2 look_3 !_4
(a / and~e.4 :op1 (o / oh~e.1 :mode~e.4 expressive~e.4) :op2 (l / look-01~e.3 :mode~e.4 imperative~e.4 :arg0 (y / you)))

# here_0 is_1 an_2 explorer_3 !_4 "_5 he_6 exclaimed_7 to_8 himself_9 when_10 he_11 saw_12 the_13 little_14 prince_15 coming_16 ._17
(e / exclaim-01~e.7 :arg0 (h / he~e.6) :arg1 (p / person~e.9 :arg0-of~e.0 (e2 / explore-01~e.3)) :arg2 h :time~e.10 (s / see-01~e.12 :arg0 h :arg1 (c / come-01~e.16 :arg1 (p2 / prince~e.15 :mod (l / little~e.14)))))

# the_0 little_1 prince_2 sat_3 down_4 on_5 the_6 table_7 and_8 panted_9 a_10 little_11 ._12
(a / and~e.8 :op1 (s / sit-down-02~e.3 :arg1 (p2 / prince~e.2 :mod (l / little~e.1)) :location~e.4 (t / table~e.7)) :op2 (p / pant-01~e.9 :arg0 p2 :duration~e.10 (l2 / little~e.11)))

# he_0 had_1 already_2 traveled_3 so_4 much_5 and_6 so_7 far_8 !_9
(a2 / and~e.6 :op1 (t / travel-01~e.3 :arg0 (h / he~e.0) :quant (m / much~e.5 :mod (s / so~e.4))) :op2 (t2 / travel-01~e.3 :arg0 h :arg1 (f / far~e.8 :mod (s2 / so~e.7))) :time (a / already~e.2))

# "_0 where_1 do_2 you_3 come_4 from_5 ?_6 "_7 the_8 old_9 gentleman_10 said_11 to_12 him_13 ._14
(s / say-01~e.11 :arg0 (g / gentleman~e.10 :mod (o / old~e.9)) :arg1 (c / come-01~e.4 :arg1 h :arg3~e.5 (a / amr-unknown~e.6)) :arg2 (h / he~e.13))

# "_0 what_1 is_2 that_3 big_4 book_5 ?_6 "_7 said_8 the_9 little_10 prince_11 ._12
(s / say-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (b / book~e.5 :domain (a / amr-unknown~e.1) :mod (b2 / big~e.4) :mod (t / that~e.3)))

# "_0 what_1 are_2 you_3 doing_4 ?_5 "_6
(d2 / do-02~e.4 :arg0 (y / you~e.3) :arg1 (a / amr-unknown~e.5))

# "_0 i_1 am_2 a_3 geographer_4 ,_5 "_6 the_7 old_8 gentleman_9 said_10 to_11 him_12 ._13
(s / say-01~e.10 :arg0 (g / gentleman~e.9 :mod (o / old~e.8)) :arg1 (g2 / geographer~e.4 :domain~e.3 g) :arg2 (h / he~e.12))

# "_0 what_1 is_2 a_3 geographer_4 ?_5 "_6 asked_7 the_8 little_9 prince_10 ._11
(a / ask-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (g / geographer~e.4 :domain~e.3 (a2 / amr-unknown~e.1)))

# "_0 a_1 geographer_2 is_3 a_4 scholar_5 who_6 knows_7 the_8 location_9 of_10 all_11 the_12 seas_13 ,_14 rivers_15 ,_16 towns_17 ,_18 mountains_19 ,_20 and_21 deserts_22 ._23 "_24
(s4 / scholar~e.5 :domain~e.1 (g / geographer~e.2) :arg0-of (k / know-01~e.7 :arg1 (l / location~e.9 :location-of (a / and~e.21 :op1 (s2 / sea~e.13) :op2 (r / river~e.15) :op3 (t / town~e.17) :op4 (m / mountain~e.19) :op5 (d / desert~e.22) :mod (a2 / all~e.11)))))

# "_0 that_1 is_2 very_3 interesting_4 ,_5 "_6 said_7 the_8 little_9 prince_10 ._11
(s / say-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (i / interest-01~e.4 :arg0 (t2 / that~e.1) :arg1 p :degree (v / very~e.3)))

# "_0 here_1 at_2 last_3 is_4 a_5 man_6 who_7 has_8 a_9 real_10 profession_11 !_12 "_13
(m2 / man~e.6 :arg0-of~e.1 (h2 / have-03~e.8 :arg1 (p2 / profession~e.11 :arg1-of (r / real-04~e.10))) :time~e.2 (a / at-last~e.3))

# and_0 he_1 cast_2 a_3 look_4 around_5 him_6 at_7 the_8 planet_9 of_10 the_11 geographer_12 ._13
(a / and~e.0 :op2 (l / look-01~e.4 :arg0 (h / he~e.1) :arg1 (p / planet~e.9 :poss~e.2 (g / geographer~e.12)) :direction~e.7 (a2 / around~e.5 :op1 h)))

# it_0 was_1 the_2 most_3 magnificent_4 and_5 stately_6 planet_7 that_8 he_9 had_10 ever_11 seen_12 ._13
(p / planet~e.7 :domain~e.0 (i / it~e.0) :mod (m2 / magnificent~e.4 :degree (m / most~e.3) :compared-to~e.5 (p2 / planet~e.7 :arg1-of~e.10 (s2 / see-01~e.12 :arg0 (h / he~e.9) :time (e / ever~e.11)))) :mod (s / stately~e.6 :degree (m3 / most~e.3) :compared-to~e.5 p2))

# "_0 your_1 planet_2 is_3 very_4 beautiful_5 ,_6 "_7 he_8 said_9 ._10
(s / say-01~e.9 :arg0 (h / he~e.8) :arg1 (b / beautiful-02~e.5 :arg1 (p / planet~e.2 :poss~e.1 (y / you~e.1)) :degree (v / very~e.4)))

# "_0 has_1 it_2 any_3 oceans_4 ?_5 "_6
(h / have-03~e.1 :arg0 (i / it~e.2) :arg1 (o / ocean~e.4 :mod (a / any~e.3)) :mode interrogative~e.5)

# "_0 i_1 could_2 n't_3 tell_4 you_5 ,_6 "_7 said_8 the_9 geographer_10 ._11
(s / say-01~e.8 :arg0 (g / geographer~e.10) :arg1 (p / possible-01~e.2 :arg1 (t / tell-01~e.4 :arg0 g :arg2 (y / you~e.5)) :polarity~e.3 -~e.1))

# "_0 ah_1 !_2 "_3
(a / ah~e.1 :mode~e.2 expressive~e.2)

# the_0 little_1 prince_2 was_3 disappointed_4 ._5
(d / disappoint-01~e.4 :arg1 (p / prince~e.2 :mod (l / little~e.1)))

# "_0 has_1 it_2 any_3 mountains_4 ?_5 "_6
(h2 / have-03~e.1 :mode interrogative~e.5 :arg0 (i / it~e.2) :arg1 (m / mountain~e.4 :mod (a / any~e.3)))

# "_0 i_1 could_2 n't_3 tell_4 you_5 ,_6 "_7 said_8 the_9 geographer_10 ._11
(s / say-01~e.8 :arg0 (g / geographer~e.10) :arg1 (p / possible-01~e.2 :arg1 (t / tell-01~e.4 :arg0 g :arg2 (y / you~e.5)) :polarity~e.3 -~e.1))

# "_0 and_1 towns_2 ,_3 and_4 rivers_5 ,_6 and_7 deserts_8 ?_9 "_10
(a3 / and~e.1 :op2 (a4 / and~e.4 :op1 (t2 / town~e.2) :op2 (r2 / river~e.5) :op3 (d2 / desert~e.8)) :mode interrogative~e.9)

# "_0 i_1 could_2 n't_3 tell_4 you_5 that_6 ,_7 either_8 ._9 "_10
(p2 / possible-01~e.2 :polarity~e.3 - :arg1 (t / tell-01~e.4 :arg0 (i / i~e.1) :arg1 (t2 / that~e.6) :arg2 (y / you~e.5)) :mod (e / either~e.8))

# "_0 but_1 you_2 are_3 a_4 geographer_5 !_6 "_7
(c / contrast-01~e.1 :mode~e.6 expressive~e.6 :arg2 (g2 / geographer~e.5 :domain~e.4 (y2 / you~e.2)))

# "_0 exactly_1 ,_2 "_3 the_4 geographer_5 said_6 ._7
(s / say-01~e.6 :arg0 (g / geographer~e.5) :arg1 (e / exact~e.1))

# "_0 but_1 i_2 am_3 not_4 an_5 explorer_6 ._7
(c / contrast-01~e.1 :arg2 (p / person :polarity~e.4 -~e.4 :domain (i / i~e.2) :arg0-of (e / explore-01~e.6)))

# i_0 have_1 n't_2 a_3 single_4 explorer_5 on_6 my_7 planet_8 ._9
(h2 / have-03~e.1 :polarity~e.2 - :arg0 (i / i~e.0) :arg1 (p2 / person~e.4 :arg1-of~e.4 (s / single-02~e.4) :arg0-of (e / explore-01~e.5) :location~e.6 (p3 / planet~e.8 :poss~e.7 i)))

# it_0 is_1 not_2 the_3 geographer_4 who_5 goes_6 out_7 to_8 count_9 the_10 towns_11 ,_12 the_13 rivers_14 ,_15 the_16 mountains_17 ,_18 the_19 seas_20 ,_21 the_22 oceans_23 ,_24 and_25 the_26 deserts_27 ._28
(p2 / person~e.7 :domain~e.0 (g / geographer~e.4 :polarity~e.2 -~e.2) :arg0-of (g2 / go-02~e.6 :purpose~e.8 (c / count-01~e.9 :arg0 g :arg1 (a / and~e.25 :op1 (t / town~e.11) :op2 (r / river~e.14) :op3 (m / mountain~e.17) :op4 (o2 / ocean~e.23) :op5 (d / desert~e.27) :op6 (s2 / sea~e.20)))))

# the_0 geographer_1 is_2 much_3 too_4 important_5 to_6 go_7 loafing_8 about_9 ._10
(i2 / important~e.5 :domain (g / geographer~e.1 :arg1-of (g2 / go-01~e.7 :purpose~e.6 (l / loaf-01~e.8 :arg0 g :path (a / about~e.9)))) :degree (t / too~e.4 :degree (m / much~e.3)))

# he_0 does_1 not_2 leave_3 his_4 desk_5 ._6
(l / leave-11~e.3 :polarity~e.2 -~e.1 :arg0 (h / he~e.0) :arg1 (d / desk~e.5 :poss~e.4 h))

# but_0 he_1 receives_2 the_3 explorers_4 in_5 his_6 study_7 ._8
(c / contrast-01~e.0 :arg2 (r / receive-01~e.2 :arg0 (h / he~e.1) :arg1 (p / person~e.4 :arg0-of~e.4 (e / explore-01~e.4)) :location~e.5 (s / study~e.7 :poss~e.6 h)))

# he_0 asks_1 them_2 questions_3 ,_4 and_5 he_6 notes_7 down_8 what_9 they_10 recall_11 of_12 their_13 travels_14 ._15
(a3 / and~e.5 :op1 (q2 / question-01~e.1 :arg0 (h / he~e.0) :arg2 (t / they~e.2)) :op2 (n / note-02~e.7 :arg0 h :arg1 (t3 / thing~e.9 :arg1-of~e.11 (r / recall-02~e.11) :source~e.13 (t2 / travel-01~e.14 :arg0 t))))

# and_0 if_1 the_2 recollections_3 of_4 any_5 one_6 among_7 them_8 seem_9 interesting_10 to_11 him_12 ,_13 the_14 geographer_15 orders_16 an_17 inquiry_18 into_19 that_20 explorer_21 's_22 moral_23 character_24 ._25 "_26
(a3 / and~e.0 :op2 (o / order-02~e.16 :arg0 (g / geographer~e.15) :arg1 (i / inquire-01~e.18 :arg1 (c / character~e.24 :arg1-of (m / moral-02~e.23) :poss~e.22 (p / person~e.21 :arg0-of~e.19 (e / explore-01~e.21) :mod (t2 / that~e.20)))) :condition~e.1 (i4 / interest-01~e.10 :arg1 g :arg2 (t4 / thing~e.11 :arg1-of~e.3 (r2 / recall-02~e.3) :poss~e.22 (p2 / person~e.21 :arg0-of~e.21 (e2 / explore-01~e.21) :mod (a / any~e.5) :arg1-of (i5 / include-91~e.7 :arg2 (t5 / they~e.8)))))))

# "_0 why_1 is_2 that_3 ?_4 "_5
(t2 / that~e.3 :arg1-of (c / cause-01~e.1 :arg0 (a / amr-unknown~e.4)))

# "_0 because_1 an_2 explorer_3 who_4 told_5 lies_6 would_7 bring_8 disaster_9 on_10 the_11 books_12 of_13 the_14 geographer_15 ._16
(c / cause-01~e.1 :arg1 (l / lie-08~e.5 :arg0 (p2 / person~e.3 :arg0-of~e.13 (e2 / explore-01~e.3)) :condition-of~e.6 (b3 / bring-01~e.8 :arg1 (d2 / disaster~e.9) :arg2 (b4 / book~e.12 :poss~e.10 (g2 / geographer~e.15)))))

# so_0 would_1 an_2 explorer_3 who_4 drank_5 too_6 much_7 ._8 "_9
(d3 / drink-01~e.5 :arg0 (p2 / person~e.5 :arg0-of~e.3 (e2 / explore-01~e.3)) :quant (m2 / much~e.7 :degree (t2 / too~e.6)) :arg0-of (c / cause-01~e.0 :arg1 (t / thing~e.0 :arg1-of~e.0 (s / same-01~e.0))))

# "_0 why_1 is_2 that_3 ?_4 "_5 asked_6 the_7 little_8 prince_9 ._10
(a / ask-01~e.6 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (t / that~e.3 :arg1-of (c / cause-01~e.1 :arg0 (a2 / amr-unknown~e.4))))

# "_0 because_1 intoxicated_2 men_3 see_4 double_5 ._6
(s3 / see-01~e.4 :arg0 (m2 / man~e.3 :arg1-of (i2 / intoxicate-01~e.2)) :arg2 (d / double~e.5) :arg0-of (c2 / cause-01~e.1 :arg1 (t2 / thing)))

# then_0 the_1 geographer_2 would_3 note_4 down_5 two_6 mountains_7 in_8 a_9 place_10 where_11 there_12 was_13 only_14 one_15 ._16 "_17
(t / thing~e.0 :arg0-of (c / cause-01 :arg1 (n2 / note-02~e.4 :arg0 (g / geographer~e.2) :arg1 (m / mountain~e.7 :quant 2~e.6 :location~e.5 (p / place~e.10 :location-of~e.11 (m2 / mountain~e.7 :quant 1~e.9 :mod (o2 / only~e.14)))) :time (t2 / then~e.0))))

# "_0 i_1 know_2 some_3 one_4 ,_5 "_6 said_7 the_8 little_9 prince_10 ,_11 "_12 who_13 would_14 make_15 a_16 bad_17 explorer_18 ._19 "_20
(s / say-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (k / know-02~e.2 :arg0 p :arg1 (s2 / someone~e.3 :arg1-of~e.4 (m / make-06~e.15 :arg2 (p2 / person~e.18 :arg0-of~e.18 (e / explore-01~e.18) :arg1-of (b / bad-02~e.17 :arg2 e))))))

# "_0 that_1 is_2 possible_3 ._4
(p2 / possible-01~e.3 :arg1 (t / that~e.1))

# then_0 ,_1 when_2 the_3 moral_4 character_5 of_6 the_7 explorer_8 is_9 shown_10 to_11 be_12 good_13 ,_14 an_15 inquiry_16 is_17 ordered_18 into_19 his_20 discovery_21 ._22 "_23
(o2 / order-01~e.18 :arg1 (i / inquire-01~e.16 :arg1 (t / thing~e.11 :arg1-of~e.21 (d / discover-01~e.21 :arg0 p))) :time~e.2 (s3 / show-01~e.10 :arg1 (g / good-02~e.13 :arg1 (c / character~e.5 :poss~e.20 (p / person~e.8 :arg0-of~e.6 (e / explore-01~e.8)) :arg1-of (m / moral-02~e.4)))) :time~e.2 (t3 / then~e.0))

# "_0 one_1 goes_2 to_3 see_4 it_5 ?_6 "_7
(g / go-02~e.2 :mode interrogative~e.6 :arg0 (o / one~e.1) :purpose~e.3 (s2 / see-01~e.4 :arg0 o :arg1 (i / it~e.5)))

# "_0 no_1 ._2
(n / no~e.1)

# that_0 would_1 be_2 too_3 complicated_4 ._5
(c2 / complicate-01~e.4 :arg1 (t3 / that~e.0) :degree (t2 / too~e.3))

# but_0 one_1 requires_2 the_3 explorer_4 to_5 furnish_6 proofs_7 ._8
(c / contrast-01~e.0 :arg2 (r / require-01~e.2 :arg0 (o / one~e.1) :arg1 (f / furnish-01~e.6 :arg0 p :arg1 (p2 / prove-01~e.7)) :arg2 (p / person~e.4 :arg0-of~e.4 (e / explore-01~e.4))))

# for_0 example_1 ,_2 if_3 the_4 discovery_5 in_6 question_7 is_8 that_9 of_10 a_11 large_12 mountain_13 ,_14 one_15 requires_16 that_17 large_18 stones_19 be_20 brought_21 back_22 from_23 it_24 ._25 "_26
(e2 / exemplify-01~e.1 :arg0 (r / require-01~e.16 :arg0 (o / one~e.15) :arg1 (b / bring-01~e.21 :arg1 (s2 / stone~e.19 :mod (l2 / large~e.18)) :direction (b2 / back~e.22) :source~e.23 m) :condition~e.3 (d / discover-01~e.5 :arg1 (m / mountain~e.13 :mod (l / large~e.12)) :arg1-of (q / question-01~e.7))))

# the_0 geographer_1 was_2 suddenly_3 stirred_4 to_5 excitement_6 ._7
(s / stir-02~e.4 :arg1 (g / geographer~e.1) :arg3~e.5 (e / excite-01~e.6) :manner (s2 / sudden~e.3))

# "_0 but_1 you_2 -_3 -_4 you_5 come_6 from_7 far_8 away_9 !_10
(c3 / contrast-01~e.1 :arg2 (c / come-01~e.6 :arg1 (y / you~e.2) :arg3~e.7 (a / away~e.9 :extent~e.10 (f / far~e.8))))

# you_0 are_1 an_2 explorer_3 !_4
(p2 / person~e.4 :arg0-of~e.3 (e / explore-01~e.3) :domain (y / you~e.0))

# you_0 shall_1 describe_2 your_3 planet_4 to_5 me_6 !_7 "_8
(d2 / describe-01~e.2 :mode~e.7 imperative~e.5 :arg0 (y / you~e.0) :arg1 (p / planet~e.4 :source-of~e.1 y) :beneficiary~e.6 (i / i~e.6))

# and_0 ,_1 having_2 opened_3 his_4 big_5 register_6 ,_7 the_8 geographer_9 sharpened_10 his_11 pencil_12 ._13
(a / and~e.0 :op2 (s / sharpen-01~e.10 :arg0 g :arg1 (p / pencil~e.12 :poss~e.11 g) :time (a3 / after~e.2 :op1 (o / open-01~e.3 :arg0 (g / geographer~e.9) :arg1 (r / register-02~e.6 :arg0 g :mod (b / big~e.5))))))

# the_0 recitals_1 of_2 explorers_3 are_4 put_5 down_6 first_7 in_8 pencil_9 ._10
(p / put-01~e.5 :arg1 (t / thing~e.1 :arg1-of~e.1 (r / recite-01~e.1 :arg0 (p2 / person~e.3 :arg0-of~e.2 (e / explore-01~e.3)))) :direction (d / down~e.6) :time~e.8 (f / first~e.7) :instrument~e.8 (p3 / pencil~e.9))

# one_0 waits_1 until_2 the_3 explorer_4 has_5 furnished_6 proofs_7 ,_8 before_9 putting_10 them_11 down_12 in_13 ink_14 ._15
(w / wait-01~e.1 :arg1 (o / one~e.0) :time~e.5 (u / until~e.2 :op1 (f / furnish-01~e.6 :arg0 (p2 / person~e.4 :arg0-of~e.4 (e / explore-01~e.4)) :arg1 (p / prove-01~e.7))) :time~e.5 (b / before~e.9 :op1 (p3 / put-01~e.10 :arg0 o :arg1 (t / they~e.11) :direction (d / down~e.12) :instrument~e.13 (i / ink~e.14))))

# "_0 well_1 ?_2 "_3 said_4 the_5 geographer_6 expectantly_7 ._8
(s / say-01~e.4 :arg0 (g / geographer~e.6) :arg1 (w / well~e.1 :mode interrogative~e.2) :manner (e / expect-01~e.7))

# "_0 oh_1 ,_2 where_3 i_4 live_5 ,_6 "_7 said_8 the_9 little_10 prince_11 ,_12 "_13 it_14 is_15 not_16 very_17 interesting_18 ._19
(s / say-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (a / and :op1 (o / oh~e.1 :mode expressive) :op2 (i2 / interest-01~e.18 :arg0 (l2 / location~e.3 :location-of~e.3 (l3 / live-01~e.5 :arg0 p)) :arg1 p :degree~e.14 (v / very~e.17) :polarity~e.16 -~e.16)))

# it_0 is_1 all_2 so_3 small_4 ._5
(s3 / small~e.4 :domain~e.0 (i / it~e.0 :mod (a / all~e.2)) :degree (s / so~e.3))

# i_0 have_1 three_2 volcanoes_3 ._4
(h2 / have-03~e.1 :arg0 (i / i~e.0) :arg1 (v / volcano~e.3 :quant 3~e.2))

# two_0 volcanoes_1 are_2 active_3 and_4 the_5 other_6 is_7 extinct_8 ._9
(a3 / and~e.4 :op1 (a / activity-06~e.3 :arg0 (v / volcano~e.1 :quant 2~e.0)) :op2 (e / extinct~e.8 :domain (o / other~e.6)))

# but_0 one_1 never_2 knows_3 ._4 "_5
(c / contrast-01~e.0 :arg2 (k / know-01~e.3 :arg0 (o / one~e.1) :polarity~e.2 -~e.2 :time (e / ever~e.2)))

# "_0 one_1 never_2 knows_3 ,_4 "_5 said_6 the_7 geographer_8 ._9
(s / say-01~e.6 :arg0 (g / geographer~e.8) :arg1 (k / know-01~e.3 :polarity~e.2 -~e.2 :arg0 (o / one~e.1) :time (e / ever~e.2)))

# "_0 i_1 have_2 also_3 a_4 flower_5 ._6 "_7
(h2 / have-03~e.2 :arg0 (i / i~e.1) :arg1 (t / thing~e.5 :arg1-of~e.5 (f / flower-01~e.5)) :mod (a2 / also~e.3))

# "_0 we_1 do_2 not_3 record_4 flowers_5 ,_6 "_7 said_8 the_9 geographer_10 ._11
(s / say-01~e.8 :arg0 (g / geographer~e.10) :arg1 (r / record-01~e.4 :arg0 (w / we~e.1) :arg1 (t / thing~e.5 :arg1-of~e.5 (f / flower-01~e.5)) :polarity~e.3 -~e.2))

# "_0 why_1 is_2 that_3 ?_4
(t2 / that~e.3 :arg1-of (c / cause-01~e.1 :arg0 (a / amr-unknown~e.4)))

# the_0 flower_1 is_2 the_3 most_4 beautiful_5 thing_6 on_7 my_8 planet_9 !_10 "_11
(t3 / thing~e.6 :arg1-of~e.5 (b / beautiful-02~e.5 :degree (m2 / most~e.4)) :location~e.7 (p / planet~e.9 :source-of~e.8 (i / i~e.8)) :domain~e.10 (t2 / thing~e.6 :arg1-of~e.1 (f / flower-01~e.1)))

# "_0 we_1 do_2 not_3 record_4 them_5 ,_6 "_7 said_8 the_9 geographer_10 ,_11 "_12 because_13 they_14 are_15 ephemeral_16 ._17 "_18
(s / say-01~e.8 :arg0 (g / geographer~e.10) :arg1 (r / record-01~e.4 :polarity~e.3 -~e.3 :arg0 (w / we~e.1) :arg1 (t / they~e.5) :arg1-of (c / cause-01~e.13 :arg0 (e / ephemeral~e.16 :domain t))))

# "_0 what_1 does_2 that_3 mean_4 -_5 -_6 '_7 ephemeral_8 '_9 ?_10 "_11
(m2 / mean-01~e.4 :arg1 (e / ephemeral~e.8) :arg2 (a / amr-unknown~e.10))

# "_0 geographies_1 ,_2 "_3 said_4 the_5 geographer_6 ,_7 "_8 are_9 the_10 books_11 which_12 ,_13 of_14 all_15 books_16 ,_17 are_18 most_19 concerned_20 with_21 matters_22 of_23 consequence_24 ._25
(s / say-01~e.4 :arg0 (g / geographer~e.1) :arg1 (b / book~e.11 :domain (g2 / geography~e.6) :arg1-of (i / include-91~e.14 :arg2 (b2 / book~e.16 :mod (a / all~e.15))) :arg0-of~e.21 (c / concern-02~e.20 :arg1 (m2 / matter~e.22 :mod (c2 / consequence~e.24)) :degree (m / most~e.19))))

# they_0 never_1 become_2 old_3 -_4 fashioned_5 ._6
(b / become-01~e.2 :arg1 (t / they~e.0) :arg2 (f / fashion~e.5 :mod (o / old~e.3)) :time (e / ever~e.1) :polarity~e.1 -~e.1)

# it_0 is_1 very_2 rarely_3 that_4 a_5 mountain_6 changes_7 its_8 position_9 ._10
(c / change-01~e.7 :arg0 (m / mountain~e.6) :arg1 (l / location~e.8 :arg2-of (p / position-01~e.9 :arg1 m)) :arg1-of~e.4 (r / rare-02~e.3 :degree~e.0 (v / very~e.2)))

# it_0 is_1 very_2 rarely_3 that_4 an_5 ocean_6 empties_7 itself_8 of_9 its_10 waters_11 ._12
(e / empty-01~e.7 :arg0 (o / ocean~e.6) :arg1 o :arg2 (w / water~e.11 :poss~e.8 o) :arg1-of~e.4 (r / rare-02~e.3 :degree~e.0 (v / very~e.2)))

# we_0 write_1 of_2 eternal_3 things_4 ._5 "_6
(w3 / write-01~e.1 :arg0 (w2 / we~e.0) :arg1 (t / thing~e.4 :mod (e / eternal~e.3)))

# "_0 but_1 extinct_2 volcanoes_3 may_4 come_5 to_6 life_7 again_8 ,_9 "_10 the_11 little_12 prince_13 interrupted_14 ._15
(i / interrupt-01~e.14 :arg0 (p2 / prince~e.13 :mod (l / little~e.12)) :arg2 (c / contrast-01~e.1 :arg2 (p / possible-01~e.4 :arg1 (c2 / come-04~e.5 :arg1 (v / volcano~e.3 :mod (e / extinct~e.2)) :arg2 (t / thing~e.6 :arg1-of~e.7 (l3 / live-01~e.7)) :mod (a / again~e.8)))))

# "_0 what_1 does_2 that_3 mean_4 -_5 -_6 '_7 ephemeral_8 '_9 ?_10 "_11
(m2 / mean-01~e.4 :arg1 (e / ephemeral~e.8) :arg2 (a / amr-unknown~e.10))

# "_0 whether_1 volcanoes_2 are_3 extinct_4 or_5 alive_6 ,_7 it_8 comes_9 to_10 the_11 same_12 thing_13 for_14 us_15 ,_16 "_17 said_18 the_19 geographer_20 ._21
(s / say-01~e.18 :arg0 (g / geographer~e.20) :arg1 (s2 / same-01~e.12 :arg1 (e2 / extinct~e.4 :domain~e.8 (v / volcano~e.2)) :arg2 (l2 / live-01~e.6 :arg0 v) :arg3~e.14 (w / we~e.15)))

# "_0 the_1 thing_2 that_3 matters_4 to_5 us_6 is_7 the_8 mountain_9 ._10
(m3 / mountain~e.9 :domain (t / thing~e.2 :arg1-of~e.3 (m2 / matter-01~e.4 :arg2 (w / we~e.6))))

# it_0 does_1 not_2 change_3 ._4 "_5
(c2 / change-01~e.3 :arg1 (i / it~e.0) :polarity~e.2 -~e.1)

# "_0 but_1 what_2 does_3 that_4 mean_5 -_6 -_7 '_8 ephemeral_9 '_10 ?_11 "_12 repeated_13 the_14 little_15 prince_16 ,_17 who_18 never_19 in_20 his_21 life_22 had_23 let_24 go_25 of_26 a_27 question_28 ,_29 once_30 he_31 had_32 asked_33 it_34 ._35
(r / repeat-01~e.13 :arg0 (p / prince~e.16 :mod (l / little~e.15) :arg0-of~e.26 (l2 / let-01~e.24 :polarity~e.19 -~e.19 :arg1 (g / go-02~e.25 :arg0 (t / thing~e.28 :arg1-of~e.32 (q / question-01~e.28 :arg0 p))) :time~e.20 (o / once~e.30 :op1 (a2 / ask-01~e.33 :arg1 t)) :time~e.20 (e2 / ever~e.19 :duration~e.27 (t2 / thing~e.22 :arg1-of~e.23 (l3 / live-01~e.22 :arg0 p))))) :arg1 (c / contrast-01~e.1 :arg2 (m / mean-01~e.5 :arg1 (e / ephemeral~e.9) :arg2 (a / amr-unknown~e.2))))

# "_0 it_1 means_2 ,_3 '_4 which_5 is_6 in_7 danger_8 of_9 speedy_10 disappearance_11 ._12 '_13 "_14
(m2 / mean-01~e.2 :arg1 (i / it~e.1) :arg2 (t / thing~e.8 :arg1-of~e.8 (e / endanger-01~e.8 :arg1-of (c / cause-01~e.9 :arg0 (d / disappear-01~e.11 :arg1-of (s / speedy-03~e.10))))))

# "_0 is_1 my_2 flower_3 in_4 danger_5 of_6 speedy_7 disappearance_8 ?_9 "_10
(e2 / endanger-01~e.5 :mode interrogative~e.9 :arg1 (f2 / flower~e.3 :poss~e.2 (i / i~e.2)) :arg1-of (c / cause-01~e.6 :arg0 (d / disappear-01~e.8 :arg1-of (s / speedy-03~e.7))))

# "_0 certainly_1 it_2 is_3 ._4 "_5
(c2 / certain~e.1 :domain~e.2 (i2 / it~e.2))

# "_0 my_1 flower_2 is_3 ephemeral_4 ,_5 "_6 the_7 little_8 prince_9 said_10 to_11 himself_12 ,_13 "_14 and_15 she_16 has_17 only_18 four_19 thorns_20 to_21 defend_22 herself_23 against_24 the_25 world_26 ._27
(s / say-01~e.10 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (a / and~e.15 :op1 (e / ephemeral~e.4 :domain (f2 / flower~e.2 :poss~e.1 p)) :op2 (h / have-03~e.17 :arg0 f2 :arg1 (t2 / thorn~e.20 :arg2-of~e.11 (d / defend-01~e.22 :arg0 f2 :arg1 f2 :arg3~e.23 (w / world~e.26)) :quant (o / only~e.18 :op1 4~e.19)))) :arg2 p)

# and_0 i_1 have_2 left_3 her_4 on_5 my_6 planet_7 ,_8 all_9 alone_10 !_11 "_12
(a4 / and~e.0 :op2 (l / leave-12~e.3 :arg0 (i / i~e.1) :arg1 (s / she~e.4) :arg2 (p / planet~e.7 :source-of~e.6 i) :arg0-of (c / cause-01 :arg1 (a2 / alone~e.10 :degree (a3 / all~e.9) :domain~e.11 s))))

# that_0 was_1 his_2 first_3 moment_4 of_5 regret_6 ._7
(m / moment~e.4 :domain (t / that~e.0) :mod (r / regret-01~e.6) :ord~e.3 (o / ordinal-entity~e.3 :value 1) :poss~e.2 (h / he~e.2))

# but_0 he_1 took_2 courage_3 once_4 more_5 ._6
(c / contrast-01~e.0 :arg2 (t / take-01~e.2 :arg0 (h / he~e.1) :arg1 (c2 / courage~e.3) :mod (a / again~e.5 :frequency~e.4 1)))

# "_0 what_1 place_2 would_3 you_4 advise_5 me_6 to_7 visit_8 now_9 ?_10 "_11 he_12 asked_13 ._14
(a / ask-01~e.13 :arg0 (h / he~e.12) :arg1 (a2 / advise-01~e.5 :arg0 (y / you~e.4) :arg1 h :arg2 (v / visit-01~e.8 :arg0 h :arg1 (p / place~e.2 :domain (a3 / amr-unknown~e.1)) :time (n / now~e.9))))

# "_0 the_1 planet_2 earth_3 ,_4 "_5 replied_6 the_7 geographer_8 ._9
(r / reply-01~e.6 :arg0 (g / geographer~e.8) :arg2 (p2 / planet :wiki~e.2 "earth"~e.3 :name (n / name :op1 "earth"~e.3)))

# "_0 it_1 has_2 a_3 good_4 reputation_5 ._6 "_7
(h2 / have-03~e.2 :arg0 (i / it~e.1) :arg1 (r / reputation~e.5 :arg1-of (g / good-02~e.4)))

# and_0 the_1 little_2 prince_3 went_4 away_5 ,_6 thinking_7 of_8 his_9 flower_10 ._11
(a / and~e.0 :op2 (a2 / and~e.0 :op1 (g / go-02~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2)) :direction (a3 / away~e.5)) :op2 (t / think-01~e.7 :arg0 p :arg1 (f2 / flower~e.10 :poss~e.9 p))))

# chapter_0 16_1 ._2
(c / chapter~e.0 :mod 16~e.1)

# so_0 then_1 the_2 seventh_3 planet_4 was_5 the_6 earth_7 ._8
(p2 / planet~e.4 :ord (o / ordinal-entity :value 7~e.3) :domain (p / planet :wiki~e.1 "earth"~e.7 :name (n / name :op1 "earth"~e.7)) :arg1-of (c / cause-01~e.0))

# the_0 earth_1 is_2 not_3 just_4 an_5 ordinary_6 planet_7 !_8
(p / planet~e.7 :mod (o / ordinary~e.6 :mod (j / just~e.4 :polarity~e.3 -~e.3)) :domain (p2 / planet :wiki "earth"~e.1 :name (n / name :op1 "earth"~e.1)))

# one_0 can_1 count_2 ,_3 there_4 111_5 kings_6 (_7 not_8 forgetting_9 ,_10 to_11 be_12 sure_13 ,_14 the_15 negro_16 kings_17 among_18 them_19 )_20 ,_21 7000_22 geographers_23 ,_24 900,000_25 businessmen_26 ,_27 7,500,000_28 tipplers_29 ,_30 311,000,000_31 conceited_32 men_33 -_34 -_35 that_36 is_37 to_38 say_39 ,_40 about_41 2,000,000,000_42 grown_43 -_44 ups_45 ._46
(p / possible-01~e.1 :arg1 (a3 / and~e.25 :op1 (c / count-01~e.2 :arg0 (o / one~e.0) :arg1 (a / and~e.25 :op1 (p5 / person~e.4 :quant 111~e.5 :arg0-of (h2 / have-org-role-91 :arg2 (k / king~e.17))) :op2 (g2 / geographer~e.23 :quant 7000~e.22) :op3 (b / businessman~e.26 :quant 900000~e.18) :op4 (p4 / person :quant 7500000~e.28 :arg0-of (t2 / tipple-01~e.29)) :op5 (m / man~e.33 :quant 311000000~e.31 :mod (c2 / conceited~e.32)) :mod (g3 / grown-up~e.43 :quant (a2 / about~e.41 :op1 2000000000~e.39))) :location~e.4 (t / there~e.4)) :op2 (f / forget-01~e.9 :polarity~e.8 -~e.8 :arg0 o :arg1 (n / negro~e.16 :arg1-of (i2 / include-91~e.19 :arg2 p5) :arg0-of (h / have-org-role-91 :arg2 (k2 / king~e.17))) :arg1-of (s / sure-02~e.13))))

# to_0 give_1 you_2 an_3 idea_4 of_5 the_6 size_7 of_8 the_9 earth_10 ,_11 i_12 will_13 tell_14 you_15 that_16 before_17 the_18 invention_19 of_20 electricity_21 it_22 was_23 necessary_24 to_25 maintain_26 ,_27 over_28 the_29 whole_30 of_31 the_32 six_33 continents_34 ,_35 a_36 veritable_37 army_38 of_39 462,511_40 lamplighters_41 for_42 the_43 street_44 lamps_45 ._46
(t / tell-01~e.14 :arg0 (i3 / i~e.12) :arg1 (o / obligate-01 :arg2 (m / maintain-01~e.26 :arg1 (a / army~e.38 :consist-of~e.39 (p2 / person :quant 462511~e.40 :arg0-of (l2 / light-04~e.24 :arg1 (l3 / lamp~e.41))) :mod (v / veritable~e.37)) :location (o2 / over~e.28 :op1 (c / continent~e.34 :quant (w / whole~e.30 :op1 6~e.33))) :purpose~e.42 (l / lamp~e.45 :location (s2 / street~e.44))) :time (b / before~e.17 :op1 (i2 / invent-01~e.19 :arg1 (e / electricity~e.21)))) :arg2 y :purpose~e.0 (g / give-01~e.1 :arg1 (i / idea~e.4 :topic~e.5 (s / size-01~e.7 :arg1 (p3 / planet :wiki~e.8 "earth"~e.10 :name (n / name :op1 "earth"~e.10)))) :arg2 (y / you~e.15)))

# seen_0 from_1 a_2 slight_3 distance_4 ,_5 that_6 would_7 make_8 a_9 splendid_10 spectacle_11 ._12
(m / make-01~e.8 :arg0 (t / that~e.6) :arg1 (s / spectacle~e.11 :mod (s2 / splendid~e.10)) :condition~e.1 (s3 / see-01~e.0 :arg1 t :manner (d / distance-01~e.4 :arg2 t :degree (s4 / slight~e.3))))

# the_0 movements_1 of_2 this_3 army_4 would_5 be_6 regulated_7 like_8 those_9 of_10 the_11 ballet_12 in_13 the_14 opera_15 ._16
(r / regulate-01~e.7 :arg1 (m / move-01~e.1 :arg0 (a / army~e.4 :mod (t / this~e.3)) :arg1-of (r3 / resemble-01~e.8 :arg2 (m2 / move-01~e.9 :arg0 (b / ballet~e.12 :subevent-of~e.13 (o / opera~e.15))))))

# first_0 would_1 come_2 the_3 turn_4 of_5 the_6 lamplighters_7 of_8 new_9 zealand_10 and_11 australia_12 ._13
(c / come-03~e.2 :arg1 (t / turn-01~e.4 :arg1 (p / person :source (a / and~e.11 :op1 (c2 / country :wiki~e.5 "new_zealand"~e.8 :name (n / name :op1 "new"~e.9 :op2 "zealand"~e.10)) :op2 (c3 / country :wiki~e.8 "australia"~e.12 :name (n2 / name :op1 "australia"~e.12))) :arg0-of (l / light-04 :arg1 (l2 / lamp~e.7)))) :time (f / first~e.0))

# having_0 set_1 their_2 lamps_3 alight_4 ,_5 these_6 would_7 go_8 off_9 to_10 sleep_11 ._12
(g / go-02~e.8 :arg0 (t / they~e.9) :purpose~e.10 (s / sleep-01~e.11 :arg0 t) :time (a / after~e.4 :op1 (l2 / light-04~e.1 :arg0 t :arg1 (l / lamp~e.3 :poss~e.2 t))))

# next_0 ,_1 the_2 lamplighters_3 of_4 china_5 and_6 siberia_7 would_8 enter_9 for_10 their_11 steps_12 in_13 the_14 dance_15 ,_16 and_17 then_18 they_19 too_20 would_21 be_22 waved_23 back_24 into_25 the_26 wings_27 ._28
(a / and~e.6 :op1 (e / enter-01~e.9 :arg0 (p / person :arg0-of (l / light-04 :arg1 (l2 / lamp~e.3)) :source~e.11 (a2 / and~e.17 :op1 (c / country :wiki~e.4 "china"~e.5 :name (n2 / name :op1 "china"~e.5)) :op2 (c2 / country-region :wiki~e.4 "siberia"~e.7 :name (n3 / name :op1 "siberia"~e.7)))) :time~e.13 (n / next~e.0) :purpose~e.10 (s / step~e.12 :poss~e.11 p :part-of~e.11 (d2 / dance-01~e.15))) :op2 (w / wave-02~e.23 :arg1 p :arg2 (b / back~e.24 :direction (i / into~e.25 :op1 (w2 / wing~e.27))) :time (t / then~e.18) :degree (t2 / too~e.20)))

# after_0 that_1 would_2 come_3 the_4 turn_5 of_6 the_7 lamplighters_8 of_9 russia_10 and_11 the_12 indies_13 ;_14 then_15 those_16 of_17 africa_18 and_19 europe_20 ,_21 then_22 those_23 of_24 south_25 america_26 ;_27 then_28 those_29 of_30 south_31 america_32 ;_33 then_34 those_35 of_36 north_37 america_38 ._39
(c8 / come-03~e.3 :arg1 (t2 / turn~e.5 :poss (p / person~e.29 :arg0-of~e.6 (l / light-04~e.29 :arg1 (l2 / lamp~e.8)) :location (c3 / continent :wiki~e.34 "north_america"~e.37 :name (n2 / name :op1 "north"~e.37 :op2 "america"~e.38))) :time (a / after~e.0 :op1 (t / turn~e.5 :poss (p3 / person :arg0-of l :location (c2 / continent :wiki~e.24 "south_america"~e.25 :name (n / name :op1 "south"~e.25 :op2 "america"~e.26))) :time (a6 / after~e.0 :op1 (t3 / turn~e.5 :poss (p2 / person~e.23 :arg0-of l :location (a4 / and~e.11 :op1 (c4 / continent :wiki~e.17 "africa"~e.18 :name (n5 / name :op1 "africa"~e.18)) :op2 (c5 / continent :wiki~e.22 "europe"~e.20 :name (n6 / name :op1 "europe"~e.20)))) :time (a3 / after~e.0 :op1 (t4 / turn~e.5 :poss (p4 / person~e.16 :arg0-of~e.9 l :location (a2 / and~e.11 :op1 (c / country :wiki~e.9 "russia"~e.10 :name (n3 / name :op1 "russia"~e.10)) :op2 (w / world-region :wiki~e.9 "indies"~e.13 :name (n4 / name :op1 "indies"~e.13))))))))))))

# and_0 never_1 would_2 they_3 make_4 a_5 mistake_6 in_7 the_8 order_9 of_10 their_11 entry_12 upon_13 the_14 stage_15 ._16
(a / and~e.0 :op2 (m2 / mistake-02~e.6 :polarity -~e.4 :arg0 (t / they~e.3) :arg1 (o / order-03~e.9 :arg1 (e / enter-01~e.13 :arg0 t :arg1 (s / stage~e.15))) :time~e.7 (e2 / ever~e.1)))

# it_0 would_1 be_2 magnificent_3 ._4
(m / magnificent~e.3 :domain~e.0 (i / it~e.0))

# only_0 the_1 man_2 who_3 was_4 in_5 charge_6 of_7 the_8 single_9 lamp_10 at_11 the_12 north_13 pole_14 ,_15 and_16 his_17 colleague_18 who_19 was_20 responsible_21 for_22 the_23 single_24 lamp_25 at_26 the_27 south_28 pole_29 -_30 -_31 only_32 these_33 two_34 would_35 live_36 free_37 from_38 toil_39 and_40 care_41 :_42 they_43 would_44 be_45 busy_46 twice_47 a_48 year_49 ._50
(l / live-01~e.36 :arg0 (a2 / and~e.16 :op1 (m / man~e.2 :arg1-of (c4 / charge-05~e.6 :arg2 (l2 / lamp~e.10 :arg1-of (s / single-02~e.9) :location (w / world-region :wiki~e.7 "north_pole"~e.13 :name (n3 / name :op1 "north"~e.13 :op2 "pole"~e.14)))) :mod (o / only~e.0)) :op2 (c3 / colleague~e.18 :poss~e.17 m :arg0-of (r / responsible-03~e.21 :arg1 (l4 / lamp~e.25 :arg1-of (s2 / single-02~e.24)) :location (w2 / world-region :wiki~e.7 "south_pole"~e.28 :name (n / name :op1 "south"~e.28 :op2 "pole"~e.29)))) :mod (p / person :quant 2~e.34 :mod (t4 / this~e.33) :mod (o2 / only~e.32))) :arg3-of~e.38 (f / free-04~e.37 :arg1 a2 :arg2 (a / and~e.40 :op1 (t / toil-01~e.39) :op2 (c / care-01~e.41))) :arg1-of (c2 / cause-01~e.22 :arg0 (b / busy-01~e.46 :arg1 a2 :frequency~e.43 (r2 / rate-entity-91~e.47 :arg1 2 :arg2 (t3 / temporal-quantity :quant 1~e.48 :unit (y / year~e.49))))))

# chapter_0 17_1 ._2
(c / chapter~e.0 :mod 17~e.1)

# when_0 one_1 wishes_2 to_3 play_4 the_5 wit_6 ,_7 he_8 sometimes_9 wanders_10 a_11 little_12 from_13 the_14 truth_15 ._16
(w / wander-01~e.10 :arg0 o :arg1 (f / from~e.13 :op1 (t / truth~e.15)) :time~e.0 (w2 / wish-01~e.2 :arg0 (o / one~e.1) :arg1 (p / play-02~e.4 :arg0 o :arg1 (w3 / wit~e.6))) :degree (l / little~e.12) :frequency~e.8 (s / sometimes~e.9))

# i_0 have_1 not_2 been_3 altogether_4 honest_5 in_6 what_7 i_8 have_9 told_10 you_11 about_12 the_13 lamplighters_14 ._15
(h / honest-01~e.5 :arg0 (i / i~e.0) :arg1 (t2 / thing~e.7 :arg1-of~e.10 (t / tell-01~e.10 :arg0 i :arg2 (y / you~e.11) :topic~e.12 (p2 / person~e.8 :arg0-of~e.9 (l / light-04~e.9 :arg1 (l2 / lamp~e.14))))) :degree (a / altogether~e.4 :polarity~e.2 -~e.2))

# and_0 i_1 realize_2 that_3 i_4 run_5 the_6 risk_7 of_8 giving_9 a_10 false_11 idea_12 of_13 our_14 planet_15 to_16 those_17 who_18 do_19 not_20 know_21 it_22 ._23
(a / and~e.0 :op2 (r / realize-01~e.2 :arg0 (i / i~e.1) :arg1 (r2 / risk-01~e.7 :arg0 i :arg2 (g / give-01~e.5 :arg0 i :arg1 (i2 / idea~e.12 :mod (f / false~e.11) :topic~e.9 (p2 / planet~e.15 :source~e.14 (w / we~e.17))) :arg2 (p / person~e.21 :arg0-of~e.21 (k / know-02~e.21 :polarity~e.20 -~e.19 :arg1 p2))))))

# men_0 occupy_1 a_2 very_3 small_4 place_5 upon_6 the_7 earth_8 ._9
(o / occupy-01~e.1 :arg0 (m / man~e.0) :arg1 (p2 / place~e.5 :mod (s / small~e.4 :degree (v / very~e.3)) :location (p / planet :wiki~e.6 "earth"~e.8 :name (n / name :op1 "earth"~e.8))))

# if_0 the_1 two_2 billion_3 inhabitants_4 who_5 people_6 its_7 surface_8 were_9 all_10 to_11 stand_12 upright_13 and_14 somewhat_15 crowded_16 together_17 ,_18 as_19 they_20 do_21 for_22 some_23 big_24 public_25 assembly_26 ,_27 they_28 could_29 easily_30 be_31 put_32 into_33 one_34 public_35 square_36 twenty_37 miles_38 long_39 and_40 twenty_41 miles_42 wide_43 ._44
(p / possible-01~e.29 :arg1 (p2 / put-01~e.32 :arg1 p3 :arg2 (s5 / square~e.36 :arg1-of (p6 / public-02~e.35) :arg1-of (l / long-03~e.39 :arg2 (d2 / distance-quantity :quant 20~e.41 :unit (m / mile~e.42))) :arg1-of (w / wide-02~e.43 :mod (d3 / distance-quantity :quant 20~e.37 :unit (m2 / mile~e.38)))) :arg1-of (e / easy-05~e.30)) :condition~e.0 (s / stand-01~e.2 :arg0 (p3 / person :quant 2000000000~e.3 :arg0-of (i / inhabit-01~e.4) :arg2-of~e.11 (p4 / people-01~e.6 :arg1 (s2 / surface~e.8 :poss~e.7 (i2 / it~e.7))) :mod (a / all~e.10)) :arg1-of (r / resemble-01~e.19 :arg2 (d / do-02~e.21 :arg0 p3 :purpose~e.22 (a3 / assemble-02~e.26 :mod (p5 / public~e.25) :mod (b / big~e.24) :mod (s4 / some~e.23)))) :manner (a2 / and~e.14 :op1 (u / upright~e.13) :op2 (c / crowd-02~e.16 :manner (t / together~e.17) :degree (s3 / somewhat~e.15)))))

# all_0 humanity_1 could_2 be_3 piled_4 up_5 on_6 a_7 small_8 pacific_9 islet_10 ._11
(p / possible-01~e.2 :arg1 (p2 / pile-01~e.4 :arg1 (h / humanity~e.1 :mod (a / all~e.0)) :arg2 (i / islet~e.10 :mod (s / small~e.8) :location~e.6 (o2 / ocean :wiki~e.5 "pacific_ocean"~e.9 :name (n / name :op1 "pacific"~e.9)))))

# the_0 grown_1 -_2 ups_3 ,_4 to_5 be_6 sure_7 ,_8 will_9 not_10 believe_11 you_12 when_13 you_14 tell_15 them_16 that_17 ._18
(b / believe-01~e.11 :polarity~e.10 -~e.10 :arg0 (g2 / grown-up~e.1) :arg1 (y / you~e.12) :time~e.13 (t / tell-01~e.15 :arg0 y :arg1 (t2 / that~e.17) :arg2 g2) :arg1-of (s / sure-02~e.7))

# they_0 imagine_1 that_2 they_3 fill_4 a_5 great_6 deal_7 of_8 space_9 ._10
(i / imagine-01~e.1 :arg0 (t / they~e.0) :arg1 (f / fill-01~e.4 :arg1 (s / space~e.9 :quant (d / deal~e.7 :mod (g / great~e.6))) :arg2 t))

# they_0 fancy_1 themselves_2 as_3 important_4 as_5 the_6 baobabs_7 ._8
(f / fancy-01~e.1 :arg0 (t / they~e.2) :arg1 (i / important~e.4 :domain t :degree (e / equal~e.3) :compared-to~e.5 (b / baobab~e.7)))

# you_0 should_1 advise_2 them_3 ,_4 then_5 ,_6 to_7 make_8 their_9 own_10 calculations_11 ._12
(r / recommend-01~e.1 :arg1 (a / advise-01~e.2 :arg0 (y / you~e.0) :arg1 (t / they~e.3) :arg2 (c / calculate-01~e.11 :arg0 t)) :arg2 y)

# they_0 adore_1 figures_2 ,_3 and_4 that_5 will_6 please_7 them_8 ._9
(a / and~e.4 :op1 (a2 / adore-01~e.1 :arg0 (t / they~e.0) :arg1 (f / figure~e.2)) :op2 (p / please-01~e.7 :arg1 t :arg2 (t2 / that~e.5)))

# but_0 do_1 not_2 waste_3 your_4 time_5 on_6 this_7 extra_8 task_9 ._10
(c / contrast-01~e.0 :arg2 (w / waste-01~e.3 :mode imperative~e.1 :polarity~e.2 -~e.2 :arg0 (y / you~e.4) :arg1 (t / time~e.5 :poss~e.4 y) :arg2 (t2 / task-01~e.9 :mod (e / extra~e.8) :mod (t3 / this~e.7))))

# it_0 is_1 unnecessary_2 ._3
(n / need-01~e.2 :arg1 (i / it~e.0) :polarity -~e.2)

# you_0 have_1 ,_2 i_3 know_4 ,_5 confidence_6 in_7 me_8 ._9
(t / trust-01~e.6 :arg0 (y / you~e.0) :arg2 (i / i~e.8) :arg1-of (k / know-01~e.4 :arg0 i))

# when_0 the_1 little_2 prince_3 arrived_4 on_5 the_6 earth_7 ,_8 he_9 was_10 very_11 much_12 surprised_13 not_14 to_15 see_16 any_17 people_18 ._19
(s / surprise-01~e.13 :arg0 (s2 / see-01~e.16 :polarity~e.14 -~e.14 :arg0 p :arg1 (p2 / person~e.18 :quant (a / any~e.17))) :arg1 (p / prince~e.3 :mod (l / little~e.2)) :degree (m / much~e.12 :degree (v / very~e.11)) :time~e.0 (a2 / arrive-01~e.4 :arg1 p :arg4~e.5 (p3 / planet :wiki "earth"~e.7 :name (n / name :op1 "earth"~e.7))))

# he_0 was_1 beginning_2 to_3 be_4 afraid_5 he_6 had_7 come_8 to_9 the_10 wrong_11 planet_12 ,_13 when_14 a_15 coil_16 of_17 gold_18 ,_19 the_20 color_21 of_22 the_23 moonlight_24 ,_25 flashed_26 across_27 the_28 sand_29 ._30
(b / begin-01~e.2 :arg0 (h / he~e.0) :arg1 (f / fear-01~e.5 :arg0 h :arg1 (c / come-01~e.8 :arg1 h :arg4~e.6 (p / planet~e.12 :arg2-of~e.9 (w / wrong-04~e.11)))) :time~e.14 (f2 / flash-02~e.26 :arg1 (c2 / coil~e.16 :mod (g / gold~e.18 :mod (c3 / color~e.21 :poss (l / light-04 :arg0 (m / moon~e.24))))) :path (a / across~e.27 :op1 (s / sand~e.29))))

# "_0 good_1 evening_2 ,_3 "_4 said_5 the_6 little_7 prince_8 courteously_9 ._10
(s / say-01~e.5 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (e2 / evening~e.2 :arg1-of (g / good-02~e.1)) :manner (c / courteous~e.9))

# "_0 good_1 evening_2 ,_3 "_4 said_5 the_6 snake_7 ._8
(s / say-01~e.5 :arg0 (s2 / snake~e.7) :arg1 (d / date-entity :dayperiod~e.2 (e / evening~e.2) :arg1-of (g / good-02~e.1)))

# "_0 what_1 planet_2 is_3 this_4 on_5 which_6 i_7 have_8 come_9 down_10 ?_11 "_12 asked_13 the_14 little_15 prince_16 ._17
(a / ask-01~e.13 :arg0 (p / prince~e.16 :mod (l / little~e.15)) :arg1 (p2 / planet~e.2 :arg4-of~e.4 (c / come-01~e.9 :arg1 p :direction~e.5 (d / down~e.10)) :domain (a2 / amr-unknown~e.1)))

# "_0 this_1 is_2 the_3 earth_4 ;_5 this_6 is_7 africa_8 ,_9 "_10 the_11 snake_12 answered_13 ._14
(a / answer-01~e.13 :arg0 (s / snake~e.12) :arg2 (a2 / and :op1 (p / planet :wiki "earth"~e.4 :name (n / name :op1 "earth"~e.4) :domain (t / this~e.1)) :op2 (c / continent :wiki "africa"~e.8 :name (n2 / name :op1 "africa"~e.8) :domain (t2 / this~e.6))))

# "_0 ah_1 !_2
(a / ah~e.1 :mode~e.2 expressive~e.2)

# then_0 there_1 are_2 no_3 people_4 on_5 the_6 earth_7 ?_8 "_9
(p / person~e.1 :mode interrogative~e.8 :polarity~e.3 -~e.3 :location~e.5 (p2 / planet :wiki~e.0 "earth"~e.7 :name (n2 / name :op1 "earth"~e.7)))

# "_0 this_1 is_2 the_3 desert_4 ._5
(d2 / desert~e.4 :domain (t / this~e.1))

# there_0 are_1 no_2 people_3 in_4 the_5 desert_6 ._7
(p / person~e.3 :polarity~e.2 -~e.2 :location~e.4 (d / desert~e.6))

# the_0 earth_1 is_2 large_3 ,_4 "_5 said_6 the_7 snake_8 ._9
(s / say-01~e.6 :arg0 (s2 / snake~e.8) :arg1 (l / large~e.3 :domain (p / planet :wiki "earth"~e.1 :name (n / name :op1 "earth"~e.1))))

# the_0 little_1 prince_2 sat_3 down_4 on_5 a_6 stone_7 ,_8 and_9 raised_10 his_11 eyes_12 toward_13 the_14 sky_15 ._16
(a / and~e.9 :op1 (s / sit-down-02~e.3 :arg1 (p / prince~e.2 :mod (l / little~e.1)) :arg2 (s2 / stone~e.7) :direction~e.5 (d / down~e.4)) :op2 (r / raise-01~e.10 :arg0 p :arg1 (e / eye~e.12 :part-of~e.11 p) :direction~e.13 (s3 / sky~e.15)))

# "_0 i_1 wonder_2 ,_3 "_4 he_5 said_6 ,_7 "_8 whether_9 the_10 stars_11 are_12 set_13 alight_14 in_15 heaven_16 so_17 that_18 one_19 day_20 each_21 one_22 of_23 us_24 may_25 find_26 his_27 own_28 again_29 ..._30
(s / say-01~e.6 :arg0 (h / he~e.5) :arg1 (w2 / wonder-01~e.2 :arg0 h :arg1 (l / light-04~e.13 :mode interrogative~e.9 :arg1 (s2 / star~e.11) :location~e.15 (h2 / heaven~e.16) :purpose~e.17 (f / find-01~e.26 :arg0 (w / we~e.24 :mod (e / each~e.21)) :arg1 (s3 / star~e.11 :poss~e.27 w) :time (d / day~e.20 :mod (o / one~e.19)) :mod (a / again~e.29) :arg1-of (p / possible-01~e.14)))))

# look_0 at_1 my_2 planet_3 ._4
(l2 / look-01~e.0 :mode imperative~e.1 :arg0 (y / you) :arg1 (p / planet~e.3 :source~e.2 (i / i~e.2)))

# it_0 is_1 right_2 there_3 above_4 us_5 ._6
(b2 / be-located-at-91~e.0 :arg1 (i / it~e.0) :arg2 (t / there~e.3 :mod (r / right~e.2) :direction (a / above~e.4 :op1 (w / we~e.5))))

# but_0 how_1 far_2 away_3 it_4 is_5 !_6 "_7
(c2 / contrast-01~e.0 :arg2 (f / far~e.2 :direction~e.1 (a / away~e.3) :domain~e.4 (i / it~e.4) :degree (s / so~e.6)))

# "_0 it_1 is_2 beautiful_3 ,_4 "_5 the_6 snake_7 said_8 ._9
(s / say-01~e.8 :arg0 (s2 / snake~e.7) :arg1 (b / beautiful-02~e.3 :arg1 (i / it~e.1)))

# "_0 what_1 has_2 brought_3 you_4 here_5 ?_6 "_7
(b2 / bring-01~e.3 :arg0 (a / amr-unknown~e.6) :arg1 (y / you~e.4) :arg2 (h / here~e.5))

# "_0 i_1 have_2 been_3 having_4 some_5 trouble_6 with_7 a_8 flower_9 ,_10 "_11 said_12 the_13 little_14 prince_15 ._16
(s / say-01~e.12 :arg0 (p / prince~e.15 :mod (l / little~e.14)) :arg1 (h / have-03~e.2 :arg0 p :arg1 (t / trouble-01~e.6 :arg0 (f2 / flower~e.9) :mod (s2 / some~e.5))))

# "_0 ah_1 !_2 "_3 said_4 the_5 snake_6 ._7
(s / say-01~e.4 :arg0 (s2 / snake~e.6) :arg1 (a / ah-01~e.1))

# and_0 they_1 were_2 both_3 silent_4 ._5
(a / and~e.0 :op2 (s / silent~e.4 :domain (t / they~e.1 :mod (b / both~e.3))))

# "_0 where_1 are_2 the_3 men_4 ?_5 "_6 the_7 little_8 prince_9 at_10 last_11 took_12 up_13 the_14 conversation_15 again_16 ._17
(a3 / and~e.13 :op1 (t / take-up-31~e.12 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (c / converse-01~e.15) :mod (a / again~e.16) :time~e.10 (a2 / at-last~e.11)) :op2 (b2 / be-located-at-91~e.1 :arg1 (m / man~e.4) :arg2 (a4 / amr-unknown~e.5)))

# "_0 it_1 is_2 a_3 little_4 lonely_5 in_6 the_7 desert_8 ..._9 "_10
(l2 / lonely~e.5 :domain~e.1 (b / be-located-at-91~e.6 :arg2 (d / desert~e.8)) :degree (l / little~e.4))

# "_0 it_1 is_2 also_3 lonely_4 among_5 men_6 ,_7 "_8 the_9 snake_10 said_11 ._12
(s / say-01~e.11 :arg0 (s2 / snake~e.10) :arg1 (l / lonely~e.4 :domain~e.1 (b / be-located-at-91~e.1 :arg2 (a3 / among~e.5 :op1 (m / man~e.6))) :mod (a2 / also~e.3)))

# the_0 little_1 prince_2 gazed_3 at_4 him_5 for_6 a_7 long_8 time_9 ._10
(g / gaze-01~e.3 :arg0 (p / prince~e.2 :mod (l / little~e.1)) :arg1 (h / he~e.5) :arg1-of~e.9 (l2 / long-03~e.8))

# "_0 you_1 are_2 a_3 funny_4 animal_5 ,_6 "_7 he_8 said_9 at_10 last_11 ._12
(s / say-01~e.9 :arg0 (h / he~e.8) :arg1 (a2 / animal~e.5 :mod (f / funny~e.4) :domain~e.3 (y / you~e.1)) :time~e.10 (a / at-last~e.11))

# "_0 you_1 are_2 no_3 thicker_4 than_5 a_6 finger_7 ..._8 "_9
(t / thick-03~e.4 :arg1 (y / you~e.1) :degree (m / more :polarity~e.3 -~e.3) :compared-to~e.5 (f / finger~e.7))

# "_0 but_1 i_2 am_3 more_4 powerful_5 than_6 the_7 finger_8 of_9 a_10 king_11 ,_12 "_13 said_14 the_15 snake_16 ._17
(s / say-01~e.14 :arg0 (s2 / snake~e.16) :arg1 (c2 / contrast-01~e.1 :arg2 (p / powerful-02~e.5 :arg1 (i / i~e.2) :degree (m / more~e.4) :compared-to~e.6 (f / finger~e.8 :part-of~e.9 (k / king~e.11)))))

# the_0 little_1 prince_2 smiled_3 ._4
(s / smile-01~e.3 :arg0 (p / prince~e.2 :mod (l / little~e.1)))

# "_0 you_1 are_2 not_3 very_4 powerful_5 ._6
(p / powerful-02~e.5 :arg1 (y / you~e.1) :degree (v / very~e.4 :polarity~e.3 -~e.3))

# you_0 have_1 n't_2 even_3 any_4 feet_5 ._6
(h / have-03~e.1 :polarity~e.2 - :arg0 (y / you~e.0) :arg1 (f / foot~e.5 :quant (a / any~e.4)) :mod (e / even~e.3))

# you_0 can_1 not_2 even_3 travel_4 ..._5 "_6
(p / possible-01~e.1 :polarity~e.2 -~e.2 :arg1 (t / travel-01~e.4 :arg0 (y / you~e.0)) :mod (e / even~e.3))

# "_0 i_1 can_2 carry_3 you_4 farther_5 than_6 any_7 ship_8 could_9 take_10 you_11 ,_12 "_13 said_14 the_15 snake_16 ._17
(s / say-01~e.14 :arg0 (s2 / snake~e.16) :arg1 (p / possible-01~e.9 :arg1 (c / carry-01~e.3 :arg0 s2 :arg1 (y / you~e.4) :extent~e.10 (f / far~e.5 :degree (m / more~e.5) :compared-to~e.6 (t / take-01~e.10 :arg0 (s3 / ship~e.8 :mod (a / any~e.7)) :arg1 y)))))

# he_0 twined_1 himself_2 around_3 the_4 little_5 prince_6 's_7 ankle_8 ,_9 like_10 a_11 golden_12 bracelet_13 ._14
(t / twine-01~e.1 :arg0 (h / he~e.0) :arg1 h :arg2 (a / ankle~e.8 :part-of~e.7 (p / prince~e.6 :mod (l / little~e.5))) :manner (r / resemble-01~e.10 :arg2 (b / bracelet~e.13 :consist-of~e.3 (g / gold~e.12))))

# "_0 whomever_1 i_2 touch_3 ,_4 i_5 send_6 back_7 to_8 the_9 earth_10 from_11 whence_12 he_13 came_14 ,_15 "_16 the_17 snake_18 spoke_19 again_20 ._21
(s / speak-01~e.19 :arg0 (s2 / snake~e.18) :arg1 (s3 / send-01~e.6 :arg0 s2 :arg1 (p / person~e.1 :arg1-of~e.3 (t / touch-01~e.3 :arg0 s2) :mod (a2 / any~e.2)) :arg2 (b / back~e.7 :op1 (e / earth~e.10 :arg3-of~e.11 (c / come-01~e.14 :arg1 p)))) :mod (a / again~e.20))

# "_0 but_1 you_2 are_3 innocent_4 and_5 true_6 ,_7 and_8 you_9 come_10 from_11 a_12 star_13 ..._14 "_15
(c / contrast-01~e.1 :arg2 (a / and~e.8 :op1 (a2 / and~e.5 :op1 (i / innocent-01~e.4 :arg1 (y / you~e.2)) :op2 (t / true-01~e.6 :arg1 y)) :op2 (c2 / come-01~e.10 :arg1 y :arg3~e.11 (s2 / star~e.13))))

# the_0 little_1 prince_2 made_3 no_4 reply_5 ._6
(r / reply-01~e.5 :arg0 (p / prince~e.2 :mod (l / little~e.1)) :polarity~e.4 -~e.3)

# "_0 you_1 move_2 me_3 to_4 pity_5 -_6 -_7 you_8 are_9 so_10 weak_11 on_12 this_13 earth_14 made_15 of_16 granite_17 ,_18 "_19 the_20 snake_21 said_22 ._23
(s / say-01~e.22 :arg0 (s2 / snake~e.21) :arg1 (p3 / pity-01~e.5 :arg0 s2 :arg1 (y / you~e.1) :arg1-of (c / cause-01 :arg0 (w / weak-02~e.11 :arg1 y :degree (s3 / so~e.10) :location~e.12 (p2 / planet :wiki~e.16 "earth"~e.14 :name (n / name :op1 "earth"~e.14) :consist-of~e.15 (g / granite~e.17) :mod (t / this~e.13))))))

# "_0 i_1 can_2 help_3 you_4 ,_5 some_6 day_7 ,_8 if_9 you_10 grow_11 too_12 homesick_13 for_14 your_15 own_16 planet_17 ._18
(p / possible-01~e.2 :arg1 (h / help-01~e.3 :arg0 (i / i~e.1) :arg1 (y / you~e.4) :time (d / day~e.7 :mod (s / some~e.6))) :condition~e.9 (g / grow-02~e.11 :arg1 y :arg2 (h2 / homesick~e.13 :topic~e.16 (p2 / planet~e.17 :source-of~e.15 y) :degree (t / too~e.12) :domain y)))

# i_0 can_1 -_2 -_3 "_4
(p / possible-01~e.1 :arg1 (d / do-02 :arg0 (i / i~e.0)))

# "_0 oh_1 !_2
(o / oh~e.1 :mode~e.2 expressive~e.2)

# i_0 understand_1 you_2 very_3 well_4 ,_5 "_6 said_7 the_8 little_9 prince_10 ._11
(s / say-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (u / understand-01~e.1 :arg0 p :arg1 (y / you~e.2) :mod (w / well~e.4 :degree (v / very~e.3))))

# "_0 but_1 why_2 do_3 you_4 always_5 speak_6 in_7 riddles_8 ?_9 "_10
(c / contrast-01~e.1 :arg2 (s2 / speak-01~e.6 :arg0 (y / you~e.4) :arg1 (r / riddle~e.8) :time~e.7 (a / always~e.5) :purpose~e.2 (a2 / amr-unknown~e.9)))

# "_0 i_1 solve_2 them_3 all_4 ,_5 "_6 said_7 the_8 snake_9 ._10
(s / say-01~e.7 :arg0 (s2 / snake~e.9) :arg1 (s3 / solve-01~e.2 :arg0 s2 :arg1 (t / they~e.3 :mod (a / all~e.4))))

# and_0 they_1 were_2 both_3 silent_4 ._5
(a / and~e.0 :op2 (s / silent~e.4 :domain (t / they~e.1 :mod (b / both~e.3))))

# chapter_0 18_1 ._2
(c / chapter~e.0 :mod 18~e.1)

# the_0 little_1 prince_2 crossed_3 the_4 desert_5 and_6 met_7 with_8 only_9 one_10 flower_11 ._12
(a / and~e.6 :op1 (c / cross-02~e.3 :arg0 (p / prince~e.2 :mod (l / little~e.1)) :arg1 (d / desert~e.5)) :op2 (m / meet-03~e.7 :arg0 p :arg1 (f / flower~e.11 :quant 1~e.10) :mod (o2 / only~e.9)))

# it_0 was_1 a_2 flower_3 with_4 three_5 petals_6 ,_7 a_8 flower_9 of_10 no_11 account_12 at_13 all_14 ._15
(f2 / flower~e.3 :arg0-of (h / have-03~e.2 :arg1 (p / petal~e.6 :quant 3~e.5)) :mod (a2 / account~e.12 :polarity~e.11 -~e.11) :domain~e.0 (i / it~e.0))

# "_0 good_1 morning_2 ,_3 "_4 said_5 the_6 little_7 prince_8 ._9
(s / say-01~e.5 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (m2 / morning~e.2 :arg1-of (g / good-02~e.1)))

# "_0 good_1 morning_2 ,_3 "_4 said_5 the_6 flower_7 ._8
(s / say-01~e.5 :arg0 (f / flower-01~e.7) :arg1 (m2 / morning~e.2 :arg1-of (g / good-02~e.1)))

# "_0 where_1 are_2 the_3 men_4 ?_5 "_6 the_7 little_8 prince_9 asked_10 ,_11 politely_12 ._13
(a / ask-01~e.10 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (b / be-located-at-91~e.1 :arg1 (m / man~e.4) :arg2 (a2 / amr-unknown~e.5)) :manner (p3 / polite-01~e.12))

# the_0 flower_1 had_2 once_3 seen_4 a_5 caravan_6 passing_7 ._8
(s / see-01~e.4 :frequency~e.3 1~e.5 :arg0 (f / flower~e.1) :arg1 (p / pass-02~e.7 :arg0 (c / caravan-01~e.6)))

# "_0 men_1 ?_2 "_3 she_4 echoed_5 ._6
(e / echo-01~e.5 :arg0 (s / she~e.4) :arg1 (m / man~e.1 :mode interrogative~e.2))

# "_0 i_1 think_2 there_3 are_4 six_5 or_6 seven_7 of_8 them_9 in_10 existence_11 ._12
(t / think-01~e.2 :arg0 (i / i~e.1) :arg1 (e / exist-01~e.11 :arg1 (t2 / they~e.9 :quant (o / or~e.6 :op1 6~e.5 :op2 7~e.7))))

# i_0 saw_1 them_2 ,_3 several_4 years_5 ago_6 ._7
(s / see-01~e.1 :arg0 (i / i~e.0) :arg1 (t / they~e.2) :time (b / before~e.6 :op1 (n / now~e.5) :quant (s2 / several~e.4 :op1 (t2 / temporal-quantity :quant 1 :unit (y / year~e.5)))))

# but_0 one_1 never_2 knows_3 where_4 to_5 find_6 them_7 ._8
(c / contrast-01~e.0 :arg2 (k / know-01~e.3 :arg0 (p / person~e.1 :arg1-of~e.1 (i / include-91~e.1 :arg2 (t2 / they~e.7))) :arg1 (f / find-01~e.6 :arg0 p :arg1 (t / they~e.7) :location~e.4 (a / amr-unknown~e.4)) :time (e / ever~e.2 :polarity~e.2 -~e.2)))

# the_0 wind_1 blows_2 them_3 away_4 ._5
(b / blow-01~e.2 :arg0 (w / wind~e.1) :arg1 (t / they~e.3) :direction (a / away~e.4))

# they_0 have_1 no_2 roots_3 ,_4 and_5 that_6 makes_7 their_8 life_9 very_10 difficult_11 ._12 "_13
(a / and~e.5 :op1 (h / have-03~e.1 :polarity~e.2 -~e.2 :arg0 (t / they~e.0) :arg1 (r / root~e.3)) :op2 (m / make-02~e.7 :arg0 h :arg1 (d / difficult~e.11 :domain (t2 / thing~e.9 :arg1-of~e.9 (l / live-01~e.9) :poss~e.8 t) :degree (v / very~e.10))))

# "_0 goodbye_1 ,_2 "_3 said_4 the_5 little_6 prince_7 ._8
(s / say-01~e.4 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg1 (g / goodbye~e.1))

# "_0 goodbye_1 ,_2 "_3 said_4 the_5 flower_6 ._7
(s / say-01~e.4 :arg0 (f / flower~e.6) :arg1 (g / goodbye~e.1))

# chapter_0 19_1 ._2
(c / chapter~e.0 :mod 19~e.1)

# after_0 that_1 ,_2 the_3 little_4 prince_5 climbed_6 a_7 high_8 mountain_9 ._10
(c / climb-01~e.6 :arg0 (p / prince~e.5 :mod (l / little~e.4)) :arg1 (m / mountain~e.9 :arg1-of (h / high-02~e.8)) :time (a / after~e.0 :op1 (t / that~e.1)))

# the_0 only_1 mountains_2 he_3 had_4 ever_5 known_6 were_7 the_8 three_9 volcanoes_10 ,_11 which_12 came_13 up_14 to_15 his_16 knees_17 ._18
(v / volcano~e.10 :quant 3~e.9 :domain (m / mountain~e.2 :mod (o / only~e.1) :arg1-of~e.4 (k / know-01~e.6 :arg0 (h / he~e.3) :time (e / ever~e.5))) :arg1-of (c / come-04~e.13 :arg2 (u / up-to~e.14 :op1 (k2 / knee~e.17 :part-of~e.16 h))))

# and_0 he_1 used_2 the_3 extinct_4 volcano_5 as_6 a_7 footstool_8 ._9
(a / and~e.0 :op2 (u / use-01~e.2 :arg0 (h / he~e.1) :arg1 (v / volcano~e.5 :mod (e / extinct~e.4)) :arg2 (f / footstool~e.8)))

# "_0 from_1 a_2 mountain_3 as_4 high_5 as_6 this_7 one_8 ,_9 "_10 he_11 said_12 to_13 himself_14 ,_15 "_16 i_17 shall_18 be_19 able_20 to_21 see_22 the_23 whole_24 planet_25 at_26 one_27 glance_28 ,_29 and_30 all_31 the_32 people_33 ..._34 "_35
(s / say-01~e.12 :arg0 (h / he~e.11) :arg1 (p / possible-01~e.20 :arg1 (s2 / see-01~e.22 :arg0 h :arg1 (a / and~e.30 :op1 (p2 / planet~e.25 :extent~e.26 (w / whole~e.24)) :op2 (p3 / person~e.33 :mod (a3 / all~e.31))) :source~e.1 (m / mountain~e.3 :arg1-of (h2 / high-02~e.5 :degree (e / equal~e.4) :compared-to~e.6 (m2 / mountain~e.3 :mod (t / this~e.7)))) :manner (g / glance-01~e.28 :quant 1~e.27))) :arg2 h)

# but_0 he_1 saw_2 nothing_3 ,_4 save_5 peaks_6 of_7 rock_8 that_9 were_10 sharpened_11 like_12 needles_13 ._14
(c / contrast-01~e.0 :arg2 (s / see-01~e.2 :arg0 (h / he~e.1) :arg1 (n / nothing~e.3 :arg2-of (e / except-01~e.5 :arg1 (p / peak~e.6 :consist-of~e.7 (r / rock~e.8) :arg1-of~e.9 (s2 / sharpen-01~e.11 :manner (r2 / resemble-01~e.12 :arg1 p :arg2 (n2 / needle~e.13))))))))

# "_0 good_1 morning_2 ,_3 "_4 he_5 said_6 courteously_7 ._8
(s / say-01~e.6 :arg0 (h / he~e.5) :arg1 (m / morning~e.2 :arg1-of (g / good-02~e.1)) :manner (c / courtesy~e.7))

# "_0 good_1 morning_2 -_3 -_4 good_5 morning_6 -_7 -_8 good_9 morning_10 ,_11 "_12 answered_13 the_14 echo_15 ._16
(a / answer-01~e.13 :arg0 (e / echo-01~e.15) :arg1 (m2 / morning~e.10 :arg1-of (g / good-02~e.9)))

# "_0 who_1 are_2 you_3 ?_4 "_5 said_6 the_7 little_8 prince_9 ._10
(s / say-01~e.6 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg2 (y / you~e.3 :domain (a / amr-unknown~e.4)))

# "_0 who_1 are_2 you_3 -_4 -_5 who_6 are_7 you_8 -_9 -_10 who_11 are_12 you_13 ?_14 "_15 answered_16 the_17 echo_18 ._19
(a / answer-01~e.16 :arg0 (e / echo-01~e.18) :arg2 (y / you~e.8 :domain (a2 / amr-unknown~e.14)))

# "_0 be_1 my_2 friends_3 ._4
(h / have-rel-role-91~e.2 :mode imperative~e.3 :arg0 (y / you) :arg1 (i / i~e.2) :arg2 (f / friend~e.3))

# i_0 am_1 all_2 alone_3 ,_4 "_5 he_6 said_7 ._8
(s / say-01~e.7 :arg0 (h / he~e.6) :arg1 (a / alone~e.3 :degree (a2 / all~e.2) :domain h))

# "_0 i_1 am_2 all_3 alone_4 -_5 -_6 all_7 alone_8 -_9 -_10 all_11 alone_12 ,_13 "_14 answered_15 the_16 echo_17 ._18
(a / answer-01~e.15 :arg0 (e / echo-01~e.17) :arg2 (a2 / alone~e.12 :domain~e.11 (i / i~e.1) :mod (a3 / all~e.7)))

# "_0 what_1 a_2 queer_3 planet_4 !_5 "_6 he_7 thought_8 ._9
(t / think-01~e.8 :arg0 (h / he~e.7) :arg1 (p / planet~e.4 :mod (q / queer~e.3 :degree (a / amr-unknown~e.1))))

# "_0 it_1 is_2 altogether_3 dry_4 ,_5 and_6 altogether_7 pointed_8 ,_9 and_10 altogether_11 harsh_12 and_13 forbidding_14 ._15
(a / and~e.6 :op1 (d / dry-08~e.4 :arg1 (i / it~e.1) :degree (a2 / altogether~e.7)) :op2 (p / pointed~e.8 :degree (a3 / altogether~e.11) :domain i) :op3 (a4 / and~e.13 :op1 (h / harsh-02~e.12 :arg1 i) :op2 (f / forbidding~e.14 :domain i) :degree (a5 / altogether~e.3)))

# and_0 the_1 people_2 have_3 no_4 imagination_5 ._6
(a / and~e.0 :op2 (h / have-03~e.3 :arg0 (p / person~e.2) :arg1 (i2 / imagine-01~e.5 :polarity~e.4 -~e.4)))

# they_0 repeat_1 whatever_2 one_3 says_4 to_5 them_6 ..._7
(r / repeat-01~e.1 :arg0 (t2 / they~e.0) :arg1 (t / thing~e.2 :arg1-of~e.4 (s2 / say-01~e.4 :arg0 (p / person~e.3 :arg1-of~e.3 (i / include-91~e.3 :arg2 (t3 / they~e.6))) :arg2 t2) :mod (a / all~e.6)))

# on_0 my_1 planet_2 i_3 had_4 a_5 flower_6 ;_7 she_8 always_9 was_10 the_11 first_12 to_13 speak_14 ..._15 "_16
(h / have-03~e.4 :arg0 (i / i~e.3) :arg1 (f / flower~e.6 :arg0-of (s / speak-01~e.14 :ord~e.12 (o / ordinal-entity~e.12 :value 1) :time (a / always~e.9))) :location~e.0 (p2 / planet~e.2 :poss~e.1 i))

# chapter_0 20_1 ._2
(c / chapter~e.0 :mod 20~e.1)

# but_0 it_1 happened_2 that_3 after_4 walking_5 for_6 a_7 long_8 time_9 through_10 sand_11 ,_12 and_13 rocks_14 ,_15 and_16 snow_17 ,_18 the_19 little_20 prince_21 at_22 last_23 came_24 upon_25 a_26 road_27 ._28
(c / contrast-01~e.0 :arg2 (c2 / come-upon-26~e.24 :arg0 (p / prince~e.21 :mod (l / little~e.20)) :arg1 (r / road~e.27) :time~e.22 (a / after~e.4 :op1 (w / walk-01~e.5 :arg0 p :path~e.10 (a2 / and~e.13 :op1 (s / sand~e.11) :op2 (r2 / rock~e.14) :op3 (t / thing~e.17 :arg1-of~e.17 (s2 / snow-01~e.17))) :arg1-of~e.9 (l3 / long-03~e.8))) :time~e.22 (a3 / at-last~e.23)))

# and_0 all_1 roads_2 lead_3 to_4 the_5 abodes_6 of_7 men_8 ._9
(a / and~e.0 :op2 (l / lead-01~e.3 :arg0 (r / road~e.2 :mod (a2 / all~e.1)) :arg4~e.4 (a3 / abode~e.6 :poss (m / man~e.8))))

# "_0 good_1 morning_2 ,_3 "_4 he_5 said_6 ._7
(s / say-01~e.6 :arg0 (h / he~e.5) :arg1 (m / morning~e.2 :arg1-of (g / good-02~e.1)))

# he_0 was_1 standing_2 before_3 a_4 garden_5 ,_6 all_7 a_8 -_9 bloom_10 with_11 roses_12 ._13
(s / stand-01~e.2 :arg1 (h / he~e.0) :arg2 (b / before~e.3 :op1 (g / garden~e.5 :location-of~e.7 (b2 / bloom-01~e.10 :arg0 (r / rose~e.12)))))

# "_0 good_1 morning_2 ,_3 "_4 said_5 the_6 roses_7 ._8
(s / say-01~e.5 :arg0 (r / rose~e.7) :arg1 (m / morning~e.2 :arg1-of (g / good-02~e.1)))

# the_0 little_1 prince_2 gazed_3 at_4 them_5 ._6
(g / gaze-01~e.3 :arg0 (p / prince~e.2 :mod (l / little~e.1)) :arg1 (t / they~e.5))

# they_0 all_1 looked_2 like_3 his_4 flower_5 ._6
(l / look-02~e.2 :arg0 (t / they~e.0 :mod (a / all~e.1)) :arg1 (f / flower~e.5 :poss~e.4 (h / he~e.4)))

# "_0 who_1 are_2 you_3 ?_4 "_5 he_6 demanded_7 ,_8 thunderstruck_9 ._10
(d / demand-01~e.7 :arg0 (h / he~e.6 :mod (t / thunderstruck~e.9)) :arg1 (a / amr-unknown~e.4 :domain (y2 / you~e.3)))

# "_0 we_1 are_2 roses_3 ,_4 "_5 the_6 roses_7 said_8 ._9
(s / say-01~e.8 :arg0 (r / rose~e.7) :arg1 (r2 / rose~e.3 :domain~e.1 r))

# and_0 he_1 was_2 overcome_3 with_4 sadness_5 ._6
(a / and~e.0 :op2 (o / overcome-01~e.3 :arg0 (s / sad-02~e.5) :arg1 (h / he~e.1)))

# his_0 flower_1 had_2 told_3 him_4 that_5 she_6 was_7 the_8 only_9 one_10 of_11 her_12 kind_13 in_14 all_15 the_16 universe_17 ._18
(t / tell-01~e.3 :arg0 (f / flower~e.1 :poss~e.0 (h / he~e.4)) :arg1 (u2 / unique~e.9 :domain (s / she~e.6) :location~e.14 (u / universe~e.17 :mod (a / all~e.15))) :arg2 h)

# and_0 here_1 were_2 five_3 thousand_4 of_5 them_6 ,_7 all_8 alike_9 ,_10 in_11 one_12 single_13 garden_14 !_15
(a / and~e.0 :op1 (t / they~e.6 :quant 5000~e.3 :arg1-of (a2 / alike-05~e.9 :mod (a3 / all~e.8)) :location~e.11 (h / here~e.1) :location~e.11 (g / garden~e.14 :quant 1~e.12)))

# "_0 she_1 would_2 be_3 very_4 much_5 annoyed_6 ,_7 "_8 he_9 said_10 to_11 himself_12 ,_13 "_14 if_15 she_16 should_17 see_18 that_19 ..._20 she_21 would_22 cough_23 most_24 dreadfully_25 ,_26 and_27 she_28 would_29 pretend_30 that_31 she_32 was_33 dying_34 ,_35 to_36 avoid_37 being_38 laughed_39 at_40 ._41
(s / say-01~e.10 :arg0 (h / he~e.9) :arg1 (a / and~e.27 :op1 (a2 / annoy-01~e.6 :arg1 (s2 / she~e.32) :degree (m2 / much~e.5 :degree (v / very~e.4))) :op2 (c / cough-01~e.23 :arg0 s2 :manner (d2 / dreadful-02~e.25 :degree (m / most~e.24))) :op3 (p / pretend-01~e.30 :arg0 s2 :arg1 (d / die-01~e.34 :arg1 s2) :purpose~e.36 (a3 / avoid-01~e.37 :arg0 s2 :arg1 (l / laugh-01~e.39 :arg2 s2))) :condition~e.15 (s3 / see-01~e.18 :arg0 s2 :arg1 (t / that~e.19))) :arg2 h)

# and_0 i_1 should_2 be_3 obliged_4 to_5 pretend_6 that_7 i_8 was_9 nursing_10 her_11 back_12 to_13 life_14 -_15 -_16 for_17 if_18 i_19 did_20 not_21 do_22 that_23 ,_24 to_25 humble_26 myself_27 also_28 ,_29 she_30 would_31 really_32 allow_33 herself_34 to_35 die_36 ..._37 "_38
(a / and~e.0 :op2 (o / oblige-02~e.4 :arg1 i :arg2 (p / pretend-01~e.6 :arg0 i :arg1 (n / nurse-01~e.10 :arg0 i :arg1 s :purpose~e.12 (l / live-01~e.14 :arg0 s)))) :arg1-of (c / cause-01~e.17 :arg0 (a2 / allow-01~e.33 :arg0 (s / she~e.34) :arg1 (d / die-01~e.36 :arg1 s) :arg1-of (r / real-04~e.32) :condition~e.18 (p2 / pretend-01~e.6 :polarity~e.21 -~e.20 :arg0 i :arg1 n :purpose~e.25 (h / humble-01~e.26 :arg0 i :arg1 (i / i~e.27) :mod (a3 / also~e.28))))))

# then_0 he_1 went_2 on_3 with_4 his_5 reflections_6 :_7 "_8 i_9 thought_10 that_11 i_12 was_13 rich_14 ,_15 with_16 a_17 flower_18 that_19 was_20 unique_21 in_22 all_23 the_24 world_25 ;_26 and_27 all_28 i_29 had_30 was_31 a_32 common_33 rose_34 ._35
(g / go-on-25~e.2 :arg0 h :arg1 (r / reflect-02~e.6 :arg0 (h / he~e.5) :arg1 (c2 / contrast-01 :arg1 (t / think-01~e.10 :arg0 h :arg1 (r3 / rich~e.14 :arg1-of (c3 / cause-01~e.11 :arg0 (h3 / have-03~e.17 :arg0 h :arg1 (f / flower~e.18 :mod (u / unique~e.21 :compared-to~e.27 (w / world~e.25 :mod (a2 / all~e.23)))))) :domain h)) :arg2 (h2 / have-03~e.30 :arg0 h :arg1 (r2 / rose~e.34 :mod (c / common~e.33)) :mod (a / all~e.28)))) :time (t2 / then~e.0))

# a_0 common_1 rose_2 ,_3 and_4 three_5 volcanoes_6 that_7 come_8 up_9 to_10 my_11 knees_12 -_13 -_14 and_15 one_16 of_17 them_18 perhaps_19 extinct_20 forever_21 ..._22 that_23 does_24 n't_25 make_26 me_27 a_28 very_29 great_30 prince_31 ..._32 "_33
(m / make-02~e.26 :polarity~e.25 -~e.24 :arg0 (a / and~e.4 :op1 (r / rose~e.2 :mod (c / common~e.1)) :op2 (v2 / volcano~e.6 :quant 3~e.5 :arg1-of~e.7 (c2 / come-01~e.8 :arg4~e.10 (k / knee~e.12 :part-of~e.11 i) :direction (u / up~e.9)) :arg2-of (i2 / include-91~e.18 :arg1 (v3 / volcano~e.6 :quant 1~e.16 :mod (e / extinct~e.20 :mod (p2 / perhaps~e.19) :duration~e.28 (f / forever~e.21)))))) :arg1 (p / prince~e.31 :mod (g / great~e.30 :degree (v / very~e.29)) :domain (i / i~e.27)))

# and_0 he_1 lay_2 down_3 in_4 the_5 grass_6 and_7 cried_8 ._9
(a2 / and~e.0 :op2 (a / and~e.7 :op1 (l / lie-07~e.2 :arg1 (h / he~e.1) :arg2 (g / grass~e.6) :direction (d / down~e.3)) :op2 (c / cry-02~e.8 :arg0 h)))

# chapter_0 21_1 ._2
(c / chapter~e.0 :mod 21~e.1)

# it_0 was_1 then_2 that_3 the_4 fox_5 appeared_6 ._7
(a / appear-01~e.6 :arg1 (f / fox~e.5) :time (t / then~e.2))

# "_0 good_1 morning_2 ,_3 "_4 said_5 the_6 fox_7 ._8
(s / say-01~e.5 :arg0 (f / fox~e.7) :arg1 (m / morning~e.2 :arg1-of (g / good-02~e.1)))

# "_0 good_1 morning_2 ,_3 "_4 the_5 little_6 prince_7 responded_8 politely_9 ,_10 although_11 when_12 he_13 turned_14 around_15 he_16 saw_17 nothing_18 ._19
(r / respond-01~e.8 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg2 (m / morning~e.2 :arg1-of (g / good-02~e.1)) :manner (p2 / polite-01~e.9) :concession~e.11 (s / see-01~e.17 :arg0 p :arg1 (n / nothing~e.18) :time~e.12 (t / turn-01~e.14 :arg1 p :direction~e.13 (a / around~e.15))))

# "_0 i_1 am_2 right_3 here_4 ,_5 "_6 the_7 voice_8 said_9 ,_10 "_11 under_12 the_13 apple_14 tree_15 ._16 "_17
(s / say-01~e.9 :arg0 (v / voice~e.8) :arg1 (i / i~e.1 :location~e.4 (h / here~e.4 :location (u / under~e.12 :op1 (t / tree~e.15 :mod (a / apple~e.14))) :mod (r / right~e.3))))

# "_0 who_1 are_2 you_3 ?_4 "_5 asked_6 the_7 little_8 prince_9 ,_10 and_11 added_12 ,_13 "_14 you_15 are_16 very_17 pretty_18 to_19 look_20 at_21 ._22 "_23
(a / and~e.11 :op1 (a2 / ask-01~e.6 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (y2 / you~e.15 :mod (a3 / amr-unknown~e.4))) :op2 (a4 / add-01~e.12 :arg0 p :arg1 (l2 / look-01~e.20 :arg0 p :arg1 y2 :arg2 (p2 / pretty~e.18 :degree (v / very~e.17)))))

# "_0 i_1 am_2 a_3 fox_4 ,_5 "_6 said_7 the_8 fox_9 ._10
(s / say-01~e.7 :arg0 (f / fox~e.9) :arg1 (f2 / fox~e.4 :domain~e.3 f))

# "_0 come_1 and_2 play_3 with_4 me_5 ,_6 "_7 proposed_8 the_9 little_10 prince_11 ._12
(p / propose-01~e.8 :arg0 (p2 / prince~e.11 :mod (l / little~e.10)) :arg1 (a / and~e.2 :op1 (c / come-01~e.1) :op2 (p3 / play-01~e.3 :arg3~e.4 p2)))

# "_0 i_1 am_2 so_3 unhappy_4 ._5 "_6
(h / happy-01~e.4 :polarity - :arg1 (i / i~e.1) :mod (s / so~e.3))

# "_0 i_1 can_2 not_3 play_4 with_5 you_6 ,_7 "_8 the_9 fox_10 said_11 ._12
(s / say-01~e.11 :arg0 (f / fox~e.10) :arg1 (p / possible-01~e.2 :polarity~e.3 -~e.3 :arg1 (p2 / play-01~e.4 :arg0 f :arg3~e.5 (y / you~e.6))))

# "_0 i_1 am_2 not_3 tamed_4 ._5 "_6
(t / tame-01~e.4 :arg1 (i / i~e.1) :polarity~e.3 -~e.3)

# "_0 ah_1 !_2
(a / ah~e.1 :mode~e.2 expressive~e.2)

# please_0 excuse_1 me_2 ,_3 "_4 said_5 the_6 little_7 prince_8 ._9
(s / say-01~e.5 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (e / excuse-01~e.1 :mode imperative~e.2 :polite~e.0 +~e.0 :arg0 (y / you~e.2) :arg1 (i / i~e.2)))

# but_0 ,_1 after_2 some_3 thought_4 ,_5 he_6 added_7 :_8 "_9 what_10 does_11 that_12 mean_13 -_14 -_15 '_16 tame_17 '_18 ?_19 "_20
(c / contrast-01~e.0 :arg2 (a / add-01~e.7 :arg0 (h / he~e.6) :arg1 (m / mean-01~e.13 :arg1 (t2 / tame-01~e.17) :arg2 (a3 / amr-unknown~e.19)) :time (a2 / after~e.2 :op1 (t / think-01~e.4 :mod (s / some~e.3)))))

# "_0 you_1 do_2 not_3 live_4 here_5 ,_6 "_7 said_8 the_9 fox_10 ._11
(s / say-01~e.8 :arg0 (f / fox~e.10) :arg1 (l / live-01~e.4 :arg0 (y / you~e.1) :location (h / here~e.5 :polarity~e.3 -~e.2)))

# "_0 what_1 is_2 it_3 that_4 you_5 are_6 looking_7 for_8 ?_9 "_10
(l / look-01~e.7 :arg0 (y / you~e.5) :arg1 (a / amr-unknown~e.9))

# "_0 i_1 am_2 looking_3 for_4 men_5 ,_6 "_7 said_8 the_9 little_10 prince_11 ._12
(s / say-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (l2 / look-01~e.3 :arg0 p :arg1 (m / man~e.5)))

# "_0 what_1 does_2 that_3 mean_4 -_5 -_6 '_7 tame_8 '_9 ?_10 "_11
(m / mean-01~e.4 :arg1 (t / tame-01~e.8) :arg2 (a / amr-unknown~e.10))

# "_0 men_1 ,_2 "_3 said_4 the_5 fox_6 ._7
(s / say-01~e.4 :arg0 (f / fox~e.6) :arg1 (m / man~e.1))

# "_0 they_1 have_2 guns_3 ,_4 and_5 they_6 hunt_7 ._8
(a / and~e.5 :op1 (h / have-03~e.2 :arg0 (t / they~e.1) :arg1 (g / gun~e.3)) :op2 (h2 / hunt-01~e.7 :arg0 t))

# it_0 is_1 very_2 disturbing_3 ._4
(d / disturb-01~e.3 :arg0 (i / it~e.0) :degree (v / very~e.2))

# they_0 also_1 raise_2 chickens_3 ._4
(r / raise-03~e.2 :arg0 (t / they~e.0) :arg1 (c / chicken~e.3) :mod (a / also~e.1))

# these_0 are_1 their_2 only_3 interests_4 ._5
(i / interest-01~e.4 :arg0 (t / this~e.0) :arg1 (t2 / they~e.2) :mod (o / only~e.3))

# are_0 you_1 looking_2 for_3 chickens_4 ?_5 "_6
(l / look-01~e.2 :arg0 (y / you~e.1) :arg1 (c / chicken~e.4) :mode interrogative~e.5)

# "_0 no_1 ,_2 "_3 said_4 the_5 little_6 prince_7 ._8
(s / say-01~e.4 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg1 (n / no~e.1))

# "_0 i_1 am_2 looking_3 for_4 friends_5 ._6
(l / look-01~e.3 :arg0 (i / i~e.1) :arg1 (p / person :arg0-of~e.4 (h / have-rel-role-91 :arg1 i :arg2 (f / friend~e.5))))

# what_0 does_1 that_2 mean_3 -_4 -_5 '_6 tame_7 '_8 ?_9 "_10
(m / mean-01~e.3 :arg1 (t / tame-01~e.7) :arg2 (a / amr-unknown~e.9))

# "_0 it_1 is_2 an_3 act_4 too_5 often_6 neglected_7 ,_8 "_9 said_10 the_11 fox_12 ._13
(s / say-01~e.10 :arg0 (f / fox~e.12) :arg1 (n / neglect-01~e.7 :arg1 (a / act-02~e.4) :frequency (o / often~e.6 :degree~e.1 (t / too~e.5))))

# it_0 means_1 to_2 establish_3 ties_4 ._5 "_6
(m / mean-01~e.1 :arg1 (i / it~e.0) :arg2 (e / establish-01~e.3 :arg1 (t / tie-01~e.4)))

# "_0 '_1 to_2 establish_3 ties_4 '_5 ?_6 "_7
(e / establish-01~e.3 :arg1 (t / tie-01~e.4) :mode interrogative~e.6)

# "_0 just_1 that_2 ,_3 "_4 said_5 the_6 fox_7 ._8
(s / say-01~e.5 :arg0 (f / fox~e.7) :arg1 (t / that~e.2 :mod (j / just~e.1)))

# "_0 to_1 me_2 ,_3 you_4 are_5 still_6 nothing_7 more_8 than_9 a_10 little_11 boy_12 who_13 is_14 just_15 like_16 a_17 hundred_18 thousand_19 other_20 little_21 boys_22 ._23
(o2 / opine-01~e.1 :arg0 (i / i~e.2) :arg1 (b / boy~e.22 :mod (l / little~e.21) :arg1-of (r / resemble-01~e.16 :arg2 (b2 / boy~e.12 :quant 100000~e.19 :mod (l2 / little~e.11) :mod (o / other~e.20)) :mod (j / just~e.15)) :domain~e.17 (y2 / you~e.4 :mod (m2 / more~e.8 :polarity~e.7 -~e.9)) :mod (s2 / still~e.6)))

# and_0 i_1 have_2 no_3 need_4 of_5 you_6 ._7
(a / and~e.0 :op2 (n / need-01~e.4 :arg0 (i / i~e.1) :arg1 (y / you~e.6) :polarity~e.3 -~e.3))

# and_0 you_1 ,_2 on_3 your_4 part_5 ,_6 have_7 no_8 need_9 of_10 me_11 ._12
(a / and~e.0 :op2 (n / need-01~e.9 :polarity~e.8 -~e.8 :arg0 (y / you~e.4) :arg1 (i / i~e.11)))

# to_0 you_1 ,_2 i_3 am_4 nothing_5 more_6 than_7 a_8 fox_9 like_10 a_11 hundred_12 thousand_13 other_14 foxes_15 ._16
(o / opine-01~e.0 :arg0 (y2 / you~e.1) :arg1 (f / fox~e.9 :arg1-of (r3 / resemble-01~e.10 :arg2 (f2 / fox~e.9 :quant 100000~e.15 :mod (o3 / other~e.14))) :domain~e.8 (i / i~e.3 :mod (m2 / more~e.6 :polarity~e.5 -~e.7))))

# but_0 if_1 you_2 tame_3 me_4 ,_5 then_6 we_7 shall_8 need_9 each_10 other_11 ._12
(c / contrast-01~e.0 :arg2 (n / need-01~e.9 :arg0 (w / we~e.7) :arg1 (o / other~e.11 :mod (e / each~e.10)) :condition~e.1 (t / tame-01~e.3 :arg0 (y / you~e.2) :arg1 (i / i~e.4))))

# to_0 me_1 ,_2 you_3 will_4 be_5 unique_6 in_7 all_8 the_9 world_10 ._11
(o / opine-01~e.0 :arg0 (i / i~e.1) :arg1 (u / unique~e.6 :domain (y / you~e.3) :location~e.7 (w / world~e.10 :mod (a / all~e.8))))

# to_0 you_1 ,_2 i_3 shall_4 be_5 unique_6 in_7 all_8 the_9 world_10 ..._11 "_12
(o / opine-01~e.0 :arg0 (y / you~e.1) :arg1 (u / unique~e.6 :domain (i / i~e.3) :location~e.7 (w / world~e.10 :mod (a / all~e.8))))

# "_0 i_1 am_2 beginning_3 to_4 understand_5 ,_6 "_7 said_8 the_9 little_10 prince_11 ._12
(s / say-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (b / begin-01~e.3 :arg0 (i / i~e.1) :arg1 (u / understand-01~e.5 :arg0 i)))

# "_0 there_1 is_2 a_3 flower_4 ..._5
(f / flower~e.4)

# i_0 think_1 that_2 she_3 has_4 tamed_5 me_6 ..._7 "_8
(t / think-01~e.1 :arg0 (i / i~e.0) :arg1 (t2 / tame-01~e.5 :arg0 (s / she~e.3) :arg1 i))

# "_0 it_1 is_2 possible_3 ,_4 "_5 said_6 the_7 fox_8 ._9
(s / say-01~e.6 :arg0 (f / fox~e.8) :arg1 (p / possible-01~e.3 :arg1 (i / it~e.1)))

# "_0 on_1 the_2 earth_3 one_4 sees_5 all_6 sorts_7 of_8 things_9 ._10 "_11
(s / see-01~e.5 :arg0 (o / one~e.4) :arg1 (t / thing~e.9 :mod (s2 / sort~e.7 :mod (a / all~e.6))) :location~e.1 (p / planet :wiki~e.8 "earth"~e.3 :name (n / name :op1 "earth"~e.3)))

# "_0 oh_1 ,_2 but_3 this_4 is_5 not_6 on_7 the_8 earth_9 !_10 "_11 said_12 the_13 little_14 prince_15 ._16
(s / say-01~e.12 :arg0 (p / prince~e.15 :mod (l / little~e.14)) :arg1 (a / and :op1 (o / oh~e.1 :mode~e.10 expressive~e.10) :op2 (c / contrast-01~e.3 :arg2 (b / be-located-at-91~e.7 :polarity~e.6 -~e.6 :arg1 (t / this~e.4) :arg2 (p2 / planet :wiki "earth"~e.9 :name (n / name :op1 "earth"~e.9))))))

# the_0 fox_1 seemed_2 perplexed_3 ,_4 and_5 very_6 curious_7 ._8
(s / seem-01~e.2 :arg1 (a / and~e.5 :op1 (p / perplex-01~e.3 :arg1 (f / fox~e.1)) :op2 (c / curious-01~e.7 :arg1 f :degree (v / very~e.6))))

# "_0 on_1 another_2 planet_3 ?_4 "_5
(b / be-located-at-91~e.1 :arg2 (p / planet~e.3 :mod (a2 / another~e.2)) :mode interrogative~e.4)

# "_0 yes_1 ._2 "_3
(y / yes~e.1)

# "_0 are_1 there_2 hunters_3 on_4 this_5 planet_6 ?_7 "_8
(p / person~e.2 :arg0-of~e.3 (h / hunt-01~e.3) :location~e.4 (p2 / planet~e.6 :mod (t / this~e.5)) :mode interrogative~e.7)

# "_0 no_1 ._2 "_3
(n / no~e.1)

# "_0 ah_1 ,_2 that_3 is_4 interesting_5 !_6
(a / ah-01~e.1 :arg1 (i2 / interest-01~e.5 :arg0 (t / that~e.3)))

# are_0 there_1 chickens_2 ?_3 "_4
(c / chicken~e.2 :mode interrogative~e.3)

# "_0 no_1 ._2 "_3
(n / no~e.1)

# "_0 nothing_1 is_2 perfect_3 ,_4 "_5 sighed_6 the_7 fox_8 ._9
(s / sigh-01~e.6 :arg0 (f / fox~e.8) :arg1 (p / perfect-02~e.3 :arg1 (n / nothing~e.1)))

# but_0 he_1 came_2 back_3 to_4 his_5 idea_6 ._7
(c2 / contrast-01~e.0 :arg2 (c / come-01~e.2 :arg1 (h / he~e.1) :arg4~e.4 (i / idea~e.6 :poss~e.5 h) :direction (b2 / back~e.3)))

# "_0 my_1 life_2 is_3 very_4 monotonous_5 ,_6 "_7 the_8 fox_9 said_10 ._11
(s / say-01~e.10 :arg0 (f / fox~e.9) :arg1 (m / monotonous~e.5 :domain (l / life~e.2 :poss~e.1 (i / i~e.1)) :degree (v / very~e.4)))

# "_0 i_1 hunt_2 chickens_3 ;_4 men_5 hunt_6 me_7 ._8
(a / and :op1 (h / hunt-01~e.2 :arg0 (i / i~e.1) :arg1 (c / chicken~e.3)) :op2 (h2 / hunt-01~e.6 :arg0 (m / man~e.5) :arg1 i))

# all_0 the_1 chickens_2 are_3 just_4 alike_5 ,_6 and_7 all_8 the_9 men_10 are_11 just_12 alike_13 ._14
(a / and~e.7 :op1 (a2 / alike-05~e.5 :arg1 (c / chicken~e.2 :mod (a5 / all~e.0)) :mod (j / just~e.4)) :op2 (a3 / alike-05~e.13 :arg1 (m / man~e.10 :mod (a7 / all~e.8)) :mod (j2 / just~e.12)))

# and_0 ,_1 in_2 consequence_3 ,_4 i_5 am_6 a_7 little_8 bored_9 ._10
(a / and~e.0 :op2 (c2 / cause-01~e.3 :arg1 (b / bore-02~e.9 :arg1 (i / i~e.5) :degree (l / little~e.8))))

# but_0 if_1 you_2 tame_3 me_4 ,_5 it_6 will_7 be_8 as_9 if_10 the_11 sun_12 came_13 to_14 shine_15 on_16 my_17 life_18 ._19
(c / contrast-01~e.0 :arg2 (s / shine-01~e.15 :arg1 (s2 / sun~e.12) :arg2 (l / life~e.18 :poss~e.17 (i / i~e.4)) :condition~e.1 (t / tame-01~e.3 :arg0 (y / you~e.2) :arg1 i)))

# i_0 shall_1 know_2 the_3 sound_4 of_5 a_6 step_7 that_8 will_9 be_10 different_11 from_12 all_13 the_14 others_15 ._16
(k / know-04~e.2 :arg0 (i / i~e.0) :arg1 (s / sound-02~e.4 :arg1 (s2 / step-01~e.7 :arg1-of~e.8 (d / differ-02~e.11 :arg2 (s3 / step-01~e.12 :mod (o / other~e.15 :mod (a / all~e.13)))))))

# other_0 steps_1 send_2 me_3 hurrying_4 back_5 underneath_6 the_7 ground_8 ._9
(s / send-03~e.2 :arg0 (s2 / step-01~e.1 :mod (o / other~e.0)) :arg1 (i / i~e.3) :arg4~e.5 (u / underneath~e.6 :op1 (g / ground~e.8)) :arg5~e.5 (b / back~e.5) :manner (h / hurry-01~e.4 :arg1 i))

# yours_0 will_1 call_2 me_3 ,_4 like_5 music_6 ,_7 out_8 of_9 my_10 burrow_11 ._12
(c / call-03~e.2 :arg0 (s / step-01~e.1 :arg1 (y / you~e.0)) :arg1 (o / out-06~e.8 :arg1 i :arg2 (b / burrow~e.11 :poss~e.10 i)) :arg2 (i / i~e.3) :arg1-of (r / resemble-01~e.5 :arg2 (m / music~e.6)))

# and_0 then_1 look_2 :_3 you_4 see_5 the_6 grain_7 -_8 fields_9 down_10 yonder_11 ?_12
(a / and~e.0 :op2 (l / look-01~e.2 :arg0 y :time (t / then~e.1) :mode imperative) :op3 (s / see-01~e.5 :arg0 (y / you~e.4) :arg1 (f / field~e.9 :mod (g / grain~e.7) :location (y2 / yonder~e.11 :mod (d / down~e.10))) :mode interrogative~e.12))

# i_0 do_1 not_2 eat_3 bread_4 ._5
(e / eat-01~e.3 :arg0 (i / i~e.0) :arg1 (b / bread~e.4) :polarity~e.2 -~e.1)

# wheat_0 is_1 of_2 no_3 use_4 to_5 me_6 ._7
(u / use-01~e.4 :arg0 (i / i~e.6) :arg1 (w / wheat~e.0) :polarity~e.3 -~e.3)

# the_0 wheat_1 fields_2 have_3 nothing_4 to_5 say_6 to_7 me_8 ._9
(s / say-01~e.6 :arg0 (f / field~e.2 :mod (w / wheat~e.1)) :arg1 (n / nothing~e.4) :arg2 (i / i~e.8))

# and_0 that_1 is_2 sad_3 ._4
(a / and~e.0 :op2 (s / sad-02~e.3 :arg0 (t2 / that~e.1)))

# but_0 you_1 have_2 hair_3 that_4 is_5 the_6 colour_7 of_8 gold_9 ._10
(c2 / contrast-01~e.0 :arg2 (h / have-03~e.2 :arg0 (y / you~e.1) :arg1 (h2 / hair~e.3 :mod (c / color~e.7 :mod (g / gold~e.9)))))

# think_0 how_1 wonderful_2 that_3 will_4 be_5 when_6 you_7 have_8 tamed_9 me_10 !_11
(t / think-01~e.0 :mode~e.11 imperative~e.11 :arg0 y :arg1 (w / wonderful-03~e.2 :arg1 (t2 / tame-01~e.9 :arg0 (y / you~e.7) :arg1 (i / i~e.10)) :degree (a / amr-unknown~e.1)))

# the_0 grain_1 ,_2 which_3 is_4 also_5 golden_6 ,_7 will_8 bring_9 me_10 back_11 the_12 thought_13 of_14 you_15 ._16
(b / bring-01~e.9 :arg0 (g / grain~e.1 :mod (g2 / golden~e.6 :mod (a / also~e.5))) :arg1 (t / think-01~e.13 :arg1 (y / you~e.15)) :arg2 (i / i~e.10) :direction (b2 / back~e.11))

# and_0 i_1 shall_2 love_3 to_4 listen_5 to_6 the_7 wind_8 in_9 the_10 wheat_11 ..._12 "_13
(a / and~e.0 :op2 (l / love-02~e.3 :arg0 (i / i~e.1) :arg1 (l2 / listen-01~e.5 :arg0 i :arg1 (w / wind~e.8 :location~e.9 (w2 / wheat~e.11)))))

# the_0 fox_1 gazed_2 at_3 the_4 little_5 prince_6 ,_7 for_8 a_9 long_10 time_11 ._12
(g / gaze-01~e.2 :arg0 (f / fox~e.1) :arg1 (p / prince~e.6 :mod (l / little~e.5)) :arg1-of~e.11 (l2 / long-03~e.10))

# "_0 please_1 -_2 -_3 tame_4 me_5 !_6 "_7 he_8 said_9 ._10
(s / say-01~e.9 :arg0 (h / he~e.8) :arg1 (t / tame-01~e.4 :mode~e.6 imperative~e.5 :polite~e.1 +~e.1 :arg0 (y / you) :arg1 h))

# "_0 i_1 want_2 to_3 ,_4 very_5 much_6 ,_7 "_8 the_9 little_10 prince_11 replied_12 ._13
(r / reply-01~e.12 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg2 (w / want-01~e.2 :arg0 p :arg1 (t / tame-01~e.1 :arg0 p :arg1 (y / you)) :degree (m / much~e.6 :degree (v / very~e.5))))

# "_0 but_1 i_2 have_3 not_4 much_5 time_6 ._7
(c / contrast-01~e.1 :arg2 (h / have-03~e.3 :arg0 (i / i~e.2) :arg1 (t / time~e.6 :quant (m / much~e.5 :polarity~e.4 -~e.4))))

# i_0 have_1 friends_2 to_3 discover_4 ,_5 and_6 a_7 great_8 many_9 things_10 to_11 understand_12 ._13 "_14
(o / obligate-01~e.1 :arg2 (a / and~e.6 :op1 (d / discover-01~e.4 :arg0 (i / i~e.0) :arg1 (p / person~e.1 :arg0-of~e.1 (h / have-rel-role-91~e.1 :arg1 i :arg2 (f / friend~e.2)))) :op2 (u / understand-01~e.12 :arg0 i :arg1 (t / thing~e.10 :quant (m / many~e.9 :mod (g / great~e.8))))))

# "_0 one_1 only_2 understands_3 the_4 things_5 that_6 one_7 tames_8 ,_9 "_10 said_11 the_12 fox_13 ._14
(s / say-01~e.11 :arg0 (f / fox~e.13) :arg1 (u / understand-01~e.3 :arg0 (o / one~e.1) :arg1 (t / thing~e.5 :arg1-of~e.6 (t2 / tame-01~e.8 :arg0 o)) :mod (o2 / only~e.2)))

# "_0 men_1 have_2 no_3 more_4 time_5 to_6 understand_7 anything_8 ._9
(h / have-03~e.2 :arg0 (m / man~e.1) :arg1 (t / time~e.5 :duration-of~e.4 (u / understand-01~e.7 :arg0 m :arg1 (a / anything~e.8))) :polarity~e.3 -~e.3)

# they_0 buy_1 things_2 all_3 ready_4 made_5 at_6 the_7 shops_8 ._9
(b / buy-01~e.1 :arg0 (t / they~e.0) :arg1 (t2 / thing~e.2 :arg1-of~e.5 (m / make-01~e.5 :time (a / already~e.4))) :location~e.6 (s / shop~e.8))

# but_0 there_1 is_2 no_3 shop_4 anywhere_5 where_6 one_7 can_8 buy_9 friendship_10 ,_11 and_12 so_13 men_14 have_15 no_16 friends_17 any_18 more_19 ._20
(c / contrast-01~e.0 :arg2 (p / possible-01~e.8 :polarity~e.3 -~e.3 :arg1 (b / buy-01~e.9 :arg0 (o / one~e.7) :arg1 (f / friendship~e.10) :location~e.6 (s / shop~e.4 :location (a2 / anywhere~e.5)) :arg0-of (c2 / cause-01~e.13 :arg1 (h / have-rel-role-91~e.15 :polarity~e.16 -~e.16 :arg0 (p2 / person) :arg1 (m / man~e.14) :arg2 (f2 / friend~e.17) :mod (a / anymore~e.19))))))

# if_0 you_1 want_2 a_3 friend_4 ,_5 tame_6 me_7 ..._8 "_9
(t / tame-01~e.6 :arg0 (y / you~e.1) :arg1 (i / i~e.7) :condition~e.0 (w / want-01~e.2 :arg0 y :arg1 (h / have-rel-role-91~e.3 :arg0 (p / person) :arg1 y :arg2 (f / friend~e.4))))

# "_0 what_1 must_2 i_3 do_4 ,_5 to_6 tame_7 you_8 ?_9 "_10 asked_11 the_12 little_13 prince_14 ._15
(a / ask-01~e.11 :arg0 (p / prince~e.14 :mod (l / little~e.13)) :arg1 (o / obligate-01~e.2 :arg2 (d / do-02~e.4 :arg0 p :arg1 (a2 / amr-unknown~e.1) :purpose~e.6 (t / tame-01~e.7 :arg0 p :arg1 (y / you~e.8)))))

# "_0 you_1 must_2 be_3 very_4 patient_5 ,_6 "_7 replied_8 the_9 fox_10 ._11
(r / reply-01~e.8 :arg0 (f / fox~e.10) :arg2 (o / obligate-01~e.2 :arg2 (p / patient-01~e.5 :arg1 (y / you~e.1) :degree (v / very~e.4))))

# "_0 first_1 you_2 will_3 sit_4 down_5 at_6 a_7 little_8 distance_9 from_10 me_11 -_12 -_13 like_14 that_15 -_16 -_17 in_18 the_19 grass_20 ._21
(s / sit-down-02~e.4 :arg1 (y / you~e.2) :time~e.18 (f / first~e.1) :location (r / relative-position~e.10 :op1 (i / i~e.11) :quant (l / little~e.8) :unit (d / distance~e.9)) :direction~e.6 (d2 / down~e.5 :location (g / grass~e.20)) :example~e.14 (t / that~e.15))

# i_0 shall_1 look_2 at_3 you_4 out_5 of_6 the_7 corner_8 of_9 my_10 eye_11 ,_12 and_13 you_14 will_15 say_16 nothing_17 ._18
(a / and~e.13 :op1 (l / look-01~e.2 :arg0 (i / i~e.0) :arg1 (y / you~e.4) :source~e.5 (c / corner~e.8 :part-of~e.9 (e / eye~e.11 :part-of~e.10 i))) :op2 (s / say-01~e.16 :arg0 y :arg1 (n / nothing~e.17)))

# words_0 are_1 the_2 source_3 of_4 misunderstandings_5 ._6
(s / source-01~e.3 :arg1 (m / misunderstand-01~e.5) :arg2 (w / word~e.0))

# but_0 you_1 will_2 sit_3 a_4 little_5 closer_6 to_7 me_8 ,_9 every_10 day_11 ..._12 "_13
(c2 / contrast-01~e.0 :arg2 (s / sit-01~e.3 :arg1 (y / you~e.1) :arg2 (c / close-10~e.6 :arg1 y :arg2 (i / i~e.8) :degree (m / more :mod (l / little~e.5)) :frequency (r2 / rate-entity-91~e.10 :arg3~e.7 (t / temporal-quantity :quant 1~e.4 :unit (d / day~e.11))))))

# the_0 next_1 day_2 the_3 little_4 prince_5 came_6 back_7 ._8
(c / come-01~e.6 :arg1 (p / prince~e.5 :mod (l / little~e.4)) :direction (b / back~e.7) :time (d / day~e.2 :mod (n / next~e.1)))

# "_0 it_1 would_2 have_3 been_4 better_5 to_6 come_7 back_8 at_9 the_10 same_11 hour_12 ,_13 "_14 said_15 the_16 fox_17 ._18
(s / say-01~e.15 :arg0 (f / fox~e.17) :arg1 (g / good-02~e.5 :arg1 (c / come-01~e.7 :direction (b2 / back~e.8) :time~e.9 (h / hour~e.12 :arg1-of (s2 / same-01~e.11))) :degree (m / more~e.5)))

# "_0 if_1 ,_2 for_3 example_4 ,_5 you_6 come_7 at_8 four_9 o'clock_10 in_11 the_12 afternoon_13 ,_14 then_15 at_16 three_17 o'clock_18 i_19 shall_20 begin_21 to_22 be_23 happy_24 ._25
(b / begin-01~e.21 :arg0 (i / i~e.19) :arg1 (h / happy-01~e.24 :arg1 i) :condition~e.1 (c / come-01~e.7 :arg1 (y / you~e.6) :time (d2 / date-entity :time~e.8 "4:00"~e.10 :dayperiod~e.16 (a / afternoon~e.13)) :arg0-of~e.3 (e / exemplify-01~e.4)) :time~e.11 (d / date-entity :time "3:00"~e.15))

# i_0 shall_1 feel_2 happier_3 and_4 happier_5 as_6 the_7 hour_8 advances_9 ._10
(f / feel-01~e.2 :arg0 (i / i~e.0) :arg1 (a / and~e.4 :op1 (h / happy-01~e.3 :arg1 i :degree (m / more)) :op2 (h2 / happy-01~e.5 :arg1 i :degree (m2 / more~e.6))) :time (a2 / advance-01~e.9 :arg1 (h3 / hour~e.8)))

# at_0 four_1 o'clock_2 ,_3 i_4 shall_5 already_6 be_7 worrying_8 and_9 jumping_10 about_11 ._12
(a / and~e.9 :op1 (w / worry-01~e.8 :arg1 (i / i~e.4)) :op2 (j / jump-03~e.10 :arg0 i :direction (a2 / about~e.11)) :time (d / date-entity :time~e.0 "4:00"~e.2) :time (a3 / already~e.6))

# i_0 shall_1 show_2 you_3 how_4 happy_5 i_6 am_7 !_8
(s / show-01~e.2 :arg0 (i / i~e.0) :arg1 (h / happy-01~e.5 :arg1 i :degree (s2 / so~e.4)) :arg2 (y / you~e.3))

# but_0 if_1 you_2 come_3 at_4 just_5 any_6 time_7 ,_8 i_9 shall_10 never_11 know_12 at_13 what_14 hour_15 my_16 heart_17 is_18 to_19 be_20 ready_21 to_22 greet_23 you_24 ..._25
(c / contrast-01~e.0 :arg2 (k / know-01~e.12 :polarity~e.11 -~e.11 :arg0 (i / i~e.9) :arg1 (h3 / hour~e.15 :time (r / ready-02~e.21 :arg1 (h2 / heart~e.17 :part-of~e.16 i) :arg2 (g / greet-01~e.23 :arg0 h2 :arg1 (y / you~e.24)))) :time~e.13 (e / ever~e.11) :condition~e.1 (c2 / come-01~e.3 :arg1 (y2 / you~e.2) :time (t / time~e.7 :mod (a2 / any~e.6 :mod (j2 / just~e.5))))))

# one_0 must_1 observe_2 the_3 proper_4 rites_5 ..._6 "_7
(o / obligate-01~e.1 :arg1 (o3 / one~e.0) :arg2 (o2 / observe-01~e.2 :arg0 o3 :arg1 (r / rite~e.5 :mod (p2 / proper~e.4))))

# "_0 what_1 is_2 a_3 rite_4 ?_5 "_6 asked_7 the_8 little_9 prince_10 ._11
(a / ask-01~e.7 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (r / rite~e.4 :domain~e.3 (a2 / amr-unknown~e.1)))

# "_0 those_1 also_2 are_3 actions_4 too_5 often_6 neglected_7 ,_8 "_9 said_10 the_11 fox_12 ._13
(s / say-01~e.10 :arg0 (f / fox~e.12) :arg1 (a / act-02~e.4 :domain (t2 / that~e.1) :arg1-of (n2 / neglect-01~e.7 :frequency (o / often~e.6 :degree (t3 / too~e.5))) :mod (a3 / also~e.2)))

# "_0 they_1 are_2 what_3 make_4 one_5 day_6 different_7 from_8 other_9 days_10 ,_11 one_12 hour_13 from_14 other_15 hours_16 ._17
(t2 / thing~e.3 :domain (t / they~e.1) :arg0-of (m / make-02~e.4 :arg1 (a / and :op1 (d / differ-02~e.7 :arg1 (d2 / day~e.6 :mod (o4 / one~e.5)) :arg2 (d3 / day~e.10 :mod (o / other~e.9))) :op2 (d4 / differ-02~e.7 :arg1 (h / hour~e.13 :mod (o3 / one~e.12)) :arg2 (h2 / hour~e.16 :mod (o2 / other~e.15))))))

# there_0 is_1 a_2 rite_3 ,_4 for_5 example_6 ,_7 among_8 my_9 hunters_10 ._11
(r / rite~e.3 :arg1-of (h / have-03~e.9 :arg0 (p / person~e.0 :arg0-of~e.10 (h2 / hunt-01~e.10 :arg1 (i / i~e.9)))) :arg0-of~e.5 (e / exemplify-01~e.6))

# every_0 thursday_1 they_2 dance_3 with_4 the_5 village_6 girls_7 ._8
(d / dance-01~e.3 :arg0 (t / they~e.2) :arg2 (g / girl~e.7 :source (v / village~e.6)) :frequency~e.0 (r / rate-entity-91~e.0 :arg4 (d2 / date-entity :weekday~e.1 (t2 / thursday~e.1))))

# so_0 thursday_1 is_2 a_3 wonderful_4 day_5 for_6 me_7 !_8
(c / cause-01~e.0 :arg1 (d2 / day~e.5 :domain (d / date-entity :weekday~e.8 (t / thursday~e.1)) :arg1-of (w / wonderful-03~e.4) :beneficiary~e.6 (i / i~e.7)))

# i_0 can_1 take_2 a_3 walk_4 as_5 far_6 as_7 the_8 vineyards_9 ._10
(p / possible-01~e.1 :arg1 (w / walk-01~e.4 :arg0 (i / i~e.0) :extent~e.2 (f / far~e.6 :degree (e / equal~e.5) :compared-to~e.7 (v / vineyard~e.9))))

# but_0 if_1 the_2 hunters_3 danced_4 at_5 just_6 any_7 time_8 ,_9 every_10 day_11 would_12 be_13 like_14 every_15 other_16 day_17 ,_18 and_19 i_20 should_21 never_22 have_23 any_24 vacation_25 at_26 all_27 ._28 "_29
(c2 / contrast-01~e.0 :arg2 (v2 / vacation-01~e.25 :polarity~e.22 -~e.22 :arg0 (i / i~e.20) :condition~e.1 (d / dance-01~e.4 :arg0 (p / person~e.3 :arg0-of~e.3 (h2 / hunt-01~e.3)) :time (a2 / any~e.7 :mod (j / just~e.6)) :arg1-of~e.8 (c / cause-01 :arg0 (r / resemble-01~e.14 :arg1 (d2 / day~e.11 :mod (e / every~e.10)) :arg2 (d3 / day~e.17 :mod (o / other~e.16 :mod (e2 / every~e.15)))))) :quant (a4 / any~e.24) :mod (a3 / at-all~e.27)))

# so_0 the_1 little_2 prince_3 tamed_4 the_5 fox_6 ._7
(c / cause-01~e.0 :arg1 (t / tame-01~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2)) :arg1 (f / fox~e.6)))

# and_0 when_1 the_2 hour_3 of_4 his_5 departure_6 drew_7 near_8 -_9 -_10 "_11 ah_12 ,_13 "_14 said_15 the_16 fox_17 ,_18 "_19 i_20 shall_21 cry_22 ._23 "_24
(a / and~e.0 :op1 (s / say-01~e.15 :arg0 (f / fox~e.17) :arg1 (a2 / and~e.0 :op1 (a3 / ah~e.12 :mode expressive~e.21) :op2 (c / cry-02~e.22 :arg0 f)) :time (h2 / hour~e.3 :time-of~e.1 (d / depart-01~e.6 :arg0 f) :arg1-of (n2 / near-01~e.8))))

# "_0 it_1 is_2 your_3 own_4 fault_5 ,_6 "_7 said_8 the_9 little_10 prince_11 ._12
(s / say-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (f / fault-01~e.5 :arg1 (y / you~e.3) :arg2 (i / it~e.1)))

# "_0 i_1 never_2 wished_3 you_4 any_5 sort_6 of_7 harm_8 ;_9 but_10 you_11 wanted_12 me_13 to_14 tame_15 you_16 ..._17 "_18
(c / contrast-01~e.10 :arg1 (w / wish-01~e.3 :polarity~e.2 -~e.2 :arg0 (i / i~e.1) :arg1 (h / harm-01~e.8 :arg1 (y / you~e.4) :mod (s / sort~e.6 :mod (a / any~e.5))) :arg2 y :time (e / ever~e.2)) :arg2 (w2 / want-01~e.12 :arg0 (y2 / you~e.16) :arg1 (t / tame-01~e.15 :arg0 i :arg1 y)))

# "_0 yes_1 ,_2 that_3 is_4 so_5 ,_6 "_7 said_8 the_9 fox_10 ._11
(s / say-01~e.8 :arg0 (f / fox~e.10) :arg1 (s2 / so~e.5 :domain (t / that~e.3)))

# "_0 but_1 now_2 you_3 are_4 going_5 to_6 cry_7 !_8 "_9 said_10 the_11 little_12 prince_13 ._14
(s / say-01~e.10 :arg0 (p / prince~e.13 :mod (l / little~e.12)) :arg1 (c / contrast-01~e.1 :arg2 (c2 / cry-02~e.7 :arg0 (y / you~e.3) :time (n / now~e.2))))

# "_0 yes_1 ,_2 that_3 is_4 so_5 ,_6 "_7 said_8 the_9 fox_10 ._11
(s / say-01~e.8 :arg0 (f / fox~e.10) :arg1 (s2 / so~e.5 :domain (t / that~e.3)))

# "_0 then_1 it_2 has_3 done_4 you_5 no_6 good_7 at_8 all_9 !_10 "_11
(d / do-02~e.4 :arg0 (i / it~e.2) :arg1 (g / good-04~e.7 :polarity~e.6 -~e.6) :arg2 (y / you~e.5) :mod (a / at-all~e.9))

# "_0 it_1 has_2 done_3 me_4 good_5 ,_6 "_7 said_8 the_9 fox_10 ,_11 "_12 because_13 of_14 the_15 color_16 of_17 the_18 wheat_19 fields_20 ._21 "_22
(s / say-01~e.8 :arg0 (f2 / fox~e.10) :arg1 (d / do-02~e.3 :arg0 (i / it~e.1) :arg1 (g / good-04~e.5 :arg1 i :arg2 f2) :arg2 f2 :arg1-of (c / cause-01~e.13 :arg0 (c2 / color-01~e.16 :arg1 (f / field~e.20 :mod (w / wheat~e.19))))))

# and_0 then_1 he_2 added_3 :_4 "_5 go_6 and_7 look_8 again_9 at_10 the_11 roses_12 ._13
(a / and~e.0 :op1 (a2 / add-01~e.3 :arg0 (h / he~e.2) :arg1 (a3 / and~e.7 :op1 (g / go-02~e.6 :arg0 (y / you~e.6) :mode imperative~e.10) :op2 (l / look-01~e.8 :arg0 y :arg1 (r / rose~e.12) :mod (a4 / again~e.9) :mode imperative~e.10)) :time (t / then~e.1)))

# you_0 will_1 understand_2 now_3 that_4 yours_5 is_6 unique_7 in_8 all_9 the_10 world_11 ._12
(u / understand-01~e.2 :arg0 (y / you~e.0) :arg1 (u2 / unique~e.7 :domain (r / rose~e.4 :poss~e.5 y) :location~e.8 (w / world~e.11 :extent~e.9 (a / all~e.9))) :time~e.8 (n / now~e.3))

# then_0 come_1 back_2 to_3 say_4 goodbye_5 to_6 me_7 ,_8 and_9 i_10 will_11 make_12 you_13 a_14 present_15 of_16 a_17 secret_18 ._19 "_20
(a / and~e.9 :op1 (c / come-01~e.1 :mode imperative~e.3 :arg1 (y / you~e.13) :direction (b / back~e.2) :time (t / then~e.0) :purpose~e.6 (s / say-01~e.4 :arg0 y :arg1 (g / goodbye~e.5) :arg2 (i / i~e.10))) :op2 (g2 / give-01~e.12 :arg0 i :arg1 (p / present~e.15) :arg2 y :manner (r / reveal-01~e.11 :arg0 i :arg1 (s2 / secret~e.18) :arg2 y)))

# the_0 little_1 prince_2 went_3 away_4 ,_5 to_6 look_7 again_8 at_9 the_10 roses_11 ._12
(g / go-02~e.3 :arg0 (p / prince~e.2 :mod (l / little~e.1)) :direction (a / away~e.4) :purpose~e.6 (l2 / look-01~e.7 :arg0 p :arg1 (r / rose~e.11) :mod (a2 / again~e.8)))

# "_0 you_1 are_2 not_3 at_4 all_5 like_6 my_7 rose_8 ,_9 "_10 he_11 said_12 ._13
(s / say-01~e.12 :arg0 (h / he~e.11) :arg1 (r / resemble-01~e.6 :polarity~e.3 -~e.3 :arg1 (y / you~e.1) :arg2 (r2 / rose~e.8 :poss~e.7 (i / i~e.7)) :degree (a / at-all~e.5)))

# "_0 as_1 yet_2 you_3 are_4 nothing_5 ._6
(n / nothing~e.5 :domain (y / you~e.3) :time~e.1 (a / as-yet~e.2))

# no_0 one_1 has_2 tamed_3 you_4 ,_5 and_6 you_7 have_8 tamed_9 no_10 one_11 ._12
(a / and~e.6 :op1 (t / tame-01~e.3 :arg0 (n / no-one~e.1) :arg1 (y / you~e.4)) :op2 (t2 / tame-01~e.9 :arg0 y :arg1 n))

# you_0 are_1 like_2 my_3 fox_4 when_5 i_6 first_7 knew_8 him_9 ._10
(r / resemble-01~e.2 :arg1 (y / you~e.0) :arg2 (f / fox~e.4 :poss~e.3 (i / i~e.6)) :time~e.5 (k / know-02~e.8 :arg0 i :arg1 f :ord~e.7 (o / ordinal-entity~e.9 :value 1)))

# he_0 was_1 only_2 a_3 fox_4 like_5 a_6 hundred_7 thousand_8 other_9 foxes_10 ._11
(f2 / fox~e.4 :domain~e.3 (h / he~e.0) :arg1-of (r / resemble-01~e.5 :arg2 (f3 / fox~e.4 :quant 100000~e.10 :mod (o / other~e.9))) :mod (o2 / only~e.2))

# but_0 i_1 have_2 made_3 him_4 my_5 friend_6 ,_7 and_8 now_9 he_10 is_11 unique_12 in_13 all_14 the_15 world_16 ._17 "_18
(c / contrast-01~e.0 :arg2 (m / make-01~e.3 :arg0 (i / i~e.1) :arg1 (h / have-rel-role-91~e.5 :arg0 (h2 / he~e.4) :arg1 i :arg2 (f / friend~e.6)) :arg0-of (c2 / cause-01~e.10 :arg1 (u / unique~e.12 :domain h2 :time (n / now~e.9) :location~e.13 (w / world~e.16 :extent~e.14 (a2 / all~e.14))))))

# and_0 the_1 roses_2 were_3 very_4 much_5 embarassed_6 ._7
(a / and~e.0 :op1 (e / embarrass-01~e.6 :arg1 (r / rose~e.2) :degree (m / much~e.5 :degree (v / very~e.4))))

# "_0 you_1 are_2 beautiful_3 ,_4 but_5 you_6 are_7 empty_8 ,_9 "_10 he_11 went_12 on_13 ._14
(g / go-on-25~e.12 :arg0 (h / he~e.11) :arg1 (c / contrast-01~e.5 :arg1 (b / beautiful-02~e.3 :arg1 (y / you~e.1)) :arg2 (e / empty-02~e.8 :arg1 y)))

# "_0 one_1 could_2 not_3 die_4 for_5 you_6 ._7
(p / possible-01~e.2 :polarity~e.3 -~e.3 :arg1 (d / die-01~e.4 :arg1 (o / one~e.1) :beneficiary~e.5 (y / you~e.6)))

# to_0 be_1 sure_2 ,_3 an_4 ordinary_5 passerby_6 would_7 think_8 that_9 my_10 rose_11 looked_12 just_13 like_14 you_15 -_16 -_17 the_18 rose_19 that_20 belongs_21 to_22 me_23 ._24
(t / think-01~e.8 :arg0 (p2 / person~e.6 :arg0-of~e.6 (p3 / pass-by-17~e.6) :mod (o / ordinary~e.5)) :arg1 (l / look-02~e.12 :arg0 (r / rose~e.11 :poss~e.10 (i / i~e.23) :arg0-of (b / belong-01~e.21 :arg1 i)) :arg1 (y / you~e.15) :degree~e.14 (j / just~e.13)) :arg1-of~e.20 (s / sure-02~e.2))

# but_0 in_1 herself_2 alone_3 she_4 is_5 more_6 important_7 than_8 all_9 the_10 hundreds_11 of_12 you_13 other_14 roses_15 :_16 because_17 it_18 is_19 she_20 that_21 i_22 have_23 watered_24 ;_25 because_26 it_27 is_28 she_29 that_30 i_31 have_32 put_33 under_34 the_35 glass_36 globe_37 ;_38 because_39 it_40 is_41 she_42 that_43 i_44 have_45 sheltered_46 behind_47 the_48 screen_49 ;_50 because_51 it_52 is_53 for_54 her_55 that_56 i_57 have_58 killed_59 the_60 caterpillars_61 (_62 except_63 the_64 two_65 or_66 three_67 that_68 we_69 saved_70 to_71 become_72 butterflies_73 )_74 ;_75 because_76 it_77 is_78 she_79 that_80 i_81 have_82 listened_83 to_84 ,_85 when_86 she_87 grumbled_88 ,_89 or_90 boasted_91 ,_92 or_93 ever_94 sometimes_95 when_96 she_97 said_98 nothing_99 ._100
(c4 / contrast-01~e.0 :arg2 (i / important~e.7 :degree (m / more~e.6) :domain~e.77 (s / she~e.4 :mod (a / alone~e.3)) :compared-to~e.8 (r / rose~e.15 :mod (a3 / all~e.9) :mod (o / other~e.14) :quant (m2 / multiple~e.13 :op1 100~e.11)) :arg1-of (c / cause-01~e.17 :arg0 (a2 / and :op1 (w / water-01~e.24 :arg0 (i2 / i~e.44) :arg1 s) :op2 (p / put-01~e.33 :arg0 i2 :arg1 s :arg2 (u / under~e.34 :op1 (g / globe~e.37 :consist-of~e.12 (g2 / glass~e.36)))) :op3 (s3 / shelter-01~e.46 :arg0 i2 :arg1 s :arg2 (b2 / behind~e.47 :op1 (s4 / screen~e.49))) :op4 (k / kill-01~e.59 :arg0 i2 :arg1 (c2 / caterpillar~e.61 :arg2-of~e.55 (e2 / except-01~e.63 :arg1 (c3 / caterpillar~e.61 :quant (o2 / or~e.66 :op1 2~e.65 :op2 3~e.67) :arg1-of~e.68 (s2 / save-02~e.70 :arg0 (w2 / we~e.69) :purpose~e.71 (b3 / become-01~e.72 :arg1 c3 :arg2 (b4 / butterfly~e.73)))))) :beneficiary~e.54 s) :op4 (l / listen-01~e.83 :arg0 i2 :arg1 s :time~e.86 (o3 / or~e.90 :op1 (g3 / grumble-01~e.88 :arg0 s) :op2 (b5 / boast-01~e.91 :arg0 s) :op3 (s6 / say-01~e.98 :arg0 s :arg1 (n / nothing~e.99) :frequency (s7 / sometimes~e.95 :time~e.96 (e / ever~e.94)))))))))

# because_0 she_1 is_2 my_3 rose_4 ._5
(c / cause-01~e.0 :arg0 (r / rose~e.4 :domain (s / she~e.1) :poss~e.3 (i / i~e.3)))

# and_0 he_1 went_2 back_3 to_4 meet_5 the_6 fox_7 ._8
(a / and~e.0 :op1 (g / go-02~e.2 :arg0 (h / he~e.1) :direction (b / back~e.3) :purpose~e.4 (m / meet-03~e.5 :arg0 h :arg1 (f / fox~e.7))))

# "_0 goodbye_1 ,_2 "_3 he_4 said_5 ._6
(s / say-01~e.5 :arg0 (h / he~e.4) :arg1 (g / goodbye~e.1))

# "_0 goodbye_1 ,_2 "_3 said_4 the_5 fox_6 ._7
(s / say-01~e.4 :arg0 (f / fox~e.6) :arg1 (g / goodbye~e.1))

# "_0 and_1 now_2 here_3 is_4 my_5 secret_6 ,_7 a_8 very_9 simple_10 secret_11 :_12 it_13 is_14 only_15 with_16 the_17 heart_18 that_19 one_20 can_21 see_22 rightly_23 ;_24 what_25 is_26 essential_27 is_28 invisible_29 to_30 the_31 eye_32 ._33 "_34
(a / and~e.1 :op1 (s / secret~e.6 :poss~e.5 (i / i~e.5) :arg1-of (s2 / simple-02~e.10 :degree (v / very~e.9)) :domain~e.8 (a2 / and~e.1 :op1 (p / possible-01~e.21 :arg1 (s3 / see-01~e.22 :arg0 (o2 / one~e.20) :arg2-of~e.30 (r / right-06~e.23) :instrument~e.16 (h2 / heart~e.18)) :mod (o / only~e.15)) :op2 (p2 / possible-01~e.21 :polarity - :arg1 (s4 / see-01~e.22 :arg0 o2 :arg1 (t / thing~e.25 :mod (e / essential~e.27)) :instrument~e.29 (e2 / eye~e.32)))) :time (n / now~e.2)))

# "_0 what_1 is_2 essential_3 is_4 invisible_5 to_6 the_7 eye_8 ,_9 "_10 the_11 little_12 prince_13 repeated_14 ,_15 so_16 that_17 he_18 would_19 be_20 sure_21 to_22 remember_23 ._24
(r / repeat-01~e.14 :arg0 (p / prince~e.13 :mod (l / little~e.12)) :arg1 (p2 / possible-01~e.6 :polarity - :arg1 (s2 / see-01~e.1 :arg1 (t / thing~e.1 :mod (e / essential~e.3)) :instrument~e.5 (e2 / eye~e.8))) :purpose~e.22 (r2 / remember-01~e.23 :arg0 p :arg1 p2 :arg1-of~e.17 (s / sure-02~e.21)))

# "_0 it_1 is_2 the_3 time_4 you_5 have_6 wasted_7 for_8 your_9 rose_10 that_11 makes_12 your_13 rose_14 so_15 important_16 ._17 "_18
(t / time~e.4 :arg1-of (w / waste-01~e.7 :arg0 (y / you~e.5) :beneficiary~e.8 (r / rose~e.10 :poss~e.9 y)) :arg0-of (m / make-02~e.12 :arg1 (i / important~e.16 :domain r :degree (s / so~e.15))))

# "_0 it_1 is_2 the_3 time_4 i_5 have_6 wasted_7 for_8 my_9 rose_10 -_11 -_12 "_13 said_14 the_15 little_16 prince_17 ,_18 so_19 that_20 he_21 would_22 be_23 sure_24 to_25 remember_26 ._27
(s / say-01~e.14 :arg0 (p / prince~e.17 :mod (l / little~e.16)) :arg1 (t / time~e.4 :arg1-of (w / waste-01~e.7 :arg0 p) :beneficiary~e.8 (r / rose~e.10 :poss~e.9 p)) :purpose~e.19 (r2 / remember-01~e.26 :arg0 p :arg1-of~e.20 (s2 / sure-02~e.24)))

# "_0 men_1 have_2 forgotten_3 this_4 truth_5 ,_6 "_7 said_8 the_9 fox_10 ._11
(s / say-01~e.8 :arg0 (f / fox~e.10) :arg1 (f2 / forget-01~e.3 :arg0 (m / man~e.1) :arg1 (t / truth~e.5 :mod (t2 / this~e.4))))

# "_0 but_1 you_2 must_3 not_4 forget_5 it_6 ._7
(c / contrast-01~e.1 :arg2 (o / obligate-01~e.3 :arg1 (y / you~e.2) :arg2 (f / forget-01~e.5 :polarity~e.4 -~e.4 :arg0 y :arg1 (i / it~e.6))))

# you_0 become_1 responsible_2 ,_3 forever_4 ,_5 for_6 what_7 you_8 have_9 tamed_10 ._11
(b / become-01~e.1 :arg1 (y / you~e.0) :arg2 (r / responsible-03~e.2 :arg0 y :arg1 (t2 / thing~e.7 :arg1-of~e.10 (t / tame-01~e.10 :arg0 y)) :extent~e.6 (f / forever~e.4)))

# you_0 are_1 responsible_2 for_3 your_4 rose_5 ..._6 "_7
(r / responsible-03~e.2 :arg0 (y / you~e.0) :arg1 (r2 / rose~e.5 :poss~e.4 y))

# "_0 i_1 am_2 responsible_3 for_4 my_5 rose_6 ,_7 "_8 the_9 little_10 prince_11 repeated_12 ,_13 so_14 that_15 he_16 would_17 be_18 sure_19 to_20 remember_21 ._22
(r / repeat-01~e.12 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (r2 / responsible-03~e.3 :arg0 p :arg1 (r3 / rose~e.6 :poss~e.5 p)) :purpose~e.4 (r4 / remember-01~e.21 :arg0 p :arg1-of (s / sure-02~e.19)))

# chapter_0 22_1 ._2
(c / chapter~e.0 :mod 22~e.1)

# "_0 good_1 morning_2 ,_3 "_4 said_5 the_6 little_7 prince_8 ._9
(s / say-01~e.5 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (m / morning~e.2 :arg1-of (g / good-02~e.1)))

# "_0 good_1 morning_2 ,_3 "_4 said_5 the_6 railway_7 switchman_8 ._9
(s / say-01~e.5 :arg0 (s2 / switchman~e.8 :mod (r / railway~e.7)) :arg1 (m / morning~e.2 :arg1-of (g / good-02~e.1)))

# "_0 what_1 do_2 you_3 do_4 here_5 ?_6 "_7 the_8 little_9 prince_10 asked_11 ._12
(a / ask-01~e.11 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (d / do-02~e.4 :arg0 (y / you~e.3) :arg1 (a2 / amr-unknown~e.6) :location (h / here~e.5)))

# "_0 i_1 sort_2 out_3 travelers_4 ,_5 in_6 bundles_7 of_8 a_9 thousand_10 ,_11 "_12 said_13 the_14 switchman_15 ._16
(s / say-01~e.13 :arg0 (s2 / switchman~e.15) :arg1 (s3 / sort-01~e.2 :arg0 s2 :arg1 (p / person~e.1 :arg0-of~e.4 (t / travel-01~e.4)) :arg2 (b / bundle-01~e.7 :arg0 s2 :arg1 p :arg2 (p2 / person~e.3 :quant 1000~e.10))))

# "_0 i_1 send_2 off_3 the_4 trains_5 that_6 carry_7 them_8 ;_9 now_10 to_11 the_12 right_13 ,_14 now_15 to_16 the_17 left_18 ._19 "_20
(s / send-03~e.2 :arg0 (i / i~e.1) :arg1 (t / train~e.5 :arg0-of (c / carry-01~e.7 :arg1 (t2 / they~e.8))) :arg5~e.3 (a / and~e.11 :op1 (r / right-04~e.13 :time (n / now~e.10)) :op2 (l / left-20~e.18 :time (n2 / now~e.15))))

# and_0 a_1 brilliantly_2 lighted_3 express_4 train_5 shook_6 the_7 switchman_8 's_9 cabin_10 as_11 it_12 rushed_13 by_14 with_15 a_16 roar_17 like_18 thunder_19 ._20
(a / and~e.0 :op2 (s / shake-01~e.6 :arg0 (t / train~e.5 :mod (e / express-02~e.4) :arg1-of (l / light-04~e.3 :manner (b / brilliant-02~e.2))) :arg1 (c / cabin~e.10 :poss~e.9 (s2 / switchman~e.8)) :time~e.11 (r / rush-01~e.13 :arg1 t :direction (b2 / by~e.14) :arg0-of~e.15 (r2 / roar-01~e.17 :arg1-of (r3 / resemble-01~e.18 :arg2 (t2 / thunder~e.19))))))

# "_0 they_1 are_2 in_3 a_4 great_5 hurry_6 ,_7 "_8 said_9 the_10 little_11 prince_12 ._13
(s / say-01~e.9 :arg0 (p / prince~e.12 :mod (l / little~e.11)) :arg1 (h / hurry-01~e.6 :arg1 (t / they~e.1) :degree (g / great~e.5)))

# "_0 what_1 are_2 they_3 looking_4 for_5 ?_6 "_7
(l / look-01~e.4 :arg0 (t / they~e.3) :arg1 (a / amr-unknown~e.6))

# "_0 not_1 even_2 the_3 locomotive_4 engineer_5 knows_6 that_7 ,_8 "_9 said_10 the_11 switchman_12 ._13
(s / say-01~e.10 :arg0 (s2 / switchman~e.12) :arg1 (k / know-01~e.6 :polarity~e.1 -~e.1 :arg0 (p / person~e.5 :arg0-of~e.5 (e / engineer-01~e.5 :arg1 (l / locomotive~e.4)) :mod (e2 / even~e.2)) :arg1 (t / that~e.7)))

# and_0 a_1 second_2 brilliantly_3 lighted_4 express_5 thundered_6 by_7 ,_8 in_9 the_10 opposite_11 direction_12 ._13
(a / and~e.0 :op2 (t / thunder-01~e.6 :arg0 (t2 / train~e.12 :mod (e / express-02~e.5) :arg1-of (l / light-04~e.4 :manner (b2 / brilliant-02~e.3)) :ord~e.2 (o2 / ordinal-entity~e.1 :value 2~e.7)) :direction~e.9 (b / by~e.7) :direction~e.9 (o / opposite-01~e.11 :arg2 (d / direction~e.12))))

# "_0 are_1 they_2 coming_3 back_4 already_5 ?_6 "_7 demanded_8 the_9 little_10 prince_11 ._12
(d / demand-01~e.8 :mode interrogative~e.6 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (c / come-01~e.3 :arg1 (t / they~e.2) :direction (b / back~e.4) :time (a / already~e.5)))

# "_0 these_1 are_2 not_3 the_4 same_5 ones_6 ,_7 "_8 said_9 the_10 switchman_11 ._12
(s / say-01~e.9 :arg0 (s2 / switchman~e.11) :arg1 (o / one~e.6 :arg1-of (s3 / same-01~e.5 :polarity~e.3 -~e.3) :domain (t / this~e.1)))

# "_0 it_1 is_2 an_3 exchange_4 ._5 "_6
(e / exchange-01~e.4 :domain~e.1 (i / it~e.1))

# "_0 were_1 they_2 not_3 satisfied_4 where_5 they_6 were_7 ?_8 "_9 asked_10 the_11 little_12 prince_13 ._14
(a / ask-01~e.10 :mode interrogative~e.8 :arg0 (p / prince~e.13 :mod (l / little~e.12)) :arg1 (s / satisfy-01~e.4 :polarity~e.3 -~e.3 :arg1 (t / they~e.2) :location-of~e.5 (t2 / they~e.6)))

# "_0 no_1 one_2 is_3 ever_4 satisfied_5 where_6 he_7 is_8 ,_9 "_10 said_11 the_12 switchman_13 ._14
(s / say-01~e.11 :arg0 (s2 / switchman~e.13) :arg1 (s3 / satisfy-01~e.5 :arg1 (n / no-one~e.2) :time (e / ever~e.4) :location~e.6 n))

# and_0 they_1 heard_2 the_3 roaring_4 thunder_5 of_6 a_7 third_8 brilliantly_9 lighted_10 express_11 ._12
(a / and~e.0 :op2 (h / hear-01~e.2 :arg0 (t / they~e.1) :arg1 (t2 / thunder-01~e.5 :arg1-of (r / roar-01~e.4)) :arg2 (t3 / train~e.2 :mod (e / express-02~e.11) :arg1-of (l / light-04~e.10 :manner (b / brilliant-02~e.9)) :ord~e.8 (o / ordinal-entity~e.7 :value 3~e.11))))

# "_0 are_1 they_2 pursuing_3 the_4 first_5 travelers_6 ?_7 "_8 demanded_9 the_10 little_11 prince_12 ._13
(d / demand-01~e.9 :mode interrogative~e.7 :arg0 (p / prince~e.12 :mod (l / little~e.11)) :arg1 (p2 / pursue-01~e.3 :arg0 (t / they~e.2) :arg1 (p3 / person~e.6 :arg0-of~e.6 (t2 / travel-01~e.6 :ord~e.5 (o / ordinal-entity~e.5 :value 1)))))

# "_0 they_1 are_2 pursuing_3 nothing_4 at_5 all_6 ,_7 "_8 said_9 the_10 switchman_11 ._12
(s / say-01~e.9 :arg0 (s2 / switchman~e.11) :arg1 (p / pursue-01~e.3 :arg0 (t / they~e.1) :arg1 (n / nothing~e.4 :extent~e.5 (a / at-all~e.6))))

# "_0 they_1 are_2 asleep_3 in_4 there_5 ,_6 or_7 if_8 they_9 are_10 not_11 asleep_12 they_13 are_14 yawning_15 ._16
(o / or~e.7 :op1 (s / sleep-01~e.3 :arg0 (t / they~e.1) :location~e.4 (t2 / there~e.5)) :op2 (y / yawn-01~e.15 :arg0 t :condition~e.8 (s2 / sleep-01~e.12 :polarity~e.11 -~e.11 :arg0 t)))

# only_0 the_1 children_2 are_3 flattening_4 their_5 noses_6 against_7 the_8 windowpanes_9 ._10 "_11
(f / flatten-01~e.4 :arg0 (c / child~e.2 :mod (o / only~e.0)) :arg1 (n / nose~e.6 :part-of~e.5 c) :arg1-of (c2 / cause-01 :arg0 (p / push-01~e.7 :arg0 c :arg1 n :arg2 (w / windowpane~e.9))))

# "_0 only_1 the_2 children_3 know_4 what_5 they_6 are_7 looking_8 for_9 ,_10 "_11 said_12 the_13 little_14 prince_15 ._16
(s / say-01~e.12 :arg0 (p / prince~e.15 :mod (l / little~e.14)) :arg1 (k / know-01~e.4 :arg0 (c / child~e.3 :mod (o / only~e.1)) :arg1 (t / thing~e.5 :arg1-of~e.8 (l2 / look-01~e.8 :arg0 c))))

# "_0 they_1 waste_2 their_3 time_4 over_5 a_6 rag_7 doll_8 and_9 it_10 becomes_11 very_12 important_13 to_14 them_15 ;_16 and_17 if_18 anybody_19 takes_20 it_21 away_22 from_23 them_24 ,_25 they_26 cry_27 ..._28 "_29
(a / and~e.9 :op1 (c3 / cause-01 :arg0 (w / waste-01~e.2 :arg0 (t / they~e.1) :arg1 (t2 / time~e.4 :poss~e.3 t) :arg1-of (c / cause-01 :arg0 (d / doll~e.8 :mod (r / rag~e.7)))) :arg1 (b / become-01~e.11 :arg1 d :arg2 (i / important~e.13 :arg1-of (o / opine-01~e.14 :arg0 t) :degree~e.10 (v / very~e.12)))) :op2 (c2 / cry-02~e.27 :arg0 t :condition~e.18 (t3 / take-away-05~e.20 :arg0 (a3 / anybody~e.19) :arg1 d :source~e.23 t)))

# "_0 they_1 are_2 lucky_3 ,_4 "_5 the_6 switchman_7 said_8 ._9
(s / say-01~e.8 :arg0 (s2 / switchman~e.7) :arg1 (l / lucky~e.3 :domain (t / they~e.1)))

# chapter_0 23_1 ._2
(c / chapter~e.0 :mod 23~e.1)

# "_0 good_1 morning_2 ,_3 "_4 said_5 the_6 little_7 prince_8 ._9
(s / say-01~e.5 :arg0 (p / prince~e.8 :mod (l / little~e.7)) :arg1 (m / morning~e.2 :arg1-of (g / good-02~e.1)))

# "_0 good_1 morning_2 ,_3 "_4 said_5 the_6 merchant_7 ._8
(s / say-01~e.5 :arg0 (p / person~e.7 :arg0-of~e.7 (m / merchandise-01~e.7)) :arg1 (m2 / morning~e.2 :arg1-of (g / good-02~e.1)))

# this_0 was_1 a_2 merchant_3 who_4 sold_5 pills_6 that_7 had_8 been_9 invented_10 to_11 quench_12 thirst_13 ._14
(s / sell-01~e.5 :arg0 (p / person~e.3 :arg0-of~e.3 (m / merchandise-01~e.3) :domain~e.2 (t2 / this~e.0)) :arg1 (p2 / pill~e.6 :arg1-of~e.8 (i / invent-01~e.10) :purpose~e.11 (q / quench-01~e.12 :arg0 p2 :arg1 (t / thirst-01~e.13))))

# you_0 need_1 only_2 swallow_3 one_4 pill_5 a_6 week_7 ,_8 and_9 you_10 would_11 feel_12 no_13 need_14 of_15 anything_16 to_17 drink_18 ._19
(c / cause-01~e.15 :arg0 (n / need-01~e.1 :arg0 (y / you~e.0) :arg1 (s / swallow-01~e.3 :arg1 (r / rate-entity-91~e.10 :arg1 (p / pill~e.5 :quant 1~e.4) :arg3 (t / temporal-quantity :quant 1~e.6 :unit (w / week~e.7)))) :mod (o / only~e.2)) :arg1 (f / feel-01~e.12 :polarity~e.13 -~e.13 :arg0 y :arg1 (n2 / need-01~e.14 :arg0 y :arg1 (d / drink-01~e.18 :arg0 y :arg1 (a2 / anything~e.16)))))

# "_0 why_1 are_2 you_3 selling_4 those_5 ?_6 "_7 asked_8 the_9 little_10 prince_11 ._12
(a / ask-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (s / sell-01~e.4 :arg0 (y / you~e.3) :arg1 (t / that~e.5) :arg1-of (c / cause-01~e.1 :arg0 (a2 / amr-unknown~e.6))))

# "_0 because_1 they_2 save_3 a_4 tremendous_5 amount_6 of_7 time_8 ,_9 "_10 said_11 the_12 merchant_13 ._14
(s / say-01~e.11 :arg0 (p / person~e.13 :arg0-of~e.13 (m / merchandise-01~e.13)) :arg1 (c / cause-01~e.1 :arg0 (t / they~e.2) :arg1 (s2 / save-01~e.3 :arg0 t :arg1 (t2 / time~e.8 :arg1-of (a / amount-01~e.6 :arg2 (t3 / tremendous~e.5))))))

# "_0 computations_1 have_2 been_3 made_4 by_5 experts_6 ._7
(m / make-01~e.4 :arg0 (p / person~e.5 :arg1-of~e.6 (e / expert-01~e.6)) :arg1 (t / thing~e.2 :arg1-of~e.1 (c / compute-01~e.1)))

# with_0 these_1 pills_2 ,_3 you_4 save_5 fifty_6 -_7 three_8 minutes_9 in_10 every_11 week_12 ._13 "_14
(s / save-03~e.5 :arg0 (y / you~e.4) :arg1 (r / rate-entity-91~e.11 :arg1 (t / temporal-quantity :quant 53~e.6 :unit (m / minute~e.9)) :arg2 (t3 / temporal-quantity :quant 1 :unit (w / week~e.12))) :instrument~e.0 (p / pill~e.2 :mod (t2 / this~e.1)))

# "_0 and_1 what_2 do_3 i_4 do_5 with_6 those_7 fifty_8 -_9 three_10 minutes_11 ?_12 "_13
(a / and~e.1 :op1 (d / do-02~e.5 :arg0 (i / i~e.4) :arg1 (a2 / amr-unknown~e.12) :arg2 (t / temporal-quantity :quant 53~e.8 :unit (m / minute~e.11) :mod (t2 / that~e.7))))

# "_0 anything_1 you_2 like_3 ..._4 "_5
(d / do-02~e.3 :arg0 (y2 / you~e.2) :arg1 (a2 / anything~e.1 :arg1-of (l / like-02~e.3 :arg0 y2)))

# "_0 as_1 for_2 me_3 ,_4 "_5 said_6 the_7 little_8 prince_9 to_10 himself_11 ,_12 "_13 if_14 i_15 had_16 fifty_17 -_18 three_19 minutes_20 to_21 spend_22 as_23 i_24 liked_25 ,_26 i_27 should_28 walk_29 at_30 my_31 leisure_32 toward_33 a_34 spring_35 of_36 fresh_37 water_38 ._39 "_40
(s / say-01~e.6 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (w / walk-01~e.29 :arg0 (i / i~e.27) :direction~e.30 (t / toward~e.33 :destination~e.11 (s2 / spring~e.35 :source-of~e.34 (w2 / water~e.38 :arg1-of (f / fresh-04~e.37)))) :manner~e.28 (l2 / leisure~e.32 :poss~e.31 p) :condition~e.14 (h / have-03~e.16 :arg0 p :arg1 (t2 / temporal-quantity :quant 53~e.17 :unit (m / minute~e.20) :arg1-of (s3 / spend-02~e.22 :arg2 (l3 / like-02~e.25 :arg0 p))))) :arg2 p)

# chapter_0 24_1 ._2
(c / chapter~e.0 :mod 24~e.1)

# it_0 was_1 now_2 the_3 eighth_4 day_5 since_6 i_7 had_8 had_9 my_10 accident_11 in_12 the_13 desert_14 ,_15 and_16 i_17 had_18 listened_19 to_20 the_21 story_22 of_23 the_24 merchant_25 as_26 i_27 was_28 drinking_29 the_30 last_31 drop_32 of_33 my_34 water_35 supply_36 ._37
(a / and~e.16 :op1 (p / pass-03~e.18 :arg1 (t2 / temporal-quantity :quant 8 :unit (d / day~e.5)) :time (s / since~e.6 :op1 (a2 / accident~e.11 :poss~e.10 (i / i~e.7) :location~e.12 (d2 / desert~e.14)))) :op2 (l / listen-01~e.19 :arg0 i :arg1 (s2 / story~e.22 :poss (p2 / person~e.17 :arg0-of~e.23 (m2 / merchandise-01~e.25))) :time~e.26 (d3 / drink-01~e.29 :arg0 i :arg1 (d4 / drop~e.32 :part-of~e.34 (w / water~e.35 :arg1-of (s3 / supply-01~e.36 :arg2 i)) :ord~e.0 (o / ordinal-entity~e.4 :value "-1"~e.31)))))

# "_0 ah_1 ,_2 "_3
(a / ah~e.1 :mode expressive~e.1)

# i_0 said_1 to_2 the_3 little_4 prince_5 ,_6 "_7 these_8 memories_9 of_10 yours_11 are_12 very_13 charming_14 ;_15 but_16 i_17 have_18 not_19 yet_20 succeeded_21 in_22 repairing_23 my_24 plane_25 ;_26 i_27 have_28 nothing_29 more_30 to_31 drink_32 ;_33 and_34 i_35 ,_36 too_37 ,_38 should_39 be_40 very_41 happy_42 if_43 i_44 could_45 walk_46 at_47 my_48 leisure_49 toward_50 a_51 spring_52 of_53 fresh_54 water_55 !_56 "_57
(s / say-01~e.1 :arg0 (i / i~e.0) :arg1 (a / and~e.2 :op1 (c2 / charm-01~e.14 :arg0 (m / memory~e.9 :poss~e.11 (y / you~e.11) :mod (t / this~e.8)) :concession-of~e.16 (a2 / and~e.34 :op1 (s2 / succeed-01~e.21 :polarity~e.19 -~e.19 :arg0 i :arg1 (r / repair-01~e.23 :arg0 i :arg1 (p2 / plane~e.25 :poss~e.24 i)) :time (y2 / yet~e.20)) :op2 (h / have-03~e.28 :arg0 i :arg1 (n / nothing~e.29 :purpose~e.31 (d / drink-01~e.32 :arg0 i))) :op3 (h2 / happy-01~e.42 :arg1 i :degree~e.39 (v2 / very~e.41) :condition~e.43 (p3 / possible-01~e.45 :arg1 (w / walk-01~e.46 :arg0 i :direction~e.47 (s3 / spring~e.52 :source-of~e.50 (w2 / water~e.55 :arg1-of (f / fresh-04~e.54))) :manner (a3 / at~e.47 :op1 (l2 / leisure~e.49 :poss~e.48 i)))))) :degree (v / very~e.13))) :arg2 (p / prince~e.5 :mod (l / little~e.4)))

# "_0 my_1 friend_2 the_3 fox_4 -_5 -_6 "_7 the_8 little_9 prince_10 said_11 to_12 me_13 ._14
(s / say-01~e.11 :arg0 (p / prince~e.10 :mod (l / little~e.9)) :arg1 (f / fox~e.4 :arg0-of (h / have-rel-role-91~e.1 :arg1 i :arg2 (f2 / friend~e.2))) :arg2 (i / i~e.13))

# "_0 my_1 dear_2 little_3 man_4 ,_5 this_6 is_7 no_8 longer_9 a_10 matter_11 that_12 has_13 anything_14 to_15 do_16 with_17 the_18 fox_19 !_20 "_21
(s / say-01~e.16 :arg0 (i / i~e.1) :arg1 (c / concern-02~e.14 :arg0 (m2 / matter~e.11 :domain~e.10 (t / this~e.6)) :arg1 (f / fox~e.19) :time (n / no-longer~e.9)) :arg2 (m / man~e.4 :mod (l / little~e.3) :poss~e.1 i :mod (d / dear~e.2)))

# "_0 why_1 not_2 ?_3 "_4
(c2 / concern-02~e.1 :polarity~e.2 -~e.2 :arg1-of (c3 / cause-01~e.1 :arg0 (a / amr-unknown~e.3)))

# "_0 because_1 i_2 am_3 about_4 to_5 die_6 of_7 thirst_8 ..._9 "_10
(c / cause-01~e.1 :arg0 (d / die-01~e.6 :arg1 (i / i~e.2) :arg1-of (c2 / cause-01~e.7 :arg0 (t / thirst-01~e.8 :arg0 i)) :time (a / about-to~e.4)))

# he_0 did_1 not_2 follow_3 my_4 reasoning_5 ,_6 and_7 he_8 answered_9 me_10 :_11 "_12 it_13 is_14 a_15 good_16 thing_17 to_18 have_19 had_20 a_21 friend_22 ,_23 even_24 if_25 one_26 is_27 about_28 to_29 die_30 ._31
(a / and~e.7 :op1 (f / follow-02~e.3 :polarity~e.2 -~e.1 :arg0 (h / he~e.0) :arg1 (r / reason-01~e.5 :arg0 (i / i~e.10))) :op2 (a2 / answer-01~e.9 :arg0 h :arg1 i :arg2 (g / good-02~e.16 :arg1 (h2 / have-rel-role-91~e.19 :arg1 o :arg2 (f2 / friend~e.22)) :concession~e.17 (e / even-if~e.24 :op1 (d / die-01~e.30 :arg1 (o / one~e.26) :time (a3 / about-to~e.28))))))

# i_0 ,_1 for_2 instance_3 ,_4 am_5 very_6 glad_7 to_8 have_9 had_10 a_11 fox_12 as_13 a_14 friend_15 ..._16 "_17
(g / glad-02~e.7 :arg0 (h / have-rel-role-91~e.9 :arg0 (f2 / fox~e.12) :arg1 i :arg2 (f / friend~e.15)) :arg1 (i / i~e.0 :arg0-of~e.2 (e / exemplify-01~e.3)) :degree (v / very~e.6))

# "_0 he_1 has_2 no_3 way_4 of_5 guessing_6 the_7 danger_8 ,_9 "_10
(p / possible-01~e.4 :arg1 (g / guess-01~e.6 :arg0 (h / he~e.1) :arg1 (d / danger~e.8)) :polarity~e.3 -~e.3)

# i_0 said_1 to_2 myself_3 ._4
(s / say-01~e.1 :arg0 (i / i~e.0) :arg2 i)

# "_0 he_1 has_2 never_3 been_4 either_5 hungry_6 or_7 thirsty_8 ._9
(a / and~e.5 :op1 (h / hunger-01~e.6 :arg0 (h2 / he~e.1) :polarity -) :op2 (t / thirst-01~e.8 :arg0 h2 :polarity~e.3 -~e.3) :time~e.2 (e / ever~e.3))

# a_0 little_1 sunshine_2 is_3 all_4 he_5 needs_6 ..._7 "_8
(n / need-01~e.6 :arg0 (h / he~e.5) :arg1 (s / sunshine~e.2 :quant (l / little~e.1)) :mod (a / all~e.4))

# but_0 he_1 looked_2 at_3 me_4 steadily_5 ,_6 and_7 replied_8 to_9 my_10 thought_11 :_12 "_13 i_14 am_15 thirsty_16 ,_17 too_18 ._19
(c / contrast-01~e.0 :arg2 (a2 / and~e.7 :op1 (l / look-01~e.2 :arg0 (h / he~e.1) :arg1 (i / i~e.4) :manner (s / steady~e.5)) :op2 (r / reply-01~e.8 :arg0 h :arg1 (t / thing~e.11 :arg1-of~e.9 (t2 / think-01~e.9 :arg0 i)) :arg2 (t3 / thirst-01~e.16 :arg0 h :mod (t4 / too~e.18)))))

# let_0 us_1 look_2 for_3 a_4 well_5 ..._6 "_7
(l / look-01~e.2 :arg0 (w / we~e.1) :arg1 (w2 / well~e.5) :mode imperative~e.0)

# i_0 made_1 a_2 gesture_3 of_4 weariness_5 ._6
(g2 / gesture-01~e.3 :arg0 (i / i~e.0) :arg1 (w / weary-01~e.5 :arg1 i))

# it_0 is_1 absurd_2 to_3 look_4 for_5 a_6 well_7 ,_8 at_9 random_10 ,_11 in_12 the_13 immensity_14 of_15 the_16 desert_17 ._18
(a / absurd~e.2 :domain~e.6 (l / look-01~e.4 :arg1 (w / well~e.7) :location (d / desert~e.17 :mod (i / immense~e.14)) :manner (r / random~e.10)))

# but_0 nevertheless_1 we_2 started_3 walking_4 ._5
(h / have-concession-91~e.0 :arg1 (s / start-01~e.3 :arg0 (w / we~e.2) :arg1 (w2 / walk-01~e.4)))

# when_0 we_1 had_2 trudged_3 along_4 for_5 several_6 hours_7 ,_8 in_9 silence_10 ,_11 the_12 darkness_13 fell_14 ,_15 and_16 the_17 stars_18 began_19 to_20 come_21 out_22 ._23
(a / and~e.16 :op1 (f / fall-04~e.14 :arg1 (d / darkness~e.13)) :op2 (b / begin-01~e.19 :arg0 (s / star~e.18) :arg1 (c / come-out-09~e.21 :arg1 s)) :time~e.0 (t / trudge-01~e.3 :arg0 (w / we~e.1) :duration~e.5 (s2 / several~e.6 :op1 (t2 / temporal-quantity :quant 1 :unit (h / hour~e.7))) :manner~e.22 (s3 / silent~e.10)))

# thirst_0 had_1 made_2 me_3 a_4 little_5 feverish_6 ,_7 and_8 i_9 looked_10 at_11 them_12 as_13 if_14 i_15 were_16 in_17 a_18 dream_19 ._20
(a / and~e.8 :op1 (m / make-02~e.2 :arg0 (t / thirst-01~e.0 :arg0 (i / i~e.3)) :arg1 (f / feverish~e.6 :domain i :degree (l / little~e.5))) :op2 (l2 / look-01~e.10 :arg0 i :arg1 (t2 / they~e.12) :arg1-of (r / resemble-01~e.13 :arg2 (d / dream-01~e.19 :arg0 i))))

# the_0 little_1 prince_2 's_3 last_4 words_5 came_6 reeling_7 back_8 into_9 my_10 memory_11 :_12 "_13 then_14 you_15 are_16 thirsty_17 ,_18 too_19 ?_20 "_21
(c / come-01~e.6 :arg1 (w / word-01~e.5 :arg0 (p / prince~e.2 :mod (l2 / little~e.1)) :arg1 (t / thirst-01~e.17 :mode~e.14 interrogative~e.20 :arg0 (y / you~e.15 :mod (t2 / too~e.19))) :mod (l / last~e.4)) :arg4~e.8 (m / memory~e.11 :poss~e.10 (i / i~e.10)) :manner (r / reel-03~e.7 :arg1 w :arg2 m))

# i_0 demanded_1 ._2
(d / demand-01~e.1 :arg0 (i / i~e.0))

# but_0 he_1 did_2 not_3 reply_4 to_5 my_6 question_7 ._8
(c / contrast-01~e.0 :arg2 (r / reply-01~e.4 :arg0 (h / he~e.1) :arg1 (q / question-01~e.7 :arg0 (i / i~e.6)) :polarity~e.3 -~e.2))

# he_0 merely_1 said_2 to_3 me_4 :_5 "_6 water_7 may_8 also_9 be_10 good_11 for_12 the_13 heart_14 ..._15 "_16
(s / say-01~e.2 :arg0 (h / he~e.0) :arg1 (p / possible-01~e.8 :arg1 (g / good-04~e.11 :arg1 (w / water~e.7) :arg2 (h2 / heart~e.14) :mod (a / also~e.9))) :arg2 (i / i~e.4) :mod (m / mere~e.1))

# i_0 did_1 not_2 understand_3 this_4 answer_5 ,_6 but_7 i_8 said_9 nothing_10 ._11
(u2 / understand-01~e.3 :arg0 (i / i~e.0) :arg1 (a / answer~e.5 :mod (t / this~e.4)) :polarity~e.2 -~e.1 :concession-of~e.7 (s / say-01~e.9 :arg0 i :arg1 (n / nothing~e.10)))

# i_0 knew_1 very_2 well_3 that_4 it_5 was_6 impossible_7 to_8 cross_9 -_10 examine_11 him_12 ._13
(k / know-01~e.1 :arg0 (i / i~e.0) :arg1 (p / possible-01~e.8 :polarity -~e.7 :arg1 (c / crossexamine-01~e.9 :arg0 i :arg1 (h / he~e.12))) :degree~e.11 (w / well~e.3 :degree (v / very~e.2)))

# he_0 was_1 tired_2 ._3
(t / tire-01~e.2 :arg1 (h / he~e.0))

# he_0 sat_1 down_2 ._3
(s / sit-down-02~e.1 :arg1 (h / he~e.0))

# i_0 sat_1 down_2 beside_3 him_4 ._5
(s / sit-down-02~e.1 :arg1 (i / i~e.0) :location~e.2 (b / beside~e.3 :op1 (h / he~e.4)))

# and_0 ,_1 after_2 a_3 little_4 silence_5 ,_6 he_7 spoke_8 again_9 :_10 "_11 the_12 stars_13 are_14 beautiful_15 ,_16 because_17 of_18 a_19 flower_20 that_21 can_22 not_23 be_24 seen_25 ._26 "_27
(a / and~e.0 :op2 (s / speak-01~e.8 :arg0 (h / he~e.7) :arg1 (b / beautiful-02~e.15 :arg1 (s5 / star~e.13) :arg1-of (c / cause-01~e.17 :arg0 (f / flower~e.20 :arg1-of (s6 / see-01~e.25 :arg1-of~e.21 (p / possible-01~e.22 :polarity~e.23 -~e.23))))) :time (a2 / after~e.2 :op1 (s2 / silent~e.5 :duration~e.3 (l / little~e.4))) :mod (a3 / again~e.9)))

# i_0 replied_1 ,_2 "_3 yes_4 ,_5 that_6 is_7 so_8 ._9 "_10
(r / reply-01~e.1 :arg0 (i / i~e.0) :arg2 (s / so~e.8 :domain (t / that~e.6)))

# and_0 ,_1 without_2 saying_3 anything_4 more_5 ,_6 i_7 looked_8 across_9 the_10 ridges_11 of_12 sand_13 that_14 were_15 stretched_16 out_17 before_18 us_19 in_20 the_21 moonlight_22 ._23
(a / and~e.0 :op2 (l / look-01~e.8 :arg0 (i / i~e.7) :arg1 (a3 / across~e.9 :op1 (r / ridge~e.11 :consist-of~e.12 (s / sand~e.13) :arg1-of~e.14 (s2 / stretch-out-02~e.16 :location~e.20 (b / before~e.18 :op1 (w / we~e.19))) :arg1-of~e.14 (l2 / light-04 :arg0 (m / moon~e.22)))) :manner~e.2 (s3 / say-01~e.3 :polarity - :arg0 i :arg1 (a2 / anything~e.4 :mod (m2 / more~e.5)))))

# "_0 the_1 desert_2 is_3 beautiful_4 ,_5 "_6 the_7 little_8 prince_9 added_10 ._11
(a / add-01~e.10 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (b / beautiful-02~e.4 :arg1 (d / desert~e.2)))

# and_0 that_1 was_2 true_3 ._4
(a / and~e.0 :op2 (t / true-01~e.3 :arg1 (t2 / that~e.1)))

# i_0 have_1 always_2 loved_3 the_4 desert_5 ._6
(l / love-01~e.3 :arg0 (i / i~e.0) :arg1 (d / desert~e.5) :time (a / always~e.2))

# one_0 sits_1 down_2 on_3 a_4 desert_5 sand_6 dune_7 ,_8 sees_9 nothing_10 ,_11 hears_12 nothing_13 ._14
(a / and~e.1 :op1 (s / sit-down-02~e.1 :arg1 (o / one~e.0) :location~e.2 (d / dune~e.7 :consist-of (s2 / sand~e.6) :location~e.3 (d2 / desert~e.5))) :op2 (s3 / see-01~e.9 :arg0 o :arg1 (n / nothing~e.13)) :op3 (h / hear-01~e.12 :arg0 o :arg1 (n2 / nothing~e.10)))

# yet_0 through_1 the_2 silence_3 something_4 throbs_5 ,_6 and_7 gleams_8 ..._9
(a2 / and~e.7 :op1 (t / throb-01~e.1 :arg1 (s / something~e.4)) :op2 (g / gleam-01~e.8 :arg0 s) :concession~e.0 (s2 / silent~e.3))

# "_0 what_1 makes_2 the_3 desert_4 beautiful_5 ,_6 "_7 said_8 the_9 little_10 prince_11 ,_12 "_13 is_14 that_15 somewhere_16 it_17 hides_18 a_19 well_20 ..._21 "_22
(s / say-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (m / make-02~e.2 :arg0 (h / hide-01~e.18 :arg0 d :arg1 (w / well~e.20) :location (s2 / somewhere~e.16)) :arg1 (b / beautiful-02~e.5 :arg1 (d / desert~e.4))))

# i_0 was_1 astonished_2 by_3 a_4 sudden_5 understanding_6 of_7 that_8 mysterious_9 radiation_10 of_11 the_12 sands_13 ._14
(a / astonish-01~e.2 :arg0 (u / understand-01~e.6 :arg0 i :arg1 (r / radiate-01~e.10 :arg0 (s2 / sand~e.13) :mod (m / mystery~e.9) :mod (t / that~e.8)) :manner~e.3 (s / sudden~e.5)) :arg1 (i / i~e.0))

# when_0 i_1 was_2 a_3 little_4 boy_5 i_6 lived_7 in_8 an_9 old_10 house_11 ,_12 and_13 legend_14 told_15 us_16 that_17 a_18 treasure_19 was_20 buried_21 there_22 ._23
(a / and~e.13 :op1 (l / live-01~e.7 :arg0 (i / i~e.6) :location~e.8 (h / house~e.11 :mod (o / old~e.10)) :time~e.0 (b / boy~e.5 :mod (l2 / little~e.4) :domain i)) :op2 (t / tell-01~e.15 :arg0 (l3 / legend~e.14) :arg1 (b2 / bury-01~e.21 :arg1 (t2 / treasure~e.19) :location~e.22 h) :arg2 (w / we~e.16)))

# to_0 be_1 sure_2 ,_3 no_4 one_5 had_6 ever_7 known_8 how_9 to_10 find_11 it_12 ;_13 perhaps_14 no_15 one_16 had_17 ever_18 even_19 looked_20 for_21 it_22 ._23
(a / and~e.0 :op1 (s / sure-02~e.2 :arg0 (n / no-one~e.16) :arg1 (t / thing~e.8 :manner-of~e.9 (f / find-01~e.11 :arg0 n :arg1 (i / it~e.12))) :time~e.19 (e2 / ever~e.18) :mod (t2 / to-be-sure~e.17)) :op2 (p2 / possible-01~e.14 :arg1 (l / look-01~e.20 :arg0 n :arg1 i :time e2)))

# but_0 it_1 cast_2 an_3 enchantment_4 over_5 that_6 house_7 ._8
(c / contrast-01~e.0 :arg2 (c2 / cast-01~e.2 :arg0 (i / it~e.1) :arg1 (e / enchant-01~e.4) :arg2 (h / house~e.7 :mod (t / that~e.6))))

# my_0 home_1 was_2 hiding_3 a_4 secret_5 in_6 the_7 depths_8 of_9 its_10 heart_11 ..._12
(h / hide-01~e.3 :arg0 (h2 / home~e.1 :poss~e.0 (i / i~e.0)) :arg1 (s / secret~e.5) :location~e.6 (d / deep-02~e.8 :arg1 (h3 / heart~e.11 :part-of~e.10 h2)))

# "_0 yes_1 ,_2 "_3
(y / yes~e.1)

# i_0 said_1 to_2 the_3 little_4 prince_5 ._6
(s / say-01~e.1 :arg0 (i / i~e.0) :arg2 (p / prince~e.5 :mod (l / little~e.4)))

# "_0 the_1 house_2 ,_3 the_4 stars_5 ,_6 the_7 desert_8 -_9 -_10 what_11 gives_12 them_13 their_14 beauty_15 is_16 something_17 that_18 is_19 invisible_20 !_21 "_22
(g2 / give-01~e.12 :arg0 (s3 / something~e.17 :arg1-of (s4 / see-01~e.11 :arg1-of~e.18 (p / possible-01~e.20 :polarity~e.14 -~e.21))) :arg1 (b / beautiful-02~e.15 :arg1 a) :arg2 (a / and :op1 (h / house~e.2) :op2 (s2 / star~e.5) :op3 (d / desert~e.8)))

# "_0 i_1 am_2 glad_3 ,_4 "_5 he_6 said_7 ,_8 "_9 that_10 you_11 agree_12 with_13 my_14 fox_15 ._16 "_17
(s / say-01~e.7 :arg0 (h / he~e.6) :arg1 (g / glad-02~e.3 :arg0 (a / agree-01~e.12 :arg0 (y / you~e.11) :arg2 (f / fox~e.15 :poss~e.14 h)) :arg1 h))

# as_0 the_1 little_2 prince_3 dropped_4 off_5 to_6 sleep_7 ,_8 i_9 took_10 him_11 in_12 my_13 arms_14 and_15 set_16 out_17 walking_18 once_19 more_20 ._21
(a2 / and~e.15 :op1 (t / take-01~e.10 :arg0 (i / i~e.9) :arg1 (p / prince~e.3 :mod (l / little~e.2)) :arg3~e.11 (a / arm~e.14 :part-of~e.13 i)) :op2 (s / set-out-07~e.16 :arg0 i :manner~e.17 (w / walk-01~e.18) :mod (a3 / again~e.20 :frequency~e.19 1)) :time (d / drop-off-03~e.4 :arg0 p :arg2 (s2 / sleep-01~e.7 :arg0 p)))

# i_0 felt_1 deeply_2 moved_3 ,_4 and_5 stirred_6 ._7
(f / feel-01~e.1 :arg0 (i / i~e.0) :arg1 (a / and~e.5 :op1 (m / move-05~e.3 :arg1 i :arg1-of (d / deep-02~e.2)) :op2 (s / stir-02~e.6 :arg1 i)))

# it_0 seemed_1 to_2 me_3 that_4 i_5 was_6 carrying_7 a_8 very_9 fragile_10 treasure_11 ._12
(s / seem-01~e.1 :arg1 (c / carry-01~e.7 :arg0 i :arg1 (t / treasure~e.11 :mod (f / fragile~e.10 :degree (v / very~e.9)))) :arg2 (i / i~e.3))

# it_0 seemed_1 to_2 me_3 ,_4 even_5 ,_6 that_7 there_8 was_9 nothing_10 more_11 fragile_12 on_13 all_14 earth_15 ._16
(s / seem-01~e.1 :arg1 (f / fragile~e.12 :degree (m / more~e.11) :domain (n2 / nothing~e.10 :location~e.13 (p / planet :wiki "earth"~e.15 :name (n / name :op1 "earth"~e.15) :mod (a / all~e.14)))) :arg2 (i / i~e.3) :mod (e / even~e.5))

# in_0 the_1 moonlight_2 i_3 looked_4 at_5 his_6 pale_7 forehead_8 ,_9 his_10 closed_11 eyes_12 ,_13 his_14 locks_15 of_16 hair_17 that_18 trembled_19 in_20 the_21 wind_22 ,_23 and_24 i_25 said_26 to_27 myself_28 :_29 "_30 what_31 i_32 see_33 here_34 is_35 nothing_36 but_37 a_38 shell_39 ._40
(a / and~e.24 :op1 (l / look-01~e.4 :arg0 (i / i~e.3) :arg1 (a2 / and~e.24 :op1 (f / forehead~e.8 :part-of~e.6 (h / he~e.6) :arg1-of (p / pale-03~e.7)) :op2 (e / eye~e.12 :arg1-of (c / close-01~e.11) :part-of~e.10 h) :op3 (l2 / lock~e.15 :consist-of~e.16 (h2 / hair~e.17) :arg1-of (t / tremble-01~e.19 :arg1-of (c2 / cause-01~e.18 :arg0 (w / wind~e.22))) :part-of~e.14 h) :arg1-of (l3 / light-04~e.36 :arg0 (m2 / moon~e.2)))) :op2 (s / say-01~e.26 :arg0 i :arg1 (s2 / see-01~e.33 :arg0 i :arg1 (s3 / shell~e.39) :mod (o / only~e.37) :location~e.28 (h3 / here~e.34)) :arg2 i))

# what_0 is_1 most_2 important_3 is_4 invisible_5 ..._6 "_7
(s / see-01~e.0 :arg1 (t / thing~e.0 :mod (i2 / important~e.3 :degree (m / most~e.2))) :arg1-of (p / possible-01~e.5 :polarity -))

# as_0 his_1 lips_2 opened_3 slightly_4 with_5 the_6 suspicious_7 of_8 a_9 half_10 -_11 smile_12 ,_13 i_14 said_15 to_16 myself_17 ,_18 again_19 :_20 "_21 what_22 moves_23 me_24 so_25 deeply_26 ,_27 about_28 this_29 little_30 prince_31 who_32 is_33 sleeping_34 here_35 ,_36 is_37 his_38 loyalty_39 to_40 a_41 flower_42 -_43 -_44 the_45 image_46 of_47 a_48 rose_49 that_50 shines_51 through_52 his_53 whole_54 being_55 like_56 the_57 flame_58 of_59 a_60 lamp_61 ,_62 even_63 when_64 he_65 is_66 asleep_67 ..._68 "_69
(s / say-01~e.15 :arg0 (i / i~e.14) :arg1 (m / move-05~e.23 :arg0 (p / prince~e.31 :mod (l / little~e.30) :arg0-of (s2 / sleep-01~e.34 :location~e.17 (h / here~e.35))) :arg1 i :arg2 (l2 / loyal-01~e.39 :arg1 p :arg2 (f / flower~e.42 :op1 (i2 / image~e.46 :poss~e.38 (r / rose~e.49 :arg1-of (s3 / shine-01~e.51 :arg2 (t / through~e.52 :op1 (b / being~e.55 :poss~e.53 p :mod (w / whole~e.54))) :arg1-of (r2 / resemble-01~e.56 :arg2 (f2 / flame-01~e.58 :arg1 (l3 / lamp~e.61))) :concession~e.64 (e / even-when~e.63 :op1 (s6 / sleep-01~e.67 :arg0 p))))))) :arg1-of (d / deep-02~e.26)) :arg2 i :time~e.29 (o / open-01~e.3 :arg1 (l4 / lip~e.2 :part-of~e.1 p) :degree (s4 / slight~e.4) :manner~e.5 (s8 / smile-01~e.12 :mod (h3 / half~e.10) :mod (s5 / suspicious~e.7))) :mod (a2 / again~e.19))

# and_0 i_1 felt_2 him_3 to_4 be_5 more_6 fragile_7 still_8 ._9
(a / and~e.0 :op2 (f / feel-02~e.2 :arg0 (i / i~e.1) :arg1 (f3 / fragile~e.7 :domain (h / he~e.3) :degree (m / more~e.6) :mod (s / still~e.8))))

# i_0 felt_1 the_2 need_3 of_4 protecting_5 him_6 ,_7 as_8 if_9 he_10 himself_11 were_12 a_13 flame_14 that_15 might_16 be_17 extinguished_18 by_19 a_20 little_21 puff_22 of_23 wind_24 ..._25
(f / feel-01~e.1 :arg0 (i / i~e.0) :arg1 (n / need-01~e.3 :arg0 i :arg1 (p / protect-01~e.5 :arg0 i :arg1 (h / he~e.6) :conj-as-if~e.11 (f2 / flame-01~e.14 :arg1 h :arg1-of (e / extinguish-01~e.18 :arg0 (p3 / puff-up-04~e.22 :arg1 (w / wind~e.24) :mod (l / little~e.21)) :arg1-of~e.15 (p2 / possible-01~e.16))))))

# and_0 ,_1 as_2 i_3 walked_4 on_5 so_6 ,_7 i_8 found_9 the_10 well_11 ,_12 at_13 daybreak_14 ._15
(a / and~e.0 :op2 (f / find-01~e.9 :arg0 (i / i~e.8) :arg1 (w / well~e.11) :time~e.2 (d / daybreak~e.14) :time~e.2 (w2 / walk-01~e.4 :arg0 i :mod (o / on~e.5) :manner (s / so~e.6))))

# chapter_0 25_1 ._2
(c / chapter~e.0 :mod 25~e.1)

# "_0 men_1 ,_2 "_3 said_4 the_5 little_6 prince_7 ,_8 "_9 set_10 out_11 on_12 their_13 way_14 in_15 express_16 trains_17 ,_18 but_19 they_20 do_21 not_22 know_23 what_24 they_25 are_26 looking_27 for_28 ._29
(s / say-01~e.4 :arg0 (p / prince~e.7 :mod (l / little~e.6)) :arg1 (h / have-concession-91~e.19 :arg1 (k / know-01~e.23 :polarity~e.22 -~e.21 :arg0 m :arg1 (t2 / thing~e.24 :arg1-of~e.27 (l2 / look-01~e.27 :arg0 m))) :arg2 (s2 / set-out-07~e.10 :arg0 (m / man~e.1) :path~e.11 (w / way~e.14 :poss~e.13 m) :manner (t / train~e.17 :mod (e / express~e.16)))))

# then_0 they_1 rush_2 about_3 ,_4 and_5 get_6 excited_7 ,_8 and_9 turn_10 round_11 and_12 round_13 ..._14 "_15
(a / and~e.5 :op1 (r / rush-01~e.2 :arg1 (t / they~e.1) :arg2 (a2 / about~e.3)) :op2 (e / excite-01~e.7 :arg1 t) :op3 (t2 / turn-01~e.10 :arg1 t :direction (a3 / and~e.9 :op1 (r2 / round~e.11) :op2 (r3 / round~e.13))) :time (t3 / then~e.0))

# and_0 he_1 added_2 :_3 "_4 it_5 is_6 not_7 worth_8 the_9 trouble_10 ..._11 "_12
(a / and~e.0 :op2 (a2 / add-01~e.2 :arg0 (h / he~e.1) :arg1 (w / worth-02~e.8 :polarity~e.7 -~e.7 :arg1 (i / it~e.5) :arg2 (t / trouble-01~e.10))))

# the_0 well_1 that_2 we_3 had_4 come_5 to_6 was_7 not_8 like_9 the_10 wells_11 of_12 the_13 sahara_14 ._15
(w / well~e.1 :arg4-of~e.4 (c / come-01~e.5 :arg1 (w2 / we~e.3)) :arg1-of (r / resemble-01~e.9 :polarity~e.8 -~e.8 :arg2 (w3 / well~e.11 :location (d / desert :wiki~e.12 "sahara"~e.14 :name (n / name :op1 "sahara"~e.14)))))

# the_0 wells_1 of_2 the_3 sahara_4 are_5 mere_6 holes_7 dug_8 in_9 the_10 sand_11 ._12
(h / hole~e.7 :arg1-of (d / dig-01~e.8 :arg2 (s / sand~e.11)) :mod (m / mere~e.6) :domain (w / well~e.1 :location~e.9 (d2 / desert :wiki~e.2 "sahara"~e.4 :name (n / name :op1 "sahara"~e.4))))

# this_0 one_1 was_2 like_3 a_4 well_5 in_6 a_7 village_8 ._9
(r / resemble-01~e.3 :arg1 (w / well~e.5 :mod (t / this~e.0)) :arg2 (w2 / well~e.5 :location~e.6 (v / village~e.8)))

# but_0 there_1 was_2 no_3 village_4 here_5 ,_6 and_7 i_8 thought_9 i_10 must_11 be_12 dreaming_13 ..._14
(c3 / contrast-01~e.0 :arg2 (a / and~e.7 :op1 (v / village~e.4 :polarity~e.3 -~e.3 :location~e.1 (h / here~e.5)) :op2 (t / think-01~e.9 :arg0 (i / i~e.8) :arg1 (d / dream-01~e.13 :arg0 i))))

# "_0 it_1 is_2 strange_3 ,_4 "_5
(s / strange~e.3 :domain~e.1 (i / it~e.1))

# i_0 said_1 to_2 the_3 little_4 prince_5 ._6
(s / say-01~e.1 :arg0 (i / i~e.0) :arg2 (p / prince~e.5 :mod (l / little~e.4)))

# "_0 everything_1 is_2 ready_3 for_4 use_5 :_6 the_7 pulley_8 ,_9 the_10 bucket_11 ,_12 the_13 rope_14 ..._15 "_16
(r / ready-02~e.3 :arg1 (e / everything~e.1 :example~e.4 (a / and :op1 (p2 / pulley~e.8) :op2 (b / bucket~e.11) :op3 (r2 / rope~e.14))) :arg2 (u / use-01~e.5 :arg1 e))

# he_0 laughed_1 ,_2 touched_3 the_4 rope_5 ,_6 and_7 set_8 the_9 pulley_10 to_11 working_12 ._13
(a / and~e.7 :op1 (l / laugh-01~e.1 :arg0 (h / he~e.0)) :op2 (t / touch-01~e.3 :arg0 h :arg1 (r / rope~e.5)) :op3 (s / set-08~e.8 :arg0 h :arg1 (p / pulley~e.10) :arg2 (w / work-09~e.12 :arg1 p)))

# and_0 the_1 pulley_2 moaned_3 ,_4 like_5 an_6 old_7 weathervane_8 which_9 the_10 wind_11 has_12 long_13 since_14 forgotten_15 ._16
(a / and~e.0 :op2 (m / moan-01~e.3 :arg0 (p / pulley~e.2) :arg1-of (r / resemble-01~e.5 :arg2 (m2 / moan-01~e.3 :arg0 (w / weathervane~e.8 :mod (o / old~e.7) :arg1-of (f / forget-01~e.15 :arg0 (w2 / wind~e.11) :time~e.12 (s / since~e.14 :op1 (l / long~e.13))))))))

# "_0 do_1 you_2 hear_3 ?_4 "_5 said_6 the_7 little_8 prince_9 ._10
(s / say-01~e.6 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (h / hear-01~e.3 :arg0 (y / you~e.2) :mode interrogative~e.4))

# "_0 we_1 have_2 wakened_3 the_4 well_5 ,_6 and_7 it_8 is_9 singing_10 ..._11 "_12
(a / and~e.7 :op1 (w / wake-01~e.3 :arg0 (w2 / we~e.1) :arg1 (w3 / well~e.5)) :op2 (s / sing-01~e.10 :arg0 w3))

# i_0 did_1 not_2 want_3 him_4 to_5 tire_6 himself_7 with_8 the_9 rope_10 ._11
(w / want-01~e.3 :arg0 (i / i~e.0) :arg1 (t / tire-01~e.6 :arg0 (h / he~e.4) :arg1 h :instrument~e.8 (r / rope~e.10)) :polarity~e.2 -~e.1)

# "_0 leave_1 it_2 to_3 me_4 ,_5 "_6
(l / leave-02~e.1 :arg0 (y / you) :arg1 (i2 / it~e.2) :arg2 (i / i~e.4) :mode~e.4 imperative~e.4)

# i_0 said_1 ._2
(s / say-01~e.1 :arg0 (i / i~e.0))

# "_0 it_1 is_2 too_3 heavy_4 for_5 you_6 ._7 "_8
(h / heavy~e.4 :domain~e.1 (i2 / it~e.1) :degree (t / too~e.3) :compared-to~e.5 (y / you~e.6))

# i_0 hoisted_1 the_2 bucket_3 slowly_4 to_5 the_6 edge_7 of_8 the_9 well_10 and_11 set_12 it_13 there_14 -_15 -_16 happy_17 ,_18 tired_19 as_20 i_21 was_22 ,_23 over_24 my_25 achievement_26 ._27
(a / and~e.11 :op1 (h / hoist-01~e.1 :arg0 (i / i~e.0 :arg1-of (c / content-01~e.24 :arg2 (t3 / thing~e.25 :arg1-of~e.26 (a2 / achieve-01~e.26 :arg0 i)) :concession~e.20 (a3 / and~e.11 :op1 (h2 / happy-01~e.17 :arg1 i) :op2 (t2 / tire-01~e.19 :arg1 i)))) :arg1 (b / bucket~e.3) :arg1-of (s / slow-05~e.4) :destination~e.24 (e / edge~e.7 :part-of~e.8 (w / well~e.10))) :op1 (s2 / set-01~e.12 :arg0 i :arg1 b :arg2 e))

# the_0 song_1 of_2 the_3 pulley_4 was_5 still_6 in_7 my_8 ears_9 ,_10 and_11 i_12 could_13 see_14 the_15 sunlight_16 shimmer_17 in_18 the_19 still_20 trembling_21 water_22 ._23
(a / and~e.11 :op1 (h / hear-01~e.9 :arg0 (i / i~e.8) :arg1 (s / sing-01~e.1 :arg0 (p / pulley~e.4)) :mod (s2 / still~e.6)) :op2 (p2 / possible-01~e.13 :arg1 (s3 / see-01~e.14 :arg0 i :arg1 (s4 / shimmer-01~e.17 :arg1 (s5 / sunlight~e.16) :location~e.18 (w / water~e.22 :arg1-of (t / tremble-01~e.21 :mod (s6 / still~e.20)))))))

# "_0 i_1 am_2 thirsty_3 for_4 this_5 water_6 ,_7 "_8 said_9 the_10 little_11 prince_12 ._13
(s / say-01~e.9 :arg0 (p / prince~e.12 :mod (l / little~e.11)) :arg1 (t / thirst-01~e.3 :arg0 (i / i~e.1) :arg1 (w / water~e.6 :mod (t2 / this~e.5))))

# "_0 give_1 me_2 some_3 of_4 it_5 to_6 drink_7 ..._8 "_9
(g / give-01~e.1 :arg0 (y / you) :arg1 (t / thing~e.4 :arg1-of~e.4 (i3 / include-91~e.4 :arg2 (i / it~e.5)) :quant (s / some~e.3)) :arg2 (i2 / i~e.2) :mode~e.2 imperative~e.2 :purpose~e.6 (d / drink-01~e.7 :arg0 i2 :arg1 t))

# and_0 i_1 understood_2 what_3 he_4 had_5 been_6 looking_7 for_8 ._9
(a / and~e.0 :op2 (u / understand-01~e.2 :arg0 (i / i~e.1) :arg1 (t / thing~e.3 :arg1-of~e.5 (l / look-01~e.7 :arg0 (h / he~e.4)))))

# i_0 raised_1 the_2 bucket_3 to_4 his_5 lips_6 ._7
(r / raise-01~e.1 :arg0 (i / i~e.0) :arg1 (b / bucket~e.3) :arg4~e.4 (l / lip~e.6 :part-of~e.5 (h / he~e.5)))

# he_0 drank_1 ,_2 his_3 eyes_4 closed_5 ._6
(a / and :op1 (d / drink-01~e.1 :arg0 (h / he~e.0)) :op2 (c / close-01~e.5 :arg0 h :arg1 (e / eye~e.4 :part-of~e.3 h)))

# it_0 was_1 as_2 sweet_3 as_4 some_5 special_6 festival_7 treat_8 ._9
(s / sweet-04~e.3 :arg1 (i / it~e.0) :degree (e / equal~e.2) :compared-to~e.4 (f2 / food-dish~e.4 :mod (f / festival~e.7) :mod (s2 / some~e.5) :arg1-of (s3 / special-02~e.6) :arg1-of (t / treat-02~e.8)))

# this_0 water_1 was_2 indeed_3 a_4 different_5 thing_6 from_7 ordinary_8 nourishment_9 ._10
(r2 / resemble-01~e.4 :arg1 (w / water~e.1 :mod (t / this~e.0)) :arg2 (t2 / thing~e.6 :arg2-of~e.7 (n / nourish-01~e.9) :mod (o / ordinary~e.8)) :mod (i / indeed~e.3) :polarity -~e.5)

# its_0 sweetness_1 was_2 born_3 of_4 the_5 walk_6 under_7 the_8 stars_9 ,_10 the_11 song_12 of_13 the_14 pulley_15 ,_16 the_17 effort_18 of_19 my_20 arms_21 ._22
(b2 / bear-02~e.3 :arg0 (a / and :op1 (w2 / walk-01~e.6 :location (u / under~e.7 :op1 (s2 / star~e.9))) :op2 (s3 / sing-01~e.12 :arg0 (p / pulley~e.15)) :op3 (e / effort-01~e.18 :arg0 (a2 / arm~e.21 :part-of~e.19 (i / i~e.20)))) :arg1 (s / sweet-05~e.1 :arg1 (i3 / it~e.0)))

# it_0 was_1 good_2 for_3 the_4 heart_5 ,_6 like_7 a_8 present_9 ._10
(g / good-04~e.2 :arg1 (i / it~e.0 :arg1-of (r / resemble-01~e.7 :arg2 (p / present~e.9))) :arg2 (h / heart~e.5))

# when_0 i_1 was_2 a_3 little_4 boy_5 ,_6 the_7 lights_8 of_9 the_10 christmas_11 tree_12 ,_13 the_14 music_15 of_16 the_17 midnight_18 mass_19 ,_20 the_21 tenderness_22 of_23 smiling_24 faces_25 ,_26 used_27 to_28 make_29 up_30 ,_31 so_32 ,_33 the_34 radiance_35 of_36 the_37 gifts_38 i_39 received_40 ._41
(m / make-up-07~e.29 :arg0 (a / and~e.30 :op1 (l / light-04~e.8 :arg0 (t2 / tree~e.12 :mod (f2 / festival :wiki~e.9 "christmas"~e.11 :name (n / name :op1 "christmas"~e.11)))) :op2 (m2 / music~e.15 :poss~e.27 (e2 / event :wiki~e.16 - :name (n2 / name :op1 "midnight"~e.18 :op2 "mass"~e.19))) :op3 (t4 / tender~e.22 :domain (f / face~e.25 :arg0-of~e.23 (s2 / smile-01~e.24)))) :arg1 (r3 / radiant~e.35 :domain (g2 / gift~e.38 :arg1-of (r4 / receive-01~e.40 :arg0 (i / i~e.39)))) :manner (s / so~e.32) :time~e.0 (b / boy~e.5 :mod (l2 / little~e.4) :domain~e.3 i))

# "_0 the_1 men_2 where_3 you_4 live_5 ,_6 "_7 said_8 the_9 little_10 prince_11 ,_12 "_13 raise_14 five_15 thousand_16 roses_17 in_18 the_19 same_20 garden_21 -_22 -_23 and_24 they_25 do_26 not_27 find_28 in_29 it_30 what_31 they_32 are_33 looking_34 for_35 ._36 "_37
(s / say-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (a / and~e.24 :op1 (r / raise-03~e.14 :arg0 (m / man~e.2 :location~e.3 (l2 / live-01~e.5 :arg0 (y / you~e.4))) :arg1 (r2 / rose~e.17 :quant 5000~e.15) :location~e.18 (g / garden~e.21 :arg1-of (s2 / same-01~e.20))) :op2 (f / find-01~e.28 :polarity~e.27 -~e.26 :arg0 m :arg1 (t / thing~e.31 :arg1-of~e.34 (l3 / look-01~e.34 :arg0 m)) :location g)))

# "_0 they_1 do_2 not_3 find_4 it_5 ,_6 "_7
(f / find-01~e.4 :arg0 (t / they~e.1) :arg1 (i / it~e.5) :polarity~e.3 -~e.2)

# i_0 replied_1 ._2
(r / reply-01~e.1 :arg0 (i / i~e.0))

# "_0 and_1 yet_2 what_3 they_4 are_5 looking_6 for_7 could_8 be_9 found_10 in_11 one_12 single_13 rose_14 ,_15 or_16 in_17 a_18 little_19 water_20 ._21 "_22
(c / contrast-01~e.2 :arg2 (p2 / possible-01~e.8 :arg1 (f / find-01~e.10 :arg1 (t / thing~e.3 :arg1-of~e.6 (l2 / look-01~e.6 :arg0 (t2 / they~e.4))) :location~e.11 (o / or~e.16 :op1 (r / rose~e.14 :arg1-of (s / single-02~e.13)) :op2 (w / water~e.20 :quant (l3 / little~e.19))))))

# "_0 yes_1 ,_2 that_3 is_4 true_5 ,_6 "_7
(t / true-01~e.5 :arg1 (t2 / that~e.3))

# i_0 said_1 ._2
(s / say-01~e.1 :arg0 (i / i~e.0))

# and_0 the_1 little_2 prince_3 added_4 :_5 "_6 but_7 the_8 eyes_9 are_10 blind_11 ._12
(a / and~e.0 :op2 (a2 / add-01~e.4 :arg0 (p / prince~e.3 :mod (l / little~e.2)) :arg1 (c / contrast-01~e.7 :arg2 (b / blind-02~e.11 :arg1 (e / eye~e.9)))))

# one_0 must_1 look_2 with_3 the_4 heart_5 ..._6 "_7
(r / recommend-01~e.1 :arg1 (l / look-01~e.2 :arg0 (o / one~e.0) :instrument~e.3 (h / heart~e.5)))

# i_0 had_1 drunk_2 the_3 water_4 ._5
(d / drink-01~e.2 :arg0 (i / i~e.0) :arg1 (w / water~e.4))

# i_0 breathed_1 easily_2 ._3
(b / breathe-01~e.1 :arg0 (i / i~e.0) :arg1-of (e / easy-05~e.2))

# at_0 sunrise_1 the_2 sand_3 is_4 the_5 color_6 of_7 honey_8 ._9
(r2 / resemble-01~e.0 :arg1 (c / color~e.6 :poss (s / sand~e.3)) :arg2 (c2 / color~e.6 :poss (h / honey~e.8)) :time (r / rise-01~e.7 :arg1 (s2 / sun~e.1)))

# and_0 that_1 honey_2 color_3 was_4 making_5 me_6 happy_7 ,_8 too_9 ._10
(a / and~e.0 :op2 (m / make-02~e.5 :arg0 (c / color~e.3 :mod (h / honey~e.2)) :arg1 (h2 / happy-01~e.7 :arg1 (i / i~e.6)) :mod (t / too~e.9)))

# what_0 brought_1 me_2 ,_3 then_4 ,_5 this_6 sense_7 of_8 grief_9 ?_10
(b2 / bring-01~e.1 :arg0 (a / amr-unknown~e.10) :arg1 (s / sense-01~e.7 :arg0 i :arg1 (g / grieve-01~e.9 :arg1 i) :mod (t / this~e.6)) :arg2 (i / i~e.2) :time (t2 / then~e.4))

# "_0 you_1 must_2 keep_3 your_4 promise_5 ,_6 "_7 said_8 the_9 little_10 prince_11 ,_12 softly_13 ,_14 as_15 he_16 sat_17 down_18 beside_19 me_20 once_21 more_22 ._23
(s / say-01~e.8 :arg0 (p / prince~e.11 :mod (l / little~e.10)) :arg1 (o / obligate-01~e.2 :arg1 (y / you~e.1) :arg2 (h / honor-02~e.3 :arg0 y :arg1 (t / thing~e.5 :arg1-of~e.5 (p2 / promise-01~e.5 :arg0 y)))) :manner (s2 / soft~e.13) :time~e.15 (s3 / sit-down-02~e.17 :arg1 p :location~e.18 (b / beside~e.19 :op1 (i / i~e.20)) :mod (a / again~e.22 :frequency~e.21 1)))

# "_0 what_1 promise_2 ?_3 "_4
(t / thing~e.1 :arg1-of~e.2 (p2 / promise-01~e.2 :arg0 (i / i~e.2)) :domain (a / amr-unknown~e.3))

# "_0 you_1 know_2 -_3 -_4 a_5 muzzle_6 for_7 my_8 sheep_9 ..._10
(t / thing~e.2 :arg2-of~e.1 (m2 / muzzle-01~e.6 :arg1 (s / sheep~e.9 :poss~e.8 (i / i~e.8))))

# i_0 am_1 responsible_2 for_3 this_4 flower_5 ..._6 "_7
(r / responsible-03~e.2 :arg0 (i / i~e.0) :arg1 (f / flower~e.5 :mod (t / this~e.4)))

# i_0 took_1 my_2 rough_3 drafts_4 of_5 drawings_6 out_7 of_8 my_9 pocket_10 ._11
(t / take-01~e.1 :arg0 (i / i~e.0) :arg1 (p2 / picture~e.2 :arg1-of (d3 / draft-01~e.4) :arg1-of (r / rough-04~e.3) :arg1-of (d4 / draw-01~e.6)) :arg2 (p / pocket~e.10 :poss~e.9 i))

# the_0 little_1 prince_2 looked_3 them_4 over_5 ,_6 and_7 laughed_8 as_9 he_10 said_11 :_12 "_13 your_14 baobabs_15 -_16 -_17 they_18 look_19 a_20 little_21 like_22 cabbages_23 ._24 "_25
(a / and~e.7 :op1 (l / look-01~e.3 :arg0 (p / prince~e.2 :mod (l2 / little~e.1)) :arg1 (t / they~e.4)) :op2 (l3 / laugh-01~e.8 :arg0 p :time (s / say-01~e.11 :arg0 p :arg1 (l4 / look-02~e.19 :arg0 (b / baobab~e.15 :poss~e.14 (y / you)) :arg1 (c / cabbage~e.23) :degree~e.22 (l5 / little~e.21)))))

# "_0 oh_1 !_2 "_3
(o / oh~e.1 :mode~e.2 expressive~e.2)

# i_0 had_1 been_2 so_3 proud_4 of_5 my_6 baobabs_7 !_8
(p / pride-01~e.4 :arg0 (i / i~e.0) :arg1 (b / baobab~e.7 :poss~e.6 i) :degree (s / so~e.3))

# "_0 your_1 fox_2 -_3 -_4 his_5 ears_6 look_7 a_8 little_9 like_10 horns_11 ;_12 and_13 they_14 are_15 too_16 long_17 ._18 "_19
(a2 / and~e.13 :op1 (l4 / look-02~e.7 :arg0 (e / ear~e.6 :part-of~e.5 (f / fox~e.2 :poss~e.1 (y / you))) :arg1 (h / horn~e.11) :degree~e.10 (l / little~e.9)) :op2 (l2 / long-03~e.17 :arg1 e :degree (t2 / too~e.16)))

# and_0 he_1 laughed_2 again_3 ._4
(a / and~e.0 :op2 (l / laugh-01~e.2 :arg0 (h / he~e.1) :mod (a2 / again~e.3)))

# "_0 you_1 are_2 not_3 fair_4 ,_5 little_6 prince_7 ,_8 "_9
(f / fair-01~e.4 :polarity~e.3 -~e.3 :arg0 (p / prince~e.7 :mod (l / little~e.6)))

# i_0 said_1 ._2
(s / say-01~e.1 :arg0 (i / i~e.0))

# "_0 i_1 do_2 n't_3 know_4 how_5 to_6 draw_7 anything_8 except_9 boa_10 constrictors_11 from_12 the_13 outside_14 and_15 boa_16 constrictors_17 from_18 the_19 inside_20 ._21 "_22
(k / know-01~e.4 :arg0 (i / i~e.1) :arg1 (d / draw-01~e.7 :arg0 i :arg1 (a2 / and~e.15 :op1 (o / outside~e.14 :part-of~e.12 (b / boa~e.16 :mod (c / constrictor~e.17))) :op2 (i2 / inside~e.20 :part-of~e.18 b))))

# "_0 oh_1 ,_2 that_3 will_4 be_5 all_6 right_7 ,_8 "_9 he_10 said_11 ,_12 "_13 children_14 understand_15 ._16 "_17
(s / say-01~e.11 :arg0 (h / he~e.10) :arg1 (a / all-right~e.7 :domain~e.6 (t / that~e.3) :arg1-of (c / cause-01 :arg0 (u / understand-01~e.15 :arg0 (c2 / child~e.14)))))

# so_0 then_1 i_2 made_3 a_4 pencil_5 sketch_6 of_7 a_8 muzzle_9 ._10
(s2 / sketch-01~e.6 :arg0 (i / i~e.2) :arg1 (m / muzzle~e.9) :instrument~e.3 (p / pencil~e.5) :time (t / then~e.1))

# and_0 as_1 i_2 gave_3 it_4 to_5 him_6 my_7 heart_8 was_9 torn_10 ._11
(a / and~e.0 :op2 (t / tear-01~e.10 :arg1 (h / heart~e.8 :part-of~e.7 (i / i~e.2)) :time~e.1 (g / give-01~e.3 :arg0 i :arg1 (i2 / it~e.4) :arg2 (h2 / he~e.6))))

# "_0 you_1 have_2 plans_3 that_4 i_5 do_6 not_7 know_8 about_9 ,_10 "_11
(p2 / plan-01~e.3 :arg0 (y / you~e.1) :arg1 (t / thing~e.8 :arg1-of~e.4 (k / know-01~e.8 :arg0 (i / i~e.5) :polarity~e.7 -~e.6)))

# i_0 said_1 ._2
(s / say-01~e.1 :arg0 (i / i~e.0))

# but_0 he_1 did_2 not_3 answer_4 me_5 ._6
(h2 / have-concession-91~e.0 :arg1 (a / answer-01~e.4 :arg0 (h / he~e.1) :arg1 (i / i~e.5) :polarity~e.3 -~e.2))

# he_0 said_1 to_2 me_3 ,_4 instead_5 :_6 "_7 you_8 know_9 -_10 -_11 my_12 descent_13 to_14 the_15 earth_16 ..._17
(s / say-01~e.1 :arg0 (h / he~e.0) :arg1 (d / descend-01~e.13 :arg0 h :arg1 (e / earth~e.16)) :arg2 (i / i~e.3) :arg1-of (i2 / instead-of-91~e.5))

# tomorrow_0 will_1 be_2 its_3 anniversary_4 ._5 "_6
(a / anniversary~e.4 :time (t / tomorrow~e.0) :poss~e.3 (i / it~e.3))

# then_0 ,_1 after_2 a_3 silence_4 ,_5 he_6 went_7 on_8 :_9 "_10 i_11 came_12 down_13 very_14 near_15 here_16 ._17 "_18
(g / go-23~e.7 :arg0 (h / he~e.6) :arg1 (c / come-01~e.12 :arg1 h :arg4~e.8 (n / near-02~e.15 :arg1 h :arg2 (h2 / here~e.16) :degree (v / very~e.14)) :direction~e.12 (d / down~e.13)) :time (t / then~e.0) :time (a / after~e.2 :op1 (s / silent~e.4)))

# and_0 he_1 flushed_2 ._3
(a / and~e.0 :op2 (f / flush-03~e.2 :arg1 (h / he~e.1)))

# and_0 once_1 again_2 ,_3 without_4 understanding_5 why_6 ,_7 i_8 had_9 a_10 queer_11 sense_12 of_13 sorrow_14 ._15
(a2 / and~e.0 :op2 (s / sense-01~e.12 :arg0 (i / i~e.8) :arg1 (s2 / sorrow-01~e.14 :arg0 i) :mod (q / queer~e.11) :mod (a / again~e.2 :frequency~e.1 1~e.10) :arg1-of (c2 / cause-01~e.6 :arg0 (a3 / amr-unknown~e.4 :arg1-of (u2 / understand-01~e.5 :polarity - :arg0 i)))))

# one_0 question_1 ,_2 however_3 ,_4 occurred_5 to_6 me_7 :_8 "_9 then_10 it_11 was_12 not_13 by_14 chance_15 that_16 on_17 the_18 morning_19 when_20 i_21 first_22 met_23 you_24 -_25 -_26 a_27 week_28 ago_29 -_30 -_31 you_32 were_33 strolling_34 along_35 like_36 that_37 ,_38 all_39 alone_40 ,_41 a_42 thousand_43 miles_44 from_45 any_46 inhabited_47 region_48 ?_49
(c / contrast-01~e.3 :arg2 (q / question-01~e.1 :arg0 (i / i~e.7) :arg1 (s / stroll-01~e.34 :mode interrogative~e.49 :arg0 y :manner (a3 / alone~e.40 :degree (a4 / all~e.39) :arg1-of (r / resemble-01~e.36 :arg2 (t2 / that~e.37))) :direction (a6 / along~e.40) :location (r3 / relative-position~e.45 :op1 (r2 / region~e.48 :arg1-of (i3 / inhabit-01~e.47) :mod (a5 / any~e.46)) :quant (d2 / distance-quantity :quant 1000~e.43 :unit (m3 / mile~e.44))) :time~e.20 (m / meet-03~e.23 :arg0 i :arg1 (y / you~e.24) :ord~e.22 (o2 / ordinal-entity~e.22 :value 1~e.27) :time (b / before~e.29 :op1 (n / now~e.14) :quant (t / temporal-quantity :quant 1~e.42 :unit (w / week~e.28))) :time (d / date-entity :dayperiod~e.17 (m2 / morning~e.19))) :arg1-of (c2 / cause-01~e.16 :polarity~e.13 -~e.13 :arg0 (c3 / chance-02~e.15)))))

# you_0 were_1 on_2 the_3 your_4 back_5 to_6 the_7 place_8 where_9 you_10 landed_11 ?_12 "_13
(g / go-02~e.4 :mode interrogative~e.12 :arg1 (y2 / you~e.0) :arg4~e.6 (p2 / place~e.8 :location-of~e.9 (l / land-01~e.11 :arg0 (y / you~e.10))) :direction~e.2 (b / back~e.5))

# the_0 little_1 prince_2 flushed_3 again_4 ._5
(f / flush-03~e.3 :arg1 (p / prince~e.2 :mod (l / little~e.1)) :mod (a / again~e.4))

# and_0 i_1 added_2 ,_3 with_4 some_5 hesitancy_6 :_7 "_8 perhaps_9 it_10 was_11 because_12 of_13 the_14 anniversary_15 ?_16 "_17
(a4 / and~e.0 :op2 (a / add-01~e.2 :arg0 (i / i~e.1) :arg1 (p2 / possible-01~e.9 :arg1 (c / cause-01~e.12 :arg0 (a3 / anniversary~e.15) :arg1 (i2 / it~e.10)) :mode interrogative~e.16) :manner~e.4 (h / hesitate-01~e.6 :arg0 i :degree (s / some~e.5))))

# the_0 little_1 prince_2 flushed_3 once_4 more_5 ._6
(f / flush-03~e.3 :arg1 (p / prince~e.2 :mod (l / little~e.1)) :mod (a / again~e.5 :frequency~e.4 1))

# he_0 never_1 answered_2 questions_3 -_4 -_5 but_6 when_7 one_8 flushes_9 does_10 that_11 not_12 mean_13 "_14 yes_15 "_16 ?_17
(c / contrast-01~e.6 :arg1 (a / answer-01~e.2 :polarity~e.1 -~e.1 :arg0 (h / he~e.0) :arg1 (q / question-01~e.3 :arg2 h) :time~e.7 (e / ever~e.1)) :arg2 (f / flush-03~e.9 :mode interrogative~e.17 :arg1 (o / one~e.8) :arg1-of (m / mean-01~e.13 :arg2 (y / yes~e.15))))

# "_0 ah_1 ,_2 "_3
(a / ah~e.1 :mode expressive~e.1)

# i_0 said_1 to_2 him_3 ,_4 "_5 i_6 am_7 a_8 little_9 frightened_10 -_11 -_12 "_13
(s / say-01~e.1 :arg0 (i / i~e.0) :arg1 (f / frighten-01~e.10 :arg1 i :degree (l / little~e.9)) :arg2 (h / he~e.3))

# but_0 he_1 interrupted_2 me_3 ._4
(c / contrast-01~e.0 :arg2 (i / interrupt-01~e.2 :arg0 (h / he~e.1) :arg1 (i2 / i~e.3)))

# "_0 now_1 you_2 must_3 work_4 ._5
(o / obligate-01~e.3 :arg1 (y / you~e.2) :arg2 (w / work-01~e.4 :arg0 y) :time (n / now~e.1))

# you_0 must_1 return_2 to_3 your_4 engine_5 ._6
(o2 / obligate-01~e.1 :arg1 (y / you~e.0) :arg2 (r / return-01~e.2 :arg1 y :arg4~e.3 (e / engine~e.5 :poss~e.4 y)))

# i_0 will_1 be_2 waiting_3 for_4 you_5 here_6 ._7
(w / wait-01~e.3 :arg1 (i / i~e.0) :arg2 (y / you~e.5) :location~e.6 (h / here~e.6))

# come_0 back_1 tomorrow_2 evening_3 ..._4 "_5
(c / come-01~e.0 :mode imperative :arg1 (y / you) :direction (b / back~e.1) :time~e.3 (d / date-entity :dayperiod~e.3 (e2 / evening~e.3) :mod (t / tomorrow~e.2)))

# but_0 i_1 was_2 not_3 reassured_4 ._5
(h / have-concession-91~e.0 :arg1 (r / reassure-01~e.4 :arg1 (i / i~e.1) :polarity~e.3 -~e.3))

# i_0 remembered_1 the_2 fox_3 ._4
(r / remember-01~e.1 :arg0 (i / i~e.0) :arg1 (f / fox~e.3))

# one_0 runs_1 the_2 risk_3 of_4 weeping_5 a_6 little_7 ,_8 if_9 one_10 lets_11 himself_12 be_13 tamed_14 ..._15
(r2 / risk-01~e.3 :arg0 (o / one~e.0) :arg2 (w / weep-01~e.5 :arg0 o :degree (l / little~e.7)) :condition~e.9 (l2 / let-01~e.12 :arg0 o :arg1 (t / tame-01~e.14 :arg1 o)))

# chapter_0 26_1 ._2
(c / chapter~e.0 :mod 26~e.1)

# beside_0 the_1 well_2 there_3 was_4 the_5 ruin_6 of_7 an_8 old_9 stone_10 wall_11 ._12
(w / wall~e.11 :mod (o / old~e.9) :consist-of~e.7 (s / stone~e.10) :arg1-of (r / ruin-01~e.6) :location~e.3 (b / beside~e.0 :op1 (w2 / well~e.2)))

# when_0 i_1 came_2 back_3 from_4 my_5 work_6 ,_7 the_8 next_9 evening_10 ,_11 i_12 saw_13 from_14 some_15 distance_16 away_17 my_18 little_19 price_20 sitting_21 on_22 top_23 of_24 a_25 wall_26 ,_27 with_28 his_29 feet_30 dangling_31 ._32
(s / see-01~e.13 :arg0 (i / i~e.1 :location (r2 / relative-position~e.14 :quant (d2 / distant-02~e.16))) :arg1 (s2 / sit-01~e.17 :arg1 (p2 / prince~e.20 :mod (l / little~e.19) :poss~e.18 i :arg0-of~e.28 (d / dangle-01~e.31 :arg1 (f / foot~e.30 :part-of~e.29 p2))) :arg2 (w / wall~e.26 :location (p / position~e.21 :op1 (o / on~e.22 :direction~e.2 (t / top~e.23))))) :time (r / return-01~e.3 :arg1 i :arg3~e.4 (w2 / work-01~e.6 :arg0 i) :time (d3 / date-entity :dayperiod~e.10 (e / evening~e.10) :mod (n / next~e.9))))

# and_0 i_1 heard_2 him_3 say_4 :_5 "_6 then_7 you_8 do_9 n't_10 remember_11 ._12
(a / and~e.0 :op2 (h / hear-01~e.2 :arg0 (i / i~e.1) :arg1 (s / say-01~e.4 :arg0 (h2 / he~e.3) :arg1 (r / remember-01~e.11 :polarity~e.10 -~e.9 :arg0 (y / you~e.8) :mod (t / then~e.7)))))

# this_0 is_1 not_2 the_3 exact_4 spot_5 ._6 "_7
(s2 / spot~e.5 :domain (t / this~e.0) :mod (e2 / exact~e.4 :polarity~e.2 -~e.2))

# another_0 voice_1 must_2 have_3 answered_4 him_5 ,_6 for_7 he_8 replied_9 to_10 it_11 :_12 "_13 yes_14 ,_15 yes_16 !_17
(o / obligate-01~e.2 :arg0 (v / voice~e.1 :mod (a / another~e.0)) :arg1 h2 :arg2 (a2 / answer-01~e.4) :arg0-of (c / cause-01~e.7 :arg1 (r / reply-01~e.9 :arg0 (h2 / he~e.8) :arg2 (y / yes~e.14))))

# it_0 is_1 the_2 right_3 day_4 ,_5 but_6 this_7 is_8 not_9 the_10 place_11 ._12 "_13
(c / contrast-01~e.6 :arg1 (d / day~e.4 :arg2-of (r / right-06~e.3)) :arg2 (p / place~e.11 :polarity~e.9 -~e.9 :domain~e.0 (t / this~e.7)))

# i_0 continued_1 my_2 walk_3 toward_4 the_5 wall_6 ._7
(c / continue-01~e.1 :arg0 (i / i~e.0) :arg1 (w / walk-01~e.3 :arg0 i :direction (t / toward~e.4 :op1 (w2 / wall~e.6))))

# at_0 no_1 time_2 did_3 i_4 see_5 or_6 hear_7 anyone_8 ._9
(o / or~e.6 :op1 (s / see-01~e.5 :polarity -~e.3 :arg0 (i / i~e.4) :arg1 (a / anyone~e.8)) :op2 (h / hear-01~e.7 :polarity~e.1 -~e.1 :arg0 i :arg1 a) :time~e.0 (e / ever~e.2))

# the_0 little_1 prince_2 ,_3 however_4 ,_5 replied_6 once_7 again_8 :_9 "_10 --_11 exactly_12 ._13
(c / contrast-01~e.4 :arg2 (r / reply-01~e.6 :arg0 (p / prince~e.2 :mod (l / little~e.1)) :arg2 (e / exact~e.12) :mod (a / again~e.8) :time (o / once~e.7)))

# you_0 will_1 see_2 where_3 my_4 track_5 begins_6 ,_7 in_8 the_9 sand_10 ._11
(s / see-01~e.2 :arg0 (y2 / you~e.0) :arg1 (b2 / begin-01~e.6 :arg1 (t2 / track~e.5 :poss~e.4 (i / i~e.4)) :location~e.8 (s3 / sand~e.10)))

# you_0 have_1 nothing_2 to_3 do_4 but_5 wait_6 for_7 me_8 there_9 ._10
(h2 / have-03~e.1 :arg0 (y / you~e.0) :arg1 (n / nothing~e.2 :arg1-of (d / do-02~e.4 :arg0 y) :arg1-of (c / contrast-01~e.5 :arg2 (w2 / wait-01~e.6 :arg1 y :arg2 (i / i~e.8) :location~e.9 (t2 / there~e.9)))))

# i_0 shall_1 be_2 there_3 tonight_4 ._5 "_6
(t / there~e.3 :location-of~e.1 (i / i~e.0) :time (d / date-entity :dayperiod~e.4 (n / night~e.4) :mod (t2 / today~e.4)))

# i_0 was_1 only_2 twenty_3 metres_4 from_5 the_6 wall_7 ,_8 and_9 i_10 still_11 saw_12 nothing_13 ._14
(a / and~e.9 :op1 (b / be-located-at-91 :arg1 (i / i~e.0) :arg2 (r / relative-position~e.5 :op1 (w / wall~e.7) :quant (d / distance-quantity :quant 20~e.3 :unit (m / meter~e.4) :mod (o / only~e.2)))) :op2 (s / see-01~e.12 :arg0 i :arg1 (n / nothing~e.13) :mod (s2 / still~e.11)))

# after_0 a_1 silence_2 the_3 little_4 prince_5 spoke_6 again_7 :_8 "_9 you_10 have_11 good_12 poison_13 ?_14
(s / speak-01~e.6 :arg0 (p / prince~e.5 :mod (l / little~e.4)) :arg1 (h / have-03~e.11 :mode interrogative~e.14 :arg0 (y / you~e.10) :arg1 (p2 / poison-01~e.13 :arg1-of (g / good-02~e.12))) :mod (a / again~e.7) :time (a2 / after~e.0 :op1 (s2 / silent~e.2)))

# you_0 are_1 sure_2 that_3 it_4 will_5 not_6 make_7 me_8 suffer_9 too_10 long_11 ?_12 "_13
(s2 / sure-02~e.2 :mode~e.3 interrogative~e.12 :arg0 (y / you~e.0) :arg1 (s / suffer-01~e.9 :polarity~e.6 -~e.6 :arg0 (i / i~e.8) :arg1 (i2 / it~e.4) :arg1-of (l / long-03~e.11 :degree (t / too~e.10))))

# i_0 stopped_1 in_2 my_3 tracks_4 ,_5 my_6 heart_7 torn_8 asunder_9 ;_10 but_11 still_12 i_13 did_14 not_15 understand_16 ._17
(c / contrast-01~e.11 :arg1 (a / and~e.4 :op1 (s / stop-01~e.1 :arg1 (i / i~e.0)) :op2 (t / tear-01~e.8 :arg1 (h / heart~e.7 :part-of~e.6 i) :mod (a2 / asunder~e.9))) :arg2 (u / understand-01~e.16 :polarity~e.15 -~e.14 :arg0 i :mod (s2 / still~e.12)))

# "_0 now_1 go_2 away_3 ,_4 "_5 said_6 the_7 little_8 prince_9 ._10
(s / say-01~e.6 :arg0 (p / prince~e.9 :mod (l / little~e.8)) :arg1 (g / go-02~e.2 :mode imperative :arg0 (y / you~e.2) :arg1 (a / away~e.3) :time (n / now~e.1)))

# "_0 i_1 want_2 to_3 get_4 down_5 from_6 the_7 wall_8 ._9 "_10
(w / want-01~e.2 :arg0 (i / i~e.1) :arg1 (g / get-05~e.4 :arg0 i :arg2 (r / relative-position~e.6 :op1 (w2 / wall~e.8) :direction (d / down~e.5))))

# i_0 dropped_1 my_2 eyes_3 ,_4 then_5 ,_6 to_7 the_8 foot_9 of_10 the_11 wall_12 -_13 -_14 and_15 i_16 leaped_17 into_18 the_19 air_20 ._21
(a / and~e.15 :op1 (d / drop-01~e.1 :arg0 (i / i~e.0) :arg1 (e / eye~e.3 :part-of~e.2 i) :arg4~e.7 (f / foot~e.9 :part-of~e.10 (w / wall~e.12)) :time (t / then~e.5)) :op2 (l / leap-03~e.17 :arg0 i :destination~e.18 (a2 / air~e.20)))

# there_0 before_1 me_2 ,_3 facing_4 the_5 little_6 prince_7 ,_8 was_9 one_10 of_11 those_12 yellow_13 snakes_14 that_15 take_16 just_17 thirty_18 seconds_19 to_20 bring_21 your_22 life_23 to_24 an_25 end_26 ._27
(s3 / snake~e.14 :arg1-of~e.15 (y / yellow-02~e.13) :arg2-of~e.12 (t / take-10~e.16 :arg0 (e / end-01~e.26 :arg1 (l2 / life~e.23 :poss~e.22 (y2 / you))) :arg1 (t2 / temporal-quantity :quant 30~e.18 :unit (s2 / second~e.19) :mod (j / just~e.17))) :location~e.0 (b / before~e.1 :op1 (i / i~e.2)) :arg0-of (f / face-01~e.4 :arg1 (p / prince~e.7 :mod (l / little~e.6))))

# even_0 as_1 i_2 was_3 digging_4 into_5 my_6 pocked_7 to_8 get_9 out_10 my_11 revolver_12 i_13 made_14 a_15 running_16 step_17 back_18 ._19
(c / contrast-01~e.0 :arg1 (s / step-01~e.17 :arg1 i :arg2 (b / back~e.18) :manner (r / run-02~e.16)) :arg2 (d / dig-01~e.4 :arg0 (i / i~e.2) :arg2 (p / pocket~e.7 :poss~e.6 i) :arg3 r2 :purpose~e.8 (g / get-01~e.9 :arg0 i :arg1 (r2 / revolver~e.12 :poss~e.11 i))))

# but_0 ,_1 at_2 the_3 noise_4 i_5 made_6 ,_7 the_8 snake_9 let_10 himself_11 flow_12 easily_13 across_14 the_15 sand_16 like_17 the_18 dying_19 spray_20 of_21 a_22 fountain_23 ,_24 and_25 ,_26 in_27 no_28 apparent_29 hurry_30 ,_31 disappeared_32 ,_33 with_34 a_35 light_36 metallic_37 sound_38 ,_39 among_40 the_41 stones_42 ._43
(c / contrast-01~e.0 :arg2 (a / and~e.25 :op1 (l2 / let-01~e.10 :arg0 (s3 / snake~e.9) :arg1 (f / flow-01~e.12 :arg1 s3 :arg1-of (e / easy-05~e.13) :arg1-of (r / resemble-01~e.17 :arg2 (s5 / spray~e.20 :arg1-of (d2 / die-down-02~e.19) :poss (f2 / fountain~e.23))) :path (a3 / across~e.14 :op1 (s4 / sand~e.16))) :arg1-of (c2 / cause-01~e.21 :arg0 (n / noise~e.4 :arg1-of (m2 / make-01~e.6 :arg0 (i / i~e.5))))) :op2 (d / disappear-01~e.32 :arg1 s3 :arg1-of (h / hurry-01~e.30 :polarity~e.28 -~e.28 :mod (a2 / apparent~e.29)) :location~e.27 (a4 / among~e.40 :op1 (s2 / stone~e.42)) :arg0-of (s / sound-02~e.38 :arg3~e.34 (m / metallic~e.37) :arg1-of (l / light-06~e.36)))))

# i_0 reached_1 the_2 wall_3 just_4 in_5 time_6 to_7 catch_8 my_9 little_10 man_11 in_12 my_13 arms_14 ;_15 his_16 face_17 was_18 white_19 as_20 snow_21 ._22
(m / multi-sentence~e.3 :snt1~e.6 (r / reach-01~e.1 :arg0 (i / i~e.0) :arg1 (w2 / wall~e.3) :time~e.5 (c / catch-01~e.8 :arg0 i :arg1 (m2 / man~e.11 :mod (l / little~e.10) :poss~e.9 i) :mod (j / just~e.4) :location~e.5 (a / arm~e.14 :part-of~e.13 i))) :snt2~e.16 (f / face~e.17 :arg1-of (w / white-03~e.19 :degree (e / equal~e.20) :compared-to~e.20 (s / snow~e.21)) :part-of~e.13 m2))

# "_0 what_1 does_2 this_3 mean_4 ?_5 "_6
(m / mean-01~e.4 :arg1 (t / this~e.3) :arg2 (a / amr-unknown~e.5))

# i_0 demanded_1 ._2
(d / demand-01~e.1 :arg0 (i / i~e.0))

# "_0 why_1 are_2 you_3 talking_4 with_5 snakes_6 ?_7 "_8
(t / talk-01~e.4 :arg0 (y / you~e.3) :arg2 (s / snake~e.6) :purpose~e.1 (a / amr-unknown~e.7))

# i_0 had_1 loosened_2 the_3 golden_4 muffler_5 that_6 he_7 always_8 wore_9 ._10
(l / loosen-01~e.2 :arg0 (i / i~e.0) :arg1 (m / muffler~e.5 :consist-of (g / gold~e.4) :arg1-of~e.1 (w / wear-01~e.9 :arg0 (h / he~e.7) :time (a / always~e.8))))

# i_0 had_1 moistened_2 his_3 temples_4 ,_5 and_6 had_7 given_8 him_9 some_10 water_11 to_12 drink_13 ._14
(a / and~e.6 :op1 (m / moisten-01~e.2 :arg0 (i / i~e.0) :arg1 (t / temple~e.4 :poss~e.3 (h / he~e.9))) :op2 (g / give-01~e.8 :arg0 i :arg1 (w / water~e.11 :quant (s / some~e.10) :purpose~e.12 (d / drink-01~e.13)) :arg2 h))

# and_0 now_1 i_2 did_3 not_4 dare_5 ask_6 him_7 any_8 more_9 questions_10 ._11
(a / and~e.0 :op2 (d / dare-01~e.5 :polarity~e.4 -~e.3 :arg1 (i / i~e.2) :arg2 (q2 / question-01~e.10 :arg0 i :arg2 (h / he~e.7) :mod (m / more~e.9 :mod (a3 / any~e.8)))) :time (n / now~e.1))

# he_0 looked_1 at_2 me_3 very_4 gravely_5 ,_6 and_7 put_8 his_9 arms_10 around_11 my_12 neck_13 ._14
(a / and~e.7 :op1 (l / look-01~e.1 :arg0 (h / he~e.0) :arg1 (i / i~e.3) :manner (g / grave~e.5 :degree (v / very~e.4))) :op2 (p / put-01~e.8 :arg0 h :arg1 (a2 / arm~e.10 :part-of~e.9 h) :arg2 (a3 / around~e.11 :op1 (n / neck~e.13 :part-of~e.12 i))))

# i_0 felt_1 his_2 heart_3 beating_4 like_5 the_6 heart_7 of_8 a_9 dying_10 bird_11 ,_12 shot_13 with_14 someone_15 's_16 rifle_17 ..._18
(f / feel-01~e.1 :arg0 (i / i~e.0) :arg1 (h4 / heart~e.3 :part-of~e.2 (h2 / he~e.2) :arg1-of (b / beat-01~e.4 :arg1-of (r / resemble-01~e.5 :arg2 (h3 / heart~e.7 :part-of~e.2 (b2 / bird~e.11 :arg1-of (d / die-01~e.10) :arg1-of (s / shoot-02~e.13 :arg2 (r2 / rifle~e.17 :poss~e.16 (s2 / someone~e.15)))))))))

# "_0 i_1 am_2 glad_3 that_4 you_5 have_6 found_7 what_8 was_9 the_10 matter_11 with_12 your_13 engine_14 ,_15 "_16 he_17 said_18 ._19
(s / say-01~e.18 :arg0 (h / he~e.17) :arg1 (g / glad-02~e.3 :arg0 (f / find-01~e.7 :arg0 (y / you~e.5) :arg1 (a / amr-unknown~e.8 :arg0-of (c / cause-01 :arg1 (h2 / have-03~e.6 :arg1 (p / problem~e.11 :topic~e.12 (e / engine~e.14 :poss~e.13 y)))))) :arg1 (i / i~e.1)))

# "_0 now_1 you_2 can_3 go_4 back_5 home_6 -_7 -_8 "_9
(p / possible-01~e.3 :arg1 (g / go-02~e.4 :arg0 (y / you~e.2) :arg4~e.5 (h / home~e.6) :direction (b / back~e.5)) :time (n / now~e.1))

# "_0 how_1 do_2 you_3 know_4 about_5 that_6 ?_7 "_8
(k / know-01~e.4 :arg0 (y / you~e.3) :arg1 (t / that~e.6) :manner~e.1 (a / amr-unknown~e.7))

# i_0 was_1 just_2 coming_3 to_4 tell_5 him_6 that_7 my_8 work_9 had_10 been_11 successful_12 ,_13 beyond_14 anything_15 that_16 i_17 had_18 dared_19 to_20 hope_21 ._22
(c / come-01~e.3 :arg1 (i / i~e.0) :purpose~e.4 (t / tell-01~e.5 :arg0 i :arg1 (s2 / succeed-01~e.12 :arg1 (w / work-01~e.9 :arg0 i) :degree (b / beyond~e.14 :op1 (a / anything~e.15 :arg1-of~e.10 (h2 / hope-01~e.21 :arg0 i :arg2-of~e.20 (d / dare-01~e.19 :arg1 i))))) :arg2 (h / he~e.6)) :mod (j / just~e.2))

# he_0 made_1 no_2 answer_3 to_4 my_5 question_6 ,_7 but_8 he_9 added_10 :_11 "_12 i_13 ,_14 too_15 ,_16 am_17 going_18 back_19 home_20 today_21 ..._22 "_23
(c / contrast-01~e.8 :arg1 (m / make-01~e.1 :arg0 h :arg1 (a / answer-01~e.3 :polarity~e.2 -~e.2 :arg0 (h / he~e.0) :arg1 (q / question-01~e.6 :arg0 (i / i~e.13)))) :arg2 (a2 / add-01~e.10 :arg0 h :arg1 (r / return-01~e.18 :arg1 h :arg4~e.19 (h2 / home~e.20) :time (t / today~e.21) :mod (t2 / too~e.15))))

# then_0 ,_1 sadly_2 -_3 -_4 "_5 it_6 is_7 much_8 farther_9 ..._10 it_11 is_12 much_13 more_14 difficult_15 ..._16 "_17
(s2 / say-01~e.2 :arg1 (a / and :op1 (f / far~e.9 :mod (m3 / much~e.8 :quant (m4 / more~e.9)) :domain~e.11 (i / it~e.11)) :op2 (d / difficult~e.15 :degree (m / more~e.14 :quant (m2 / much~e.13)) :domain~e.11 i)) :time (t / then~e.0) :manner (s / sad-02~e.15))

# i_0 realised_1 clearly_2 that_3 something_4 extraordinary_5 was_6 happening_7 ._8
(r / realize-01~e.1 :arg0 (i / i~e.0) :arg1 (e2 / event~e.7 :mod (e / extraordinary~e.5)) :arg1-of~e.3 (c / clear-06~e.2))

# i_0 was_1 holding_2 him_3 close_4 in_5 my_6 arms_7 as_8 if_9 he_10 were_11 a_12 little_13 child_14 ;_15 and_16 yet_17 it_18 seemed_19 to_20 me_21 that_22 he_23 was_24 rushing_25 headlong_26 toward_27 an_28 abyss_29 from_30 which_31 i_32 could_33 do_34 nothing_35 to_36 restrain_37 him_38 ..._39
(a / and~e.16 :op1 (h / hold-01~e.2 :arg0 (i / i~e.0) :arg1 (h2 / he~e.3) :arg1-of (c / close-10~e.4) :location~e.5 (a2 / arm~e.7 :part-of~e.6 i) :arg1-of (r / resemble-01~e.8 :arg2 (c2 / child~e.14 :mod (l / little~e.13) :domain~e.18 h2))) :op2 (s / seem-01~e.19 :arg1 (r2 / rush-01~e.25 :arg1 h2 :arg2 (t / toward~e.27 :op1 (a3 / abyss~e.29 :arg2-of~e.30 (r3 / restrain-01~e.37 :polarity~e.35 -~e.34 :arg0 i :arg1 h2)) :mod (h3 / headlong~e.26))) :arg2 i :mod (y / yet~e.17)))

# his_0 look_1 was_2 very_3 serious_4 ,_5 like_6 some_7 one_8 lost_9 far_10 away_11 ._12
(l / look-01~e.1 :arg0 (h / he~e.0) :arg2-of~e.0 (s / serious-01~e.4 :degree (v / very~e.3)) :arg1-of (r / resemble-01~e.6 :arg2 (s2 / someone~e.7 :arg1-of (l2 / lose-02~e.9 :direction (a / away~e.11 :mod (f / far~e.10))))))

# "_0 i_1 have_2 your_3 sheep_4 ._5
(h / have-03~e.2 :arg0 (i / i~e.1) :arg1 (s / sheep~e.4 :poss~e.3 (y / you~e.3)))

# and_0 i_1 have_2 the_3 sheep_4 's_5 box_6 ._7
(a / and~e.0 :op2 (h / have-03~e.2 :arg0 (i / i~e.1) :arg1 (b / box~e.6 :poss~e.5 (s / sheep~e.4))))

# and_0 i_1 have_2 the_3 muzzle_4 ..._5 "_6
(a / and~e.0 :op2 (h / have-03~e.2 :arg0 (i / i~e.1) :arg1 (m / muzzle~e.4)))

# and_0 he_1 gave_2 me_3 a_4 sad_5 smile_6 ._7
(a / and~e.0 :op2 (g / give-01~e.2 :arg0 (h / he~e.1) :arg1 (s / smile~e.6 :arg1-of (s2 / sad-02~e.5)) :arg2 (i / i~e.3)))

# i_0 waited_1 a_2 long_3 time_4 ._5
(w / wait-01~e.1 :arg1 (i / i~e.0) :arg1-of~e.4 (l / long-03~e.3))

# i_0 could_1 see_2 that_3 he_4 was_5 reviving_6 little_7 by_8 little_9 ._10
(p / possible-01~e.1 :arg1 (s / see-01~e.2 :arg0 (i / i~e.0) :arg1 (r / revive-01~e.6 :arg1 (h / he~e.4) :manner~e.8 (l / little-by-little~e.9))))

# "_0 dear_1 little_2 man_3 ,_4 "_5
(m2 / man~e.3 :mod (l2 / little~e.2) :mod (d / dear~e.1))

# i_0 said_1 to_2 him_3 ,_4 "_5 you_6 are_7 afraid_8 ..._9 "_10
(s / say-01~e.1 :arg0 (i / i~e.0) :arg1 (f / fear-01~e.8 :arg0 h) :arg2 (h / he~e.3))

# he_0 was_1 afraid_2 ,_3 there_4 was_5 no_6 doubt_7 about_8 that_9 ._10
(f / fear-01~e.2 :arg0 (h / he~e.0) :mod (c / certain~e.7))

# but_0 he_1 laughed_2 lightly_3 ._4
(c / contrast-01~e.0 :arg2 (l / laugh-01~e.2 :arg0 (h / he~e.1) :manner (l2 / light-06~e.3)))

# "_0 i_1 shall_2 be_3 much_4 more_5 afraid_6 this_7 evening_8 ..._9 "_10
(f / fear-01~e.6 :arg0 (i / i~e.1) :degree (m / more~e.5 :mod (m2 / much~e.4)) :time (d / date-entity :dayperiod~e.7 (e / evening~e.8) :mod (t / today~e.2)))

# once_0 again_1 i_2 felt_3 myself_4 frozen_5 by_6 the_7 sense_8 of_9 something_10 irreparable_11 ._12
(f / feel-01~e.3 :arg0 (i / i~e.2) :arg1 (f2 / freeze-01~e.5 :arg0 (s / sense-01~e.8 :arg0 i :arg1 (s2 / something~e.10 :arg1-of (r / repair-01~e.6 :arg1-of (p / possible-01~e.4 :polarity -)))) :arg1 i) :mod (a / again~e.1 :frequency~e.0 1~e.11))

# and_0 i_1 knew_2 that_3 i_4 could_5 not_6 bear_7 the_8 thought_9 of_10 never_11 hearing_12 that_13 laughter_14 any_15 more_16 ._17
(a / and~e.0 :op2 (k / know-01~e.2 :arg0 (i / i~e.1) :arg1 (p / possible-01~e.5 :polarity~e.6 -~e.6 :arg1 (b / bear-01~e.7 :arg1 (t / think-01~e.9 :arg1 (h / hear-01~e.12 :polarity~e.11 -~e.11 :arg1 (l / laugh-01~e.14) :time (e / ever~e.11) :mod (m / more~e.16 :mod (a2 / any~e.15))))))))

# for_0 me_1 ,_2 it_3 was_4 like_5 a_6 spring_7 of_8 fresh_9 water_10 in_11 the_12 desert_13 ._14
(r / resemble-01~e.5 :arg1 (i / it~e.3) :arg2 (s / spring~e.7 :source-of~e.6 (w / water~e.10 :arg1-of (f / fresh-04~e.9)) :location~e.11 (d / desert~e.13)) :beneficiary~e.0 (i2 / i~e.1))

# "_0 little_1 man_2 ,_3 "_4
(m / man~e.2 :mod (l / little~e.1))

# i_0 said_1 ,_2 "_3 i_4 want_5 to_6 hear_7 you_8 laugh_9 again_10 ._11 "_12
(s / say-01~e.1 :arg0 i :arg1 (w / want-01~e.5 :arg0 (i / i~e.4) :arg1 (h / hear-01~e.7 :arg0 i :arg1 (l / laugh-01~e.9 :arg0 (y / you~e.8) :mod (a / again~e.10)))))

# but_0 he_1 said_2 to_3 me_4 :_5 "_6 tonight_7 ,_8 it_9 will_10 be_11 a_12 year_13 ..._14 my_15 star_16 ,_17 then_18 ,_19 can_20 be_21 found_22 right_23 above_24 the_25 place_26 where_27 i_28 came_29 to_30 the_31 earth_32 ,_33 a_34 year_35 ago_36 ..._37 "_38
(c / contrast-01~e.0 :arg2 (s / say-01~e.2 :arg0 (h / he~e.1) :arg1 (p / possible-01~e.20 :arg1 (f / find-01~e.22 :arg1 (s2 / star~e.16 :poss~e.15 h) :location (a / above~e.24 :op1 (p2 / place~e.26 :location~e.27 (e / earth~e.32) :arg4-of~e.29 (c2 / come-01~e.29 :time (b / before~e.36 :op1 (n / now~e.35) :quant (t3 / temporal-quantity :quant 1~e.34 :unit (y2 / year~e.35))))) :mod (r / right~e.23))) :time (d / date-entity :dayperiod (n2 / night~e.10) :mod (t / today~e.7)) :duration~e.12 (y / year~e.13) :mod (t2 / then~e.18)) :arg2 (i / i~e.28)))

# "_0 little_1 man_2 ,_3 "_4
(m / man~e.2 :mod (l / little~e.1))

# i_0 said_1 ,_2 "_3 tell_4 me_5 that_6 it_7 is_8 only_9 a_10 bad_11 dream_12 -_13 -_14 this_15 affair_16 of_17 the_18 snake_19 ,_20 and_21 the_22 meeting_23 -_24 place_25 ,_26 and_27 the_28 star_29 ..._30 "_31
(s / say-01~e.1 :arg0 (i / i~e.0) :arg1 (t / tell-01~e.4 :mode imperative~e.5 :arg0 (y / you) :arg1 (d / dream-01~e.12 :arg0 i :arg1 (a / and~e.21 :op1 (a2 / affair-02~e.16 :arg1 (s2 / snake~e.19) :arg2 (t2 / this~e.15)) :op2 (m / meet-01~e.23 :location (p / place~e.25)) :op3 (s3 / star~e.29)) :arg1-of (b / bad-07~e.11) :mod (o / only~e.9)) :arg2 i))

# but_0 he_1 did_2 not_3 answer_4 my_5 plea_6 ._7
(c / contrast-01~e.0 :arg2 (a / answer-01~e.4 :arg0 (h / he~e.1) :arg1 (p / plea~e.6 :poss~e.5 (i / i~e.5)) :polarity~e.3 -~e.2))

# he_0 said_1 to_2 me_3 ,_4 instead_5 :_6 "_7 the_8 thing_9 that_10 is_11 important_12 is_13 the_14 thing_15 that_16 is_17 not_18 seen_19 ..._20 "_21
(s3 / say-01~e.1 :arg0 (h / he~e.0) :arg1 (i2 / important~e.12 :domain (t / thing~e.9 :arg1-of~e.10 (s2 / see-01~e.19 :polarity~e.18 -~e.18))) :arg2 (i3 / i~e.3) :arg1-of (i / instead-of-91~e.5))

# "_0 yes_1 ,_2 i_3 know_4 ..._5 "_6
(k / know-01~e.4 :arg0 (i / i~e.3))

# "_0 it_1 is_2 just_3 as_4 it_5 is_6 with_7 the_8 flower_9 ._10
(r / resemble-01~e.4 :arg1 (i / it~e.5) :arg2 (f / flower~e.9) :mod (j / just~e.3))

# if_0 you_1 love_2 a_3 flower_4 that_5 lives_6 on_7 a_8 star_9 ,_10 it_11 is_12 sweet_13 to_14 look_15 at_16 the_17 sky_18 at_19 night_20 ._21
(l / look-01~e.15 :arg1 (s2 / sky~e.18 :time~e.16 (d / date-entity :dayperiod~e.19 (n / night~e.20))) :arg1-of (s / sweet-04~e.13) :condition~e.0 (l2 / love-01~e.2 :arg0 (y / you~e.1) :arg1 (f / flower~e.4 :arg0-of (l3 / live-01~e.6 :location~e.7 (s3 / star~e.9)))))

# all_0 the_1 stars_2 are_3 a_4 -_5 bloom_6 with_7 flowers_8 ..._9 "_10
(b / bloom-01~e.6 :arg0 (f / flower~e.8) :location (s / star~e.2 :mod (a / all~e.0)))

# "_0 yes_1 ,_2 i_3 know_4 ..._5 "_6
(k / know-01~e.4 :arg0 (i / i~e.3))

# "_0 it_1 is_2 just_3 as_4 it_5 is_6 with_7 the_8 water_9 ._10
(r / resemble-01~e.4 :arg1 (i / it~e.1) :arg2 (w / water~e.9) :mod (j / just~e.3))

# because_0 of_1 the_2 pulley_3 ,_4 and_5 the_6 rope_7 ,_8 what_9 you_10 gave_11 me_12 to_13 drink_14 was_15 like_16 music_17 ._18
(c / cause-01~e.0 :arg0 (a / and~e.5 :op1 (p / pulley~e.3) :op2 (r / rope~e.7)) :arg1 (r2 / resemble-01~e.16 :arg1 (t / thing~e.9 :arg1-of~e.11 (g / give-01~e.11 :arg0 (y / you~e.10) :arg2 (i / i~e.12) :purpose~e.13 (d / drink-01~e.14 :arg0 i))) :arg2 (m / music~e.17)))

# you_0 remember_1 -_2 -_3 how_4 good_5 it_6 was_7 ._8 "_9
(r / remember-01~e.1 :arg0 (y / you~e.0) :arg1 (g / good-02~e.5 :arg1 (i / it~e.6) :degree (s / so~e.4)))

# "_0 yes_1 ,_2 i_3 know_4 ..._5 "_6
(k / know-01~e.4 :arg0 (i / i~e.3))

# "_0 and_1 at_2 night_3 you_4 will_5 look_6 up_7 at_8 the_9 stars_10 ._11
(a / and~e.1 :op2 (l / look-01~e.6 :arg0 (y / you~e.4) :arg1 (s / star~e.10) :direction (u / up~e.7) :time~e.8 (d / date-entity :dayperiod~e.2 (n / night~e.3))))

# where_0 i_1 live_2 everything_3 is_4 so_5 small_6 that_7 i_8 can_9 not_10 show_11 you_12 where_13 my_14 star_15 is_16 to_17 be_18 found_19 ._20
(p / possible-01~e.9 :polarity~e.10 -~e.10 :arg1 (s / show-01~e.11 :arg0 (i / i~e.8) :arg1 (l / location~e.13 :location-of~e.13 (f / find-01~e.19 :arg1 (s2 / star~e.15 :poss~e.14 i))) :arg2 (y2 / you~e.12)) :arg1-of (c / cause-01 :arg0 (e / everything~e.3 :mod (s3 / small~e.6 :degree (s4 / so~e.5)) :location~e.0 (l2 / live-01~e.2 :arg0 i))))

# it_0 is_1 better_2 ,_3 like_4 that_5 ._6
(r / resemble-01~e.4 :arg1 (i / it~e.0 :arg1-of (g / good-02~e.2 :degree (m / more~e.2))) :arg2 (t / that~e.5))

# my_0 star_1 will_2 just_3 be_4 one_5 of_6 the_7 stars_8 ,_9 for_10 you_11 ._12
(s / star~e.1 :quant 1~e.5 :beneficiary~e.10 (y / you~e.11) :poss~e.0 (i / i~e.0) :arg1-of (i2 / include-91~e.6 :arg2 (s2 / star~e.8) :mod (j / just~e.3)))

# and_0 so_1 you_2 will_3 love_4 to_5 watch_6 all_7 the_8 stars_9 in_10 the_11 heavens_12 ..._13 they_14 will_15 all_16 be_17 your_18 friends_19 ._20
(a / and~e.0 :op2 (l / love-01~e.4 :arg0 (y / you~e.2) :arg1 (w / watch-01~e.6 :arg0 y :arg1 (s / star~e.9 :location~e.10 (h / heaven~e.12) :mod (a2 / all~e.16) :arg0-of (h2 / have-rel-role-91~e.15 :arg1 y :arg2 (f / friend~e.19))))))

# and_0 ,_1 besides_2 ,_3 i_4 am_5 going_6 to_7 make_8 you_9 a_10 present_11 ..._12 "_13
(a / and~e.0 :op1 (m / make-01~e.8 :arg0 (i / i~e.4) :arg1 (p / present~e.11) :arg3~e.6 (y / you~e.9)))

# he_0 laughed_1 again_2 ._3
(l / laugh-01~e.1 :arg0 (h / he~e.0) :mod (a / again~e.2))

# "_0 ah_1 ,_2 little_3 prince_4 ,_5 dear_6 little_7 prince_8 !_9
(a / and :mode~e.9 expressive~e.1 :op2 (p2 / prince~e.8 :mod (l2 / little~e.7) :mod (d / dear~e.6)))

# i_0 love_1 to_2 hear_3 that_4 laughter_5 !_6 "_7
(l / love-01~e.1 :arg0 (i / i~e.0) :arg1 (h / hear-01~e.3 :arg0 i :arg1 (l2 / laugh-01~e.5 :mod (t / that~e.4))))

# "_0 that_1 is_2 my_3 present_4 ._5
(p / present-01~e.4 :arg0 (i / i~e.3) :arg1 (t / that~e.1))

# just_0 that_1 ._2
(t / that~e.1 :mod (j / just~e.0))

# it_0 will_1 be_2 as_3 it_4 was_5 when_6 we_7 drank_8 the_9 water_10 ..._11 "_12
(r / resemble-01~e.3 :arg1 (i / it~e.0) :arg2 (t / time~e.4 :time-of~e.6 (d / drink-01~e.8 :arg0 (w / we~e.7) :arg1 (w2 / water~e.10))))

# "_0 what_1 are_2 you_3 trying_4 to_5 say_6 ?_7 "_8
(t / try-01~e.4 :arg0 (y / you~e.3) :arg1 (s / say-01~e.6 :arg0 y :arg1 (a / amr-unknown~e.7)))

# "_0 all_1 men_2 have_3 the_4 stars_5 ,_6 "_7 he_8 answered_9 ,_10 "_11 but_12 they_13 are_14 not_15 the_16 same_17 things_18 for_19 different_20 people_21 ._22
(a / answer-01~e.9 :arg0 (h / he~e.8) :arg2 (c / contrast-01~e.12 :arg1 (h2 / have-03~e.3 :arg0 (m / man~e.2 :mod (a2 / all~e.1)) :arg1 (s / star~e.5)) :arg2 (t / thing~e.18 :arg1-of~e.17 (s2 / same-01~e.17 :polarity~e.15 -~e.15 :arg2 s :arg3~e.19 (p / person~e.21 :arg1-of~e.20 (d2 / differ-02~e.20))))))

# for_0 some_1 ,_2 who_3 are_4 travelers_5 ,_6 the_7 stars_8 are_9 guides_10 ._11
(g / guide-01~e.10 :arg0 (s / star~e.8) :arg1 (s2 / some~e.1 :arg0-of~e.0 (t / travel-01~e.5)))

# for_0 others_1 they_2 are_3 no_4 more_5 than_6 little_7 lights_8 in_9 the_10 sky_11 ._12
(o2 / opine-01~e.0 :arg0 (p / person~e.4 :mod (o / other~e.1)) :arg1 (l / light~e.8 :mod (l2 / little~e.7) :location~e.9 (s / sky~e.11) :mod (o3 / only~e.5) :domain (t / they~e.2)))

# for_0 others_1 ,_2 who_3 are_4 scholars_5 ,_6 they_7 are_8 problems_9 ._10
(o / opine-01~e.0 :arg0 (s / scholar~e.5) :arg1 (p / problem~e.9 :domain (t / they~e.7)))

# for_0 my_1 businessman_2 they_3 were_4 wealth_5 ._6
(o / opine-01~e.0 :arg0 (b / businessman~e.2 :poss~e.1 (i / i~e.1)) :arg1 (w / wealth~e.5 :domain (t / they~e.3)))

# but_0 all_1 these_2 stars_3 are_4 silent_5 ._6
(c / contrast-01~e.0 :arg2 (s2 / silent~e.5 :domain (s / star~e.3 :mod (t / this~e.2 :mod (a / all~e.1)))))

# you_0 -_1 -_2 you_3 alone_4 -_5 -_6 will_7 have_8 the_9 stars_10 as_11 no_12 one_13 else_14 has_15 them_16 -_17 -_18 "_19
(h / have-03~e.8 :arg0 (y / you~e.0 :mod (a / alone~e.4)) :arg1 (s / star~e.10) :arg1-of (r / resemble-01~e.11 :polarity~e.12 -~e.12 :arg2 (h2 / have-03~e.15 :arg0 (a2 / anyone~e.13 :mod (e / else~e.14)) :arg1 s)))

# "_0 what_1 are_2 you_3 trying_4 to_5 say_6 ?_7 "_8
(t / try-01~e.4 :arg0 (y / you~e.3) :arg1 (s / say-01~e.6 :arg0 y :arg1 (a / amr-unknown~e.7)))

# "_0 in_1 one_2 of_3 the_4 stars_5 i_6 shall_7 be_8 living_9 ._10
(l / live-01~e.7 :arg0 (i / i~e.6) :location~e.1 (s / star~e.5 :quant 1~e.2 :arg1-of (i2 / include-91~e.9 :arg2 (s2 / star~e.5))))

# in_0 one_1 of_2 them_3 i_4 shall_5 be_6 laughing_7 ._8
(l / laugh-01~e.7 :arg0 (i / i~e.4) :location~e.0 (s / star~e.2 :quant 1~e.1 :arg1-of (i2 / include-91~e.3 :arg2 (t / they~e.3))))

# and_0 so_1 it_2 will_3 be_4 as_5 if_6 all_7 the_8 stars_9 were_10 laughing_11 ,_12 when_13 you_14 look_15 at_16 the_17 sky_18 at_19 night_20 ..._21 you_22 -_23 -_24 only_25 you_26 -_27 -_28 will_29 have_30 stars_31 that_32 can_33 laugh_34 !_35 "_36
(a / and~e.0 :op2 (r / resemble-01~e.5 :arg1 (i2 / it~e.2) :arg2 (l2 / laugh-01~e.11 :arg0 (s / star~e.9 :mod (a3 / all~e.7))) :time~e.13 (l3 / look-01~e.15 :arg0 (y / you~e.14 :mod (o2 / only~e.25)) :arg1 (s2 / sky~e.18) :time (d / date-entity :dayperiod~e.19 (n / night~e.20) :time-of~e.13 (h / have-03~e.30 :arg0 y :arg1 (s3 / star~e.31 :arg0-of (l / laugh-01~e.34 :arg1-of~e.32 (p / possible-01~e.33))))))))

# and_0 he_1 laughed_2 again_3 ._4
(a / and~e.0 :op2 (l / laugh-01~e.2 :arg0 (h / he~e.1) :mod (a2 / again~e.3)))

# "_0 and_1 when_2 your_3 sorrow_4 is_5 comforted_6 (_7 time_8 soothes_9 all_10 sorrows_11 )_12 you_13 will_14 be_15 content_16 that_17 you_18 have_19 known_20 me_21 ._22
(a / and~e.1 :op2 (c / content-01~e.16 :arg1 (y / you~e.13) :arg2 (k / know-02~e.20 :arg0 y :arg1 (i / i~e.21)) :time~e.2 (c2 / comfort-01~e.6 :arg1 (s / sorrow-01~e.4 :arg0 y :arg1-of (s2 / soothe-01~e.9 :arg0 (t / time~e.8)) :mod (a2 / all~e.10)))))

# you_0 will_1 always_2 be_3 my_4 friend_5 ._6
(h / have-rel-role-91~e.1 :arg0 (y / you~e.0) :arg1 (i / i~e.4) :arg2 (f / friend~e.5) :time (a / always~e.2))

# you_0 will_1 want_2 to_3 laugh_4 with_5 me_6 ._7
(w / want-01~e.2 :arg0 (y / you~e.0) :arg1 (l / laugh-01~e.4 :arg0 y :accompanier~e.5 (i / i~e.6)))

# and_0 you_1 will_2 sometimes_3 open_4 your_5 window_6 ,_7 so_8 ,_9 for_10 that_11 pleasure_12 ..._13 and_14 your_15 friends_16 will_17 be_18 properly_19 astonished_20 to_21 see_22 you_23 laughing_24 as_25 you_26 look_27 up_28 at_29 the_30 sky_31 !_32
(a / and~e.0 :op1 (o / open-01~e.4 :arg0 (y / you~e.1) :arg1 (w / window~e.6 :poss~e.5 y) :time (s / sometimes~e.3) :purpose~e.10 (p / pleasure~e.12 :mod (t / that~e.11))) :op2 (a2 / astonish-01~e.20 :arg0 (s2 / see-01~e.22 :arg0 p3 :arg1 (l / laugh-01~e.24 :arg0 (y2 / you~e.23) :time~e.25 (l2 / look-01~e.27 :arg1 (s3 / sky~e.31) :direction~e.29 (u / up~e.28)))) :arg1 (p3 / person~e.32 :arg0-of~e.17 (h / have-rel-role-91~e.17 :arg1 y :arg2 (f / friend~e.16))) :manner (p2 / proper~e.19)))

# then_0 you_1 will_2 say_3 to_4 them_5 ,_6 '_7 yes_8 ,_9 the_10 stars_11 always_12 make_13 me_14 laugh_15 !_16 '_17 and_18 they_19 will_20 think_21 you_22 are_23 crazy_24 ._25
(a / and~e.18 :op1 (s / say-01~e.3 :arg0 (y / you~e.22) :arg1 (a3 / and~e.18 :op1 (y2 / yes~e.8) :op2 (m / make-02~e.13 :arg0 (s3 / star~e.11) :arg1 (l2 / laugh-01~e.15 :arg0 (i / i~e.14)) :time (a2 / always~e.12))) :arg2 (t2 / they~e.5) :time (t / then~e.0)) :op2 (t3 / think-01~e.21 :arg0 t2 :arg1 (c / crazy-03~e.24 :arg1 y)))

# it_0 will_1 be_2 a_3 very_4 shabby_5 trick_6 that_7 i_8 shall_9 have_10 played_11 on_12 you_13 ..._14 "_15
(t3 / trick-01~e.6 :arg0 (i / i~e.8) :arg1 (y / you~e.13) :mod (s2 / shabby~e.5 :degree~e.0 (v2 / very~e.4)))

# and_0 he_1 laughed_2 again_3 ._4
(a / and~e.0 :op2 (l / laugh-01~e.2 :arg0 (h / he~e.1) :mod (a2 / again~e.3)))

# "_0 it_1 will_2 be_3 as_4 if_5 ,_6 in_7 place_8 of_9 the_10 stars_11 ,_12 i_13 had_14 given_15 you_16 a_17 great_18 number_19 of_20 little_21 bells_22 that_23 knew_24 how_25 to_26 laugh_27 ..._28 "_29
(r / resemble-01~e.4 :arg1 (g / give-01~e.15 :arg0 (i / i~e.13) :arg1 (b2 / bell~e.22 :mod (l3 / little~e.21) :quant (g2 / great~e.18) :arg0-of~e.20 (k / know-01~e.24 :arg1 (l2 / laugh-01~e.27))) :arg2 (y / you~e.16) :arg1-of (i2 / instead-of-91~e.19 :arg2 (g3 / give-01~e.15 :arg0 i :arg1 (s2 / star~e.11) :arg2 y))))

# and_0 he_1 laughed_2 again_3 ._4
(a / and~e.0 :op2 (l / laugh-01~e.2 :arg0 (h / he~e.1) :mod (a2 / again~e.3)))

# then_0 he_1 quickly_2 became_3 serious_4 :_5 "_6 tonight_7 -_8 -_9 you_10 know_11 ..._12 do_13 not_14 come_15 ,_16 "_17 said_18 the_19 little_20 prince_21 ._22
(s / say-01~e.18 :arg0 (p / prince~e.21 :mod (l / little~e.20) :arg1-of (b / become-01~e.3 :arg2 (s2 / serious-01~e.4 :arg1 p) :arg1-of (q / quick-02~e.2) :time (t / then~e.0))) :arg1 (c / come-01~e.15 :mode imperative~e.13 :polarity~e.14 -~e.14 :arg1 (y / you~e.10) :time (d / date-entity :dayperiod~e.7 (n / night~e.11) :mod (t2 / today~e.7))))

# "_0 i_1 shall_2 not_3 leave_4 you_5 ,_6 "_7
(l / leave-15~e.4 :polarity~e.3 -~e.3 :arg0 (i / i~e.1) :arg1 (y / you~e.5))

# i_0 said_1 ._2
(s / say-01~e.1 :arg0 (i / i~e.0))

# "_0 i_1 shall_2 look_3 as_4 if_5 i_6 were_7 suffering_8 ._9
(l / look-02~e.3 :arg0 (i / i~e.1) :arg1 (h / have-manner-91~e.5 :arg2 (s2 / suffer-01~e.8)))

# i_0 shall_1 look_2 a_3 little_4 as_5 if_6 i_7 were_8 dying_9 ._10
(l / look-02~e.2 :arg0 (i / i~e.0) :arg1 (h / have-manner-91~e.6 :arg2 (d2 / die-01~e.9)) :degree (l3 / little~e.4))

# it_0 is_1 like_2 that_3 ._4
(r / resemble-01~e.2 :arg1 (i / it~e.0) :arg2 (t / that~e.3))

# do_0 not_1 come_2 to_3 see_4 that_5 ._6
(c / come-01~e.2 :polarity~e.1 -~e.1 :mode~e.0 imperative~e.0 :arg1 (y / you) :purpose~e.3 (s / see-01~e.4 :arg0 y :arg1 (t / that~e.5)))

# it_0 is_1 not_2 worth_3 the_4 trouble_5 ..._6 "_7
(w / worth-02~e.3 :polarity~e.2 -~e.2 :arg1 (i / it~e.0) :arg2 (t / trouble-01~e.5))

# "_0 i_1 shall_2 not_3 leave_4 you_5 ._6 "_7
(l / leave-15~e.4 :polarity~e.3 -~e.3 :arg0 (i / i~e.1) :arg1 (y / you~e.5))

# but_0 he_1 was_2 worried_3 ._4
(c / contrast-01~e.0 :arg2 (w2 / worry-01~e.3 :arg1 (h / he~e.1)))

# "_0 i_1 tell_2 you_3 -_4 -_5 it_6 is_7 also_8 because_9 of_10 the_11 snake_12 ._13
(t / tell-01~e.2 :arg0 (i / i~e.1) :arg1 (c / cause-01~e.9 :arg0 (s / snake~e.12) :mod (a / also~e.8)) :arg2 (y / you~e.3))

# he_0 must_1 not_2 bite_3 you_4 ._5
(o2 / obligate-01~e.1 :arg1 (b2 / bite-01~e.3 :polarity~e.2 -~e.2 :arg0 (h2 / he~e.0) :arg1 (y2 / you~e.4)))

# snakes_0 -_1 -_2 they_3 are_4 malicious_5 creatures_6 ._7
(s / snake~e.0 :mod (c / creature~e.6 :mod (m / malicious~e.5)))

# this_0 one_1 might_2 bite_3 you_4 just_5 for_6 fun_7 ..._8 "_9
(p / possible-01~e.2 :arg1 (b / bite-01~e.3 :arg0 (o / one~e.1 :mod (t / this~e.0)) :arg1 (y / you~e.4) :purpose~e.6 (f / fun-01~e.7 :mod (j / just~e.5))))

# "_0 i_1 shall_2 not_3 leave_4 you_5 ._6 "_7
(l / leave-15~e.4 :polarity~e.3 -~e.3 :arg0 (i / i~e.1) :arg1 (y / you~e.5))

# but_0 a_1 thought_2 came_3 to_4 reassure_5 him_6 :_7 "_8 it_9 is_10 true_11 that_12 they_13 have_14 no_15 more_16 poison_17 for_18 a_19 second_20 bite_21 ._22 "_23
(c / contrast-01~e.0 :arg2 (c2 / come-01~e.3 :arg1 (t / think-01~e.2 :arg1 (t3 / true-01~e.11 :arg1 (h2 / have-03~e.14 :polarity~e.15 -~e.15 :arg0 (t2 / they~e.13) :arg1 (p / poison~e.17 :purpose~e.18 (b / bite-01~e.21 :ord~e.20 (o / ordinal-entity~e.19 :value 2)) :quant (m / more~e.16))) :purpose~e.4 (r / reassure-01~e.5 :arg1 (h / he~e.6))))))

# that_0 night_1 i_2 did_3 not_4 see_5 him_6 set_7 out_8 on_9 his_10 way_11 ._12
(s / see-01~e.5 :polarity~e.4 -~e.3 :arg0 (i / i~e.2) :arg1 (s2 / set-out-07~e.7 :arg0 (h / he~e.6) :arg1 (w / way~e.11 :poss~e.10 h)) :time (d / date-entity :dayperiod~e.8 (n / night~e.1) :mod (t / that~e.0)))

# he_0 got_1 away_2 from_3 me_4 without_5 making_6 a_7 sound_8 ._9
(g / get-away-08~e.1 :arg0 (h / he~e.0) :source~e.3 (i / i~e.4) :manner~e.5 (s2 / sound-02~e.8 :polarity -~e.6 :arg1 h))

# when_0 i_1 succeeded_2 in_3 catching_4 up_5 with_6 him_7 he_8 was_9 walking_10 along_11 with_12 a_13 quick_14 and_15 resolute_16 step_17 ._18
(s / succeed-01~e.2 :arg0 (i / i~e.1) :arg1 (c / catch-up-04~e.4 :arg1 i :arg2 (h / he~e.7)) :time (w / walk-01~e.10 :arg0 h :arg1-of (q / quick-02~e.14) :manner~e.17 (r2 / resolute~e.16)))

# he_0 said_1 to_2 me_3 merely_4 :_5 "_6 ah_7 !_8
(s / say-01~e.1 :arg0 (h / he~e.0) :arg1 (a / ah~e.7 :mode~e.8 expressive~e.8) :arg2 (i / i~e.3) :manner (m / mere~e.4))

# you_0 are_1 there_2 ..._3 "_4
(y / you~e.0 :location~e.2 (t / there~e.2))

# and_0 he_1 took_2 me_3 by_4 the_5 hand_6 ._7
(a / and~e.0 :op2 (t / take-01~e.2 :arg0 (h / he~e.1) :arg1 (i / i~e.3) :manner~e.4 (h2 / hand~e.6)))

# but_0 he_1 was_2 still_3 worrying_4 ._5
(c / contrast-01~e.0 :arg2 (w / worry-01~e.4 :arg1 (h / he~e.1) :time (s2 / still~e.3)))

# "_0 it_1 was_2 wrong_3 of_4 you_5 to_6 come_7 ._8
(c / come-01~e.7 :arg1 (y / you~e.5) :arg1-of (w / wrong-02~e.3))

# you_0 will_1 suffer_2 ._3
(s / suffer-01~e.2 :arg0 (y / you~e.0))

# i_0 shall_1 look_2 as_3 if_4 i_5 were_6 dead_7 ;_8 and_9 that_10 will_11 not_12 be_13 true_14 ..._15 "_16
(a / and~e.9 :op1 (r / resemble-01~e.3 :arg1 (i / i~e.5) :arg2 (i2 / i~e.0 :arg1-of (d2 / die-01~e.2))) :op2 (t / true-01~e.14 :polarity~e.12 -~e.12 :arg1 r))

# i_0 said_1 nothing_2 ._3
(s / say-01~e.1 :arg0 (i / i~e.0) :arg1 (n / nothing~e.2))

# "_0 you_1 understand_2 ..._3 it_4 is_5 too_6 far_7 ._8
(u / understand-01~e.2 :arg0 (y / you~e.1) :arg1 (f / far~e.7 :degree (t / too~e.6)))

# i_0 can_1 not_2 carry_3 this_4 body_5 with_6 me_7 ._8
(p / possible-01~e.1 :polarity~e.2 -~e.2 :arg1 (c / carry-01~e.3 :arg0 (i / i~e.0) :arg1 (b / body~e.5 :mod (t / this~e.4)) :arg3~e.6 (i2 / i~e.7)))

# it_0 is_1 too_2 heavy_3 ._4 "_5
(h2 / heavy~e.3 :degree~e.0 (t2 / too~e.2))

# i_0 said_1 nothing_2 ._3
(s / say-01~e.1 :arg0 (i / i~e.0) :arg1 (n / nothing~e.2))

# "_0 but_1 it_2 will_3 be_4 like_5 an_6 old_7 abandoned_8 shell_9 ._10
(c / contrast-01~e.1 :arg2 (r / resemble-01~e.5 :arg1 (i / it~e.2) :arg2 (s / shell~e.9 :arg1-of (a / abandon-01~e.8) :mod (o / old~e.7))))

# there_0 is_1 nothing_2 sad_3 about_4 old_5 shells_6 ..._7 "_8
(s / sad-02~e.3 :polarity~e.2 -~e.4 :arg0 (s2 / shell~e.6 :mod (o / old~e.5)))

# i_0 said_1 nothing_2 ._3
(s / say-01~e.1 :arg0 (i / i~e.0) :arg1 (n / nothing~e.2))

# he_0 was_1 a_2 little_3 discouraged_4 ._5
(d / discourage-01~e.4 :arg1 (h / he~e.0) :degree (l / little~e.3))

# but_0 he_1 made_2 one_3 more_4 effort_5 :_6 "_7 you_8 know_9 ,_10 it_11 will_12 be_13 very_14 nice_15 ._16
(c / contrast-01~e.0 :arg2 (e / effort-01~e.5 :arg0 (h / he~e.1) :arg1 (n / nice-01~e.15 :arg1 (i / it~e.11) :degree (v / very~e.14)) :mod (m2 / more~e.4 :quant 1~e.3)))

# i_0 ,_1 too_2 ,_3 shall_4 look_5 at_6 the_7 stars_8 ._9
(l / look-01~e.5 :arg0 (i / i~e.0 :mod (t / too~e.2)) :arg1 (s / star~e.8))

# all_0 the_1 stars_2 will_3 be_4 wells_5 with_6 a_7 rusty_8 pulley_9 ._10
(s / star~e.2 :domain~e.7 (w / well~e.5 :arg0-of (h / have-03~e.3 :arg1 (p / pulley~e.9 :mod (r / rust~e.8)))) :mod (a / all~e.0))

# all_0 the_1 stars_2 will_3 pour_4 out_5 fresh_6 water_7 for_8 me_9 to_10 drink_11 ..._12 "_13
(p / pour-01~e.4 :arg0 (s / star~e.2 :mod (a / all~e.0)) :arg1 (w / water~e.7 :arg1-of (f / fresh-04~e.6)) :purpose~e.8 (d / drink-01~e.11 :arg0 (i / i~e.9) :arg1 w) :direction (o / out~e.5))

# i_0 said_1 nothing_2 ._3
(s / say-01~e.1 :arg0 (i / i~e.0) :arg1 (n / nothing~e.2))

# "_0 that_1 will_2 be_3 so_4 amusing_5 !_6
(a / amuse-01~e.5 :arg0 (t / that~e.1) :degree (s / so~e.4))

# you_0 will_1 have_2 five_3 hundred_4 million_5 little_6 bells_7 ,_8 and_9 i_10 shall_11 have_12 five_13 hundred_14 million_15 springs_16 of_17 fresh_18 water_19 ..._20 "_21
(a / and~e.9 :op1 (h / have-03~e.2 :arg0 (y / you~e.0) :arg1 (b / bell~e.7 :quant 500000000~e.3 :mod (l / little~e.6))) :op2 (h2 / have-03~e.12 :arg0 (i / i~e.10) :arg1 (s / spring~e.16 :quant 500000000~e.13 :source-of~e.11 (w / water~e.19 :arg1-of (f / fresh-04~e.18)))))

# and_0 he_1 too_2 said_3 nothing_4 more_5 ,_6 because_7 he_8 was_9 crying_10 ..._11
(a / and~e.0 :op2 (s / say-01~e.3 :arg0 (h / he~e.1 :degree (t / too~e.2)) :arg1 (n / nothing~e.4 :mod (m / more~e.5)) :arg1-of (c / cause-01~e.7 :arg0 (c2 / cry-02~e.10 :arg0 h))))

# "_0 here_1 it_2 is_3 ._4
(i / it~e.2 :location~e.1 (h / here~e.1))

# let_0 me_1 go_2 on_3 by_4 myself_5 ._6 "_7
(a / allow-01~e.0 :arg0 (y / you) :arg1 (g / go-on-15~e.2 :arg1 (i / i~e.1) :mod (b / by-oneself~e.5)))

# and_0 he_1 sat_2 down_3 ,_4 because_5 he_6 was_7 afraid_8 ._9
(a / and~e.0 :op2 (s / sit-down-02~e.2 :arg1 (h / he~e.1) :arg1-of~e.3 (c / cause-01~e.5 :arg0 (f / fear-01~e.8 :arg0 h))))

# then_0 he_1 said_2 ,_3 again_4 :_5 "_6 you_7 know_8 -_9 -_10 my_11 flower_12 ..._13
(s / say-01~e.2 :arg0 (h / he~e.1) :arg1 (f / flower~e.12 :poss~e.11 h) :time (t / then~e.0) :mod (a / again~e.4))

# i_0 am_1 responsible_2 for_3 her_4 ._5
(r / responsible-03~e.2 :arg0 (i / i~e.0) :arg2 (s / she~e.4))

# and_0 she_1 is_2 so_3 weak_4 !_5
(a / and~e.0 :op2 (w / weak-02~e.4 :arg1 (s / she~e.1) :degree (s2 / so~e.3)))

# she_0 is_1 so_2 na√Øve_3 !_4
(n / naive~e.3 :degree (s2 / so~e.2) :domain~e.4 (s / she~e.0))

# she_0 has_1 four_2 thorns_3 ,_4 of_5 no_6 use_7 at_8 all_9 ,_10 to_11 protect_12 herself_13 against_14 all_15 the_16 world_17 ..._18 "_19
(h / have-03~e.1 :arg0 (s / she~e.0) :arg1 (t / thorn~e.3 :quant 4~e.2 :arg1-of (u / use-01~e.7 :polarity~e.6 -~e.6)) :purpose~e.11 (p / protect-01~e.12 :arg0 t :arg1 s :arg2 (w / world~e.17 :mod (a / all~e.15))))

# i_0 too_1 sat_2 down_3 ,_4 because_5 i_6 was_7 not_8 able_9 to_10 stand_11 up_12 any_13 longer_14 ._15
(s / sit-down-02~e.2 :arg1 (i / i~e.0 :degree (t / too~e.1)) :arg1-of~e.3 (c / cause-01~e.5 :arg0 (p / possible-01~e.9 :polarity~e.8 -~e.8 :arg1 (s2 / stand-up-07~e.11 :arg1 i :arg1-of (l / long-03~e.14 :mod (a / any~e.13))))))

# "_0 there_1 now_2 -_3 -_4 that_5 is_6 all_7 ..._8 "_9
(t / that~e.5 :mod (a / all~e.7) :time (n / now~e.2))

# he_0 still_1 hesitated_2 a_3 little_4 ;_5 then_6 he_7 got_8 up_9 ._10
(m / multi-sentence~e.1 :snt1~e.0 (h / hesitate-01~e.2 :arg0 (h2 / he~e.7) :mod (s / still~e.1) :degree (l / little~e.4)) :snt2~e.8 (g / get-05~e.9 :arg1 h2 :arg2 (u / up~e.9) :time (t / then~e.6)))

# he_0 took_1 one_2 step_3 ._4
(s / step-01~e.3 :arg1 (h / he~e.0))

# i_0 could_1 not_2 move_3 ._4
(p / possible-01~e.1 :arg1 (m / move-01~e.3 :arg1 (i / i~e.0)) :polarity~e.2 -~e.2)

# there_0 was_1 nothing_2 but_3 a_4 flash_5 of_6 yellow_7 close_8 to_9 his_10 ankle_11 ._12
(c / contrast-01~e.3 :arg1 (n / nothing~e.2) :arg2 (f / flash~e.5 :arg1-of (y / yellow-02~e.7) :arg1-of (c2 / close-10~e.8 :arg2 (a / ankle~e.11 :part-of~e.10 (h / he~e.10)))))

# he_0 remained_1 motionless_2 for_3 an_4 instant_5 ._6
(r / remain-01~e.1 :arg1 (h / he~e.0) :duration~e.3 (i / instant~e.5) :manner (m / move-01~e.2 :polarity -))

# he_0 did_1 not_2 cry_3 out_4 ._5
(c / cry-out-03~e.3 :arg0 (h / he~e.0) :polarity~e.2 -~e.1)

# he_0 fell_1 as_2 gently_3 as_4 a_5 tree_6 falls_7 ._8
(f / fall-01~e.1 :arg1 (h / he~e.0) :manner (g / gentle~e.3 :degree (e / equal~e.2) :compared-to~e.4 (f2 / fall-01~e.7 :arg1 (t / tree~e.6))))

# there_0 was_1 not_2 even_3 any_4 sound_5 ,_6 because_7 of_8 the_9 sand_10 ._11
(s / sound-02~e.5 :polarity~e.2 -~e.2 :mod (a / any~e.4 :mod (e / even~e.3)) :arg1-of (c / cause-01~e.7 :arg0 (s2 / sand~e.10)))

# chapter_0 27_1 ._2
(c / chapter~e.0 :mod 27~e.1)

# and_0 now_1 six_2 years_3 have_4 already_5 gone_6 by_7 ..._8
(a / and~e.0 :op2 (g / go-on-15~e.6 :arg1 (t / temporal-quantity :quant 6~e.2 :unit (y / year~e.3)) :time (a2 / already~e.5)) :time (n / now~e.1))

# i_0 have_1 never_2 yet_3 told_4 this_5 story_6 ._7
(t / tell-01~e.4 :polarity~e.2 -~e.2 :arg0 (i / i~e.0) :arg1 (s / story~e.6 :mod (t2 / this~e.5)) :time (e / ever~e.2) :time (y / yet~e.3))

# the_0 companions_1 who_2 met_3 me_4 on_5 my_6 return_7 were_8 well_9 content_10 to_11 see_12 me_13 alive_14 ._15
(c / content-01~e.10 :arg0 (s / see-01~e.12 :arg0 c2 :arg1 (l / live-01~e.14 :arg0 (i / i~e.4))) :arg1 (c2 / companion~e.1 :arg0-of (m / meet-03~e.3 :arg1 i :time (r / return-01~e.7 :arg1 i))) :mod (w / well~e.9))

# i_0 was_1 sad_2 ,_3 but_4 i_5 told_6 them_7 :_8 "_9 i_10 am_11 tired_12 ._13 "_14
(c / contrast-01~e.4 :arg1 (s / sad-02~e.2 :arg1 i) :arg2 (t / tell-01~e.6 :arg0 (i / i~e.0) :arg1 (t3 / tire-01~e.12 :arg1 i) :arg2 (t2 / they~e.7)))

# now_0 my_1 sorrow_2 is_3 comforted_4 a_5 little_6 ._7
(c / comfort-01~e.4 :arg1 (s / sorrow-01~e.2 :arg0 (i / i~e.1)) :time (n / now~e.0) :degree (l / little~e.6))

# that_0 is_1 to_2 say_3 -_4 -_5 not_6 entirely_7 ._8
(s / say-01~e.3 :arg1 (e / entire~e.7 :polarity~e.6 -~e.6))

# but_0 i_1 know_2 that_3 he_4 did_5 go_6 back_7 to_8 his_9 planet_10 ,_11 because_12 i_13 did_14 not_15 find_16 his_17 body_18 at_19 daybreak_20 ._21
(c / contrast-01~e.0 :arg2 (k / know-01~e.2 :arg0 (i / i~e.1) :arg1 (g / go-back-19~e.5 :arg1 (h / he~e.4) :arg2 (p / planet~e.10 :poss~e.9 h)) :arg1-of (c2 / cause-01~e.12 :arg0 (f / find-01~e.16 :arg0 i :arg1 (b / body~e.18 :poss~e.17 h) :polarity~e.15 -~e.14 :time~e.19 (d / daybreak~e.20)))))

# it_0 was_1 not_2 such_3 a_4 heavy_5 body_6 ..._7 and_8 at_9 night_10 i_11 love_12 to_13 listen_14 to_15 the_16 stars_17 ._18
(a / and~e.8 :op1 (b / body~e.6 :mod (h / heavy~e.5 :polarity~e.2 -~e.2 :mod (s / such~e.3))) :op2 (l / love-01~e.12 :arg0 (i / i~e.11) :arg1 (l2 / listen-01~e.14 :arg0 i :arg1 (s2 / star~e.17) :time (d / date-entity :dayperiod~e.9 (n / night~e.10)))))

# it_0 is_1 like_2 five_3 hundred_4 million_5 little_6 bells_7 ..._8
(r / resemble-01~e.2 :arg1 (i / it~e.0) :arg2 (b / bell~e.7 :quant 500000000~e.3 :mod (l / little~e.6)))

# but_0 there_1 is_2 one_3 extraordinary_4 thing_5 ..._6 when_7 i_8 drew_9 the_10 muzzle_11 for_12 the_13 little_14 prince_15 ,_16 i_17 forgot_18 to_19 add_20 the_21 leather_22 strap_23 to_24 it_25 ._26
(c / contrast-01~e.0 :arg2 (t / thing~e.5 :quant 1~e.3 :mod (e / extraordinary~e.4) :time~e.7 (d / draw-01~e.9 :arg0 (i / i~e.8 :arg0-of (f / forget-01~e.18 :arg1 (a / add-on-05~e.20 :arg0 i :arg1 (s / strap~e.23 :consist-of~e.25 (l2 / leather~e.22)) :arg2 m))) :arg1 (m / muzzle~e.11) :arg2 (p / prince~e.15 :mod (l / little~e.14)))))

# he_0 will_1 never_2 have_3 been_4 able_5 to_6 fasten_7 it_8 on_9 his_10 sheep_11 ._12
(p / possible-01~e.5 :polarity~e.2 -~e.2 :time (e / ever~e.2) :arg1 (f / fasten-01~e.7 :arg0 (h / he~e.0) :arg1 (i / it~e.8) :arg2 (s / sheep~e.11 :poss~e.10 h)))

# so_0 now_1 i_2 keep_3 wondering_4 :_5 what_6 is_7 happening_8 on_9 his_10 planet_11 ?_12
(k / keep-02~e.3 :arg1 (w / wonder-01~e.4 :arg0 (i / i~e.2) :arg1 (e / event~e.8 :mod (a / amr-unknown~e.12) :location~e.9 (p / planet~e.11 :poss~e.10 (h / he~e.10)))) :time (n / now~e.1))

# perhaps_0 the_1 sheep_2 has_3 eaten_4 the_5 flower_6 ..._7
(p2 / possible-01~e.0 :arg1 (e / eat-01~e.4 :arg0 (s / sheep~e.2) :arg1 (f / flower~e.6)))

# at_0 one_1 time_2 i_3 say_4 to_5 myself_6 :_7 "_8 surely_9 not_10 !_11
(s / say-01~e.4 :arg0 (i / i~e.3) :arg1 (h / have-polarity-91~e.11 :arg2 -~e.10 :arg1-of (s2 / sure-02~e.9)) :arg2 i :time~e.0 (o / one~e.1))

# the_0 little_1 prince_2 shuts_3 his_4 flower_5 under_6 her_7 glass_8 globe_9 every_10 night_11 ,_12 and_13 he_14 watches_15 over_16 his_17 sheep_18 very_19 carefully_20 ..._21 "_22
(a / and~e.13 :op1 (s / shut-01~e.3 :arg0 (p / prince~e.2 :mod (l / little~e.1)) :arg1 (g / globe~e.9 :consist-of (g2 / glass~e.8) :poss~e.7 (s2 / she~e.7) :op1-of~e.7 (u / under~e.6 :location-of (f2 / flower~e.5 :mod (l2 / little~e.1) :poss~e.4 p))) :time (r / rate-entity-91~e.10 :arg4~e.14 (n / night~e.11))) :op2 (w / watch-01~e.15 :arg0 p :arg1 (s3 / sheep~e.18) :manner (c / careful~e.20 :degree (v / very~e.19))))

# then_0 i_1 am_2 happy_3 ._4
(h / happy-01~e.3 :arg1 (i / i~e.1) :time (t / then~e.0))

# and_0 there_1 is_2 sweetness_3 in_4 the_5 laughter_6 of_7 all_8 the_9 stars_10 ._11
(a / and~e.0 :op2 (s / sweet-05~e.3 :arg1 (l / laugh-01~e.6 :arg0 (s2 / star~e.10 :mod (a2 / all~e.8)))))

# but_0 at_1 another_2 time_3 i_4 say_5 to_6 myself_7 :_8 "_9 at_10 some_11 moment_12 or_13 other_14 one_15 is_16 absent_17 -_18 minded_19 ,_20 and_21 that_22 is_23 enough_24 !_25
(c / contrast-01~e.0 :arg2 (s / say-01~e.5 :arg0 (i / i~e.4) :arg1 (a2 / and~e.21 :op1 (o / one~e.15 :mod (a3 / absent-minded~e.17) :time (o2 / or~e.13 :op1 (m / moment~e.12 :mod (s2 / some~e.11)) :op2 (o3 / other~e.14))) :op2 (t2 / that~e.22 :mod (e / enough~e.24))) :arg2 i :time~e.1 (t / time~e.3 :mod (a / another~e.2))))

# on_0 some_1 one_2 evening_3 he_4 forgot_5 the_6 glass_7 globe_8 ,_9 or_10 the_11 sheep_12 got_13 out_14 ,_15 without_16 making_17 any_18 noise_19 ,_20 in_21 the_22 night_23 ..._24 "_25
(o / or~e.10 :op1 (f / forget-01~e.5 :arg0 (h / he~e.4) :arg1 (g / globe~e.8 :consist-of (g2 / glass~e.7))) :op2 (e / escape-01~e.13 :arg0 (s / sheep~e.12) :time (d / date-entity :dayperiod~e.14 (n / night~e.23)) :manner~e.16 (s3 / sound-02~e.17 :polarity - :arg1 s :mod (a2 / any~e.18))) :time~e.21 (d2 / date-entity :dayperiod~e.0 (e2 / evening~e.3) :mod (s2 / some~e.1)))

# and_0 then_1 the_2 little_3 bells_4 are_5 changed_6 to_7 tears_8 ..._9
(a / and~e.0 :op2 (c / change-01~e.6 :arg1 (b / bell~e.4 :mod (l / little~e.3)) :arg2 (t2 / tear-03~e.8) :time (t / then~e.1)))

# here_0 ,_1 then_2 ,_3 is_4 a_5 great_6 mystery_7 ._8
(m / mystery~e.7 :mod (g / great~e.6) :time (t / then~e.2) :location~e.0 (h / here~e.0))

# for_0 you_1 who_2 also_3 love_4 the_5 little_6 prince_7 ,_8 and_9 for_10 me_11 ,_12 nothing_13 in_14 the_15 universe_16 can_17 be_18 the_19 same_20 if_21 somewhere_22 ,_23 we_24 do_25 not_26 know_27 where_28 ,_29 a_30 sheep_31 that_32 we_33 never_34 saw_35 has_36 -_37 -_38 yes_39 or_40 no_41 ?_42 --_43 eaten_44 a_45 rose_46 ..._47
(p / possible-01~e.17 :arg1 (s / same-01~e.20 :arg1 (n / nothing~e.13 :location~e.14 (u / universe~e.16)) :arg3~e.10 (a / and~e.9 :op1 (y / you~e.1 :arg0-of (l / love-01~e.4 :arg1 (p2 / prince~e.7 :mod (l2 / little~e.6))) :mod (a2 / also~e.3)) :op2 (i / i~e.11))) :condition~e.21 (e / eat-01~e.44 :mode interrogative~e.42 :arg0 (s2 / sheep~e.31 :arg1-of (s3 / see-01~e.35 :polarity~e.34 -~e.34 :arg0 (w2 / we~e.33) :time~e.36 (e2 / ever~e.34))) :arg1 (r / rose~e.46) :location~e.28 (s4 / somewhere~e.22 :arg1-of (k / know-01~e.27 :polarity~e.26 -~e.25 :arg0 w2))))

# look_0 up_1 at_2 the_3 sky_4 ._5
(l / look-01~e.0 :mode imperative~e.2 :arg0 (y / you) :arg1 (s / sky~e.4) :direction~e.2 (u / up~e.1))

# ask_0 yourselves_1 :_2 is_3 it_4 yes_5 or_6 no_7 ?_8
(a / ask-01~e.0 :mode imperative~e.1 :arg0 (y / you~e.1) :arg1 (o / or~e.6 :mode interrogative~e.8 :op1 (y2 / yes~e.5) :op2 (n / no~e.7)) :arg2 y)

# has_0 the_1 sheep_2 eaten_3 the_4 flower_5 ?_6
(e / eat-01~e.3 :arg0 (s / sheep~e.2) :arg1 (f / flower~e.5) :mode interrogative~e.6)

# and_0 you_1 will_2 see_3 how_4 everything_5 changes_6 ..._7
(a / and~e.0 :op2 (s / see-01~e.3 :arg0 (y / you~e.1) :arg1 (h / have-manner-91~e.4 :arg2 (c / change-01~e.6 :arg1 (e / everything~e.5)))))

# and_0 no_1 grown_2 -_3 up_4 will_5 ever_6 understand_7 that_8 this_9 is_10 a_11 matter_12 of_13 so_14 much_15 importance_16 !_17
(a / and~e.0 :op2 (u / understand-01~e.7 :polarity~e.1 -~e.1 :arg0 (g / grown-up~e.2) :arg1 (t / this~e.9 :arg1-of~e.8 (m / matter-01~e.12 :mod (i / important~e.16 :mod (m2 / much~e.15 :degree (s / so~e.14))))) :time (e2 / ever~e.6)))

# this_0 is_1 ,_2 to_3 me_4 ,_5 the_6 loveliest_7 and_8 saddest_9 landscape_10 in_11 the_12 world_13 ._14
(o / opine-01~e.3 :arg0 (i / i~e.4) :arg1 (l / landscape~e.10 :mod (l2 / lovely~e.7 :degree (m / most~e.9) :compared-to~e.8 (w / world~e.13)) :arg0-of (s / sad-02~e.9 :degree (m2 / most~e.9) :compared-to~e.8 w) :domain (t / this~e.0)))

# it_0 is_1 the_2 same_3 as_4 that_5 on_6 the_7 preceding_8 page_9 ,_10 but_11 i_12 have_13 drawn_14 it_15 again_16 to_17 impress_18 it_19 on_20 your_21 memory_22 ._23
(c / contrast-01~e.11 :arg1 (s / same-01~e.3 :arg1 (i / it~e.0) :arg2 (t / that~e.5 :location~e.6 (p / page~e.9 :arg1-of (p2 / precede-01~e.8)))) :arg2 (d / draw-01~e.14 :arg0 i :arg1 i :mod (a / again~e.16) :purpose~e.17 (i2 / impress-01~e.18 :arg0 i :arg1 (m / memory~e.22 :poss~e.20 (y / you~e.21)))))

# it_0 is_1 here_2 that_3 the_4 little_5 prince_6 appeared_7 on_8 earth_9 ,_10 and_11 disappeared_12 ._13
(a / and~e.11 :op1 (a2 / appear-01~e.7 :arg1 (p / prince~e.6 :mod (l / little~e.5)) :location~e.8 (e / earth~e.9)) :op2 (d / disappear-01~e.12 :arg1 p) :location~e.2 (h / here~e.2))

# look_0 at_1 it_2 carefully_3 so_4 that_5 you_6 will_7 be_8 sure_9 to_10 recognise_11 it_12 in_13 case_14 you_15 travel_16 some_17 day_18 to_19 the_20 african_21 desert_22 ._23
(l / look-01~e.0 :mode~e.5 imperative~e.1 :arg0 (y2 / you~e.6) :arg1 (i / it~e.2) :manner (c / careful~e.3) :purpose~e.9 (r / recognize-02~e.11 :arg0 (y / you~e.15) :arg1 i :arg1-of (e / ensure-01~e.14) :condition~e.12 (t / travel-01~e.16 :arg0 y :arg4~e.19 (d / desert~e.22 :location~e.13 (c2 / continent :wiki "africa"~e.21 :name (n / name :op1 "africa"~e.21))) :time~e.13 (d2 / day~e.18 :mod (s2 / some~e.17)))))

# and_0 ,_1 if_2 you_3 should_4 come_5 upon_6 this_7 spot_8 ,_9 please_10 do_11 not_12 hurry_13 on_14 ._15
(a / and~e.0 :op2 (h / hurry-01~e.13 :polarity~e.12 -~e.12 :mode imperative~e.11 :polite~e.10 +~e.10 :arg0 y :arg1 y :condition~e.2 (c / come-upon-26~e.5 :arg0 (y / you~e.3) :arg1 (s / spot~e.8 :mod (t / this~e.7)))))

# wait_0 for_1 a_2 time_3 ,_4 exactly_5 under_6 the_7 star_8 ._9
(w / wait-01~e.0 :mode imperative :arg1 (y / you) :duration~e.1 (t / time~e.3) :location (u / under~e.6 :op1 (s / star~e.8) :manner (e / exact~e.5)))

# then_0 ,_1 if_2 a_3 little_4 man_5 appears_6 who_7 laughs_8 ,_9 who_10 has_11 golden_12 hair_13 and_14 who_15 refuses_16 to_17 answer_18 questions_19 ,_20 you_21 will_22 know_23 who_24 he_25 is_26 ._27
(k / know-01~e.23 :arg0 (y / you~e.21) :arg1 m :condition~e.2 (a / appear-01~e.6 :arg1 (m / man~e.5 :mod (l / little~e.4) :arg0-of (l2 / laugh-01~e.8) :arg0-of (h / have-03~e.11 :arg1 (h2 / hair~e.13 :mod (g / golden~e.12))) :arg0-of (r / refuse-01~e.16 :arg1 (a2 / answer-01~e.18 :arg1 (q / question-01~e.19)))) :time (t / then~e.0)))

# if_0 this_1 should_2 happen_3 ,_4 please_5 comfort_6 me_7 ._8
(c / comfort-01~e.6 :polite~e.5 +~e.5 :mode imperative~e.2 :arg0 (y / you) :arg1 (i / i~e.7) :condition~e.0 (t / this~e.1))

# send_0 me_1 word_2 that_3 he_4 has_5 come_6 back_7 ._8
(s / send-01~e.0 :mode~e.3 imperative~e.1 :arg0 (y / you) :arg1 (w / word-01~e.2 :arg1 (c / come-01~e.6 :arg1 (h / he~e.4) :arg4~e.7 (b / back~e.7))) :arg2 (i / i~e.1))

